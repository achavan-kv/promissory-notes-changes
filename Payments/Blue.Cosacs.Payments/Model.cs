













//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Cosacs Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using Blue.Transactions;

namespace Blue.Cosacs.Payments
{
    
        public partial class ContextBase : DbContextBase
        {
			protected ContextBase(string connectionString = "Default") : base(connectionString) 
			{
				Database.SetInitializer<Context>(null);
			}
		 
            
                public virtual DbSet<Bank> Bank { get; set; }
            
                public virtual DbSet<PaymentMethod> PaymentMethod { get; set; }
            
                public virtual DbSet<ExchangeRate> ExchangeRate { get; set; }
            
                public virtual DbSet<CurrencyCodes> CurrencyCodes { get; set; }
            
            
            protected override void OnModelCreating(DbModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);
                
                        var t0 = modelBuilder.Entity< Bank >();
                        t0.ToTable("Bank", "Payments");
                        
                        t0.HasKey(t => t.Id);
                        
                        t0.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.BankName)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(40)
                        
                        
                        ;
                        
                        t0.Property(t => t.Active)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.BankCode)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(6)
                        
                        
                        ;
                        
                        var t1 = modelBuilder.Entity< PaymentMethod >();
                        t1.ToTable("PaymentMethod", "Payments");
                        
                        t1.HasKey(t => t.Id);
                        
                        t1.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t1.Property(t => t.Description)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(64)
                        
                        
                        ;
                        
                        t1.Property(t => t.Active)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t1.Property(t => t.IsReturnAllowed)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t1.Property(t => t.IsCashReturnAllowed)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        var t2 = modelBuilder.Entity< ExchangeRate >();
                        t2.ToTable("ExchangeRate", "Payments");
                        
                        t2.HasKey(t => t.Id);
                        
                        t2.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.CurrencyCode)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(3)
                        .IsFixedLength()
                        
                        ;
                        
                        t2.Property(t => t.Rate)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.DateFrom)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.CreatedOn)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.CreatedBy)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        var t3 = modelBuilder.Entity< CurrencyCodes >();
                        t3.ToTable("CurrencyCodes", "Payments");
                        
                        t3.HasKey(t => t.Id);
                        
                        t3.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t3.Property(t => t.CurrencyCode)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(3)
                        .IsFixedLength()
                        
                        ;
                        
                        t3.Property(t => t.CurrencyName)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(64)
                        
                        
                        ;
                        
                        modelBuilder.Entity< ActiveExchangeRates >().ToTable("ActiveExchangeRates", "Payments");
                        
            }
        }

        
        [Serializable]
	[DataContract]
    public partial class Bank
    {
                [DataMember] public int Id { get; set; }
                [DataMember] public string BankName { get; set; }
                [DataMember] public bool Active { get; set; }
                [DataMember] public string BankCode { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class PaymentMethod
    {
                [DataMember] public byte Id { get; set; }
                [DataMember] public string Description { get; set; }
                [DataMember] public bool Active { get; set; }
                [DataMember] public bool IsReturnAllowed { get; set; }
                [DataMember] public bool IsCashReturnAllowed { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class ExchangeRate
    {
                [DataMember] public int Id { get; set; }
                [DataMember] public string CurrencyCode { get; set; }
                [DataMember] public decimal Rate { get; set; }
                [DataMember] public DateTime DateFrom { get; set; }
                [DataMember] public DateTime CreatedOn { get; set; }
                [DataMember] public int CreatedBy { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class CurrencyCodes
    {
                [DataMember] public int Id { get; set; }
                [DataMember] public string CurrencyCode { get; set; }
                [DataMember] public string CurrencyName { get; set; }
            }

        partial class ContextBase
    {
        public virtual DbSet<ActiveExchangeRates> ActiveExchangeRates { get; set; }
    }
    
        [Serializable]
	[DataContract]
    public partial class ActiveExchangeRates
    {
                [DataMember] public int id { get; set; }
                [DataMember] public string CurrencyCode { get; set; }
                [DataMember] public string CurrencyName { get; set; }
                [DataMember] public decimal Rate { get; set; }
                [DataMember] public DateTime DateFrom { get; set; }
                [DataMember] public DateTime CreatedOn { get; set; }
                [DataMember] public int CreatedBy { get; set; }
            }

        public partial class Settings : Blue.Config.SettingsBase
    {
        public Settings() : base(Blue.Cosacs.Payments.Module.Instance) {}

        public static StructureMap.Configuration.DSL.IRegistry Register<T>(StructureMap.Configuration.DSL.IRegistry registry, T singletonObject)
            where T : Blue.Config.ISettings

        {
            registry.For<Blue.Config.ISettings>().Add(singletonObject).Named(@"Blue.Cosacs.Payments");
            registry.For<T>().Singleton().Use(singletonObject);
            return registry;
        }

        public override Blue.Config.SettingMetadata[] Metadata()
        {
            return metadata;
        }

        #region Setting Metadata
        private static readonly Blue.Config.SettingMetadata[] metadata = new Blue.Config.SettingMetadata[] 
        {
                        new Blue.Config.SettingMetadata.@list {
                Id = @"PaymentCardType",
                Name = @"Payment Card Types",
                Description = @"Payment Card Types",
                Category = @"Payments",
                Default = @"",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@list,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                    };
        #endregion

        #region Setting Enums
                #endregion

        #region Setting Properties
                public System.String[] PaymentCardType 
        { 
            get { return ((Blue.Config.ISettingsReader)this).List("PaymentCardType"); }
        }
                #endregion
    }
    
    

        public class Module : Blue.Config.ModuleBase
    {
        private Module() {}

        public static readonly Module Instance = new Module
        {
            Label = @"Payments",
            Namespace = @"Blue.Cosacs.Payments",
            Schema = @"Payments",
        };
    }
    }
