//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.235.
// 
#pragma warning disable 1591

namespace STL.PL.WSUpdater {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WUpdaterSoap", Namespace="http://strategicthought.com/webservices/")]
    public partial class WUpdater : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckNewVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileListForUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilesForDownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportUpgradeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WUpdater() {
            this.Url = global::STL.PL.Properties.Settings.Default.Courts_NET_PL_WSUpdater_WUpdater;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckNewVersionCompletedEventHandler CheckNewVersionCompleted;
        
        /// <remarks/>
        public event GetFileListForUpdateCompletedEventHandler GetFileListForUpdateCompleted;
        
        /// <remarks/>
        public event GetFilesForDownloadCompletedEventHandler GetFilesForDownloadCompleted;
        
        /// <remarks/>
        public event GetServerPathCompletedEventHandler GetServerPathCompleted;
        
        /// <remarks/>
        public event DownloadFileCompletedEventHandler DownloadFileCompleted;
        
        /// <remarks/>
        public event CheckDBCompletedEventHandler CheckDBCompleted;
        
        /// <remarks/>
        public event ReportUpgradeCompletedEventHandler ReportUpgradeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/CheckNewVersion", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckNewVersion(string versionclient) {
            object[] results = this.Invoke("CheckNewVersion", new object[] {
                        versionclient});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckNewVersion(string versionclient, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckNewVersion", new object[] {
                        versionclient}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCheckNewVersion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckNewVersionAsync(string versionclient) {
            this.CheckNewVersionAsync(versionclient, null);
        }
        
        /// <remarks/>
        public void CheckNewVersionAsync(string versionclient, object userState) {
            if ((this.CheckNewVersionOperationCompleted == null)) {
                this.CheckNewVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckNewVersionOperationCompleted);
            }
            this.InvokeAsync("CheckNewVersion", new object[] {
                        versionclient}, this.CheckNewVersionOperationCompleted, userState);
        }
        
        private void OnCheckNewVersionOperationCompleted(object arg) {
            if ((this.CheckNewVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckNewVersionCompleted(this, new CheckNewVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetFileListForUpdate", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UpdateFile[] GetFileListForUpdate() {
            object[] results = this.Invoke("GetFileListForUpdate", new object[0]);
            return ((UpdateFile[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFileListForUpdate(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFileListForUpdate", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public UpdateFile[] EndGetFileListForUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UpdateFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileListForUpdateAsync() {
            this.GetFileListForUpdateAsync(null);
        }
        
        /// <remarks/>
        public void GetFileListForUpdateAsync(object userState) {
            if ((this.GetFileListForUpdateOperationCompleted == null)) {
                this.GetFileListForUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileListForUpdateOperationCompleted);
            }
            this.InvokeAsync("GetFileListForUpdate", new object[0], this.GetFileListForUpdateOperationCompleted, userState);
        }
        
        private void OnGetFileListForUpdateOperationCompleted(object arg) {
            if ((this.GetFileListForUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileListForUpdateCompleted(this, new GetFileListForUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetFilesForDownload", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UpdateFile[] GetFilesForDownload(string additionalpath) {
            object[] results = this.Invoke("GetFilesForDownload", new object[] {
                        additionalpath});
            return ((UpdateFile[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFilesForDownload(string additionalpath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFilesForDownload", new object[] {
                        additionalpath}, callback, asyncState);
        }
        
        /// <remarks/>
        public UpdateFile[] EndGetFilesForDownload(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UpdateFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFilesForDownloadAsync(string additionalpath) {
            this.GetFilesForDownloadAsync(additionalpath, null);
        }
        
        /// <remarks/>
        public void GetFilesForDownloadAsync(string additionalpath, object userState) {
            if ((this.GetFilesForDownloadOperationCompleted == null)) {
                this.GetFilesForDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilesForDownloadOperationCompleted);
            }
            this.InvokeAsync("GetFilesForDownload", new object[] {
                        additionalpath}, this.GetFilesForDownloadOperationCompleted, userState);
        }
        
        private void OnGetFilesForDownloadOperationCompleted(object arg) {
            if ((this.GetFilesForDownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilesForDownloadCompleted(this, new GetFilesForDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetServerPath", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerPath() {
            object[] results = this.Invoke("GetServerPath", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServerPath(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServerPath", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetServerPath(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerPathAsync() {
            this.GetServerPathAsync(null);
        }
        
        /// <remarks/>
        public void GetServerPathAsync(object userState) {
            if ((this.GetServerPathOperationCompleted == null)) {
                this.GetServerPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerPathOperationCompleted);
            }
            this.InvokeAsync("GetServerPath", new object[0], this.GetServerPathOperationCompleted, userState);
        }
        
        private void OnGetServerPathOperationCompleted(object arg) {
            if ((this.GetServerPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerPathCompleted(this, new GetServerPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/DownloadFile", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadFile(string path) {
            object[] results = this.Invoke("DownloadFile", new object[] {
                        path});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDownloadFile(string path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DownloadFile", new object[] {
                        path}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndDownloadFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadFileAsync(string path) {
            this.DownloadFileAsync(path, null);
        }
        
        /// <remarks/>
        public void DownloadFileAsync(string path, object userState) {
            if ((this.DownloadFileOperationCompleted == null)) {
                this.DownloadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadFileOperationCompleted);
            }
            this.InvokeAsync("DownloadFile", new object[] {
                        path}, this.DownloadFileOperationCompleted, userState);
        }
        
        private void OnDownloadFileOperationCompleted(object arg) {
            if ((this.DownloadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadFileCompleted(this, new DownloadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/CheckDB", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckDB() {
            object[] results = this.Invoke("CheckDB", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckDB(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckDB", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCheckDB(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDBAsync() {
            this.CheckDBAsync(null);
        }
        
        /// <remarks/>
        public void CheckDBAsync(object userState) {
            if ((this.CheckDBOperationCompleted == null)) {
                this.CheckDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDBOperationCompleted);
            }
            this.InvokeAsync("CheckDB", new object[0], this.CheckDBOperationCompleted, userState);
        }
        
        private void OnCheckDBOperationCompleted(object arg) {
            if ((this.CheckDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDBCompleted(this, new CheckDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/ReportUpgrade", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReportUpgrade(string machinename, string domain, string user, string oldversion, string newversion) {
            this.Invoke("ReportUpgrade", new object[] {
                        machinename,
                        domain,
                        user,
                        oldversion,
                        newversion});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReportUpgrade(string machinename, string domain, string user, string oldversion, string newversion, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReportUpgrade", new object[] {
                        machinename,
                        domain,
                        user,
                        oldversion,
                        newversion}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndReportUpgrade(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ReportUpgradeAsync(string machinename, string domain, string user, string oldversion, string newversion) {
            this.ReportUpgradeAsync(machinename, domain, user, oldversion, newversion, null);
        }
        
        /// <remarks/>
        public void ReportUpgradeAsync(string machinename, string domain, string user, string oldversion, string newversion, object userState) {
            if ((this.ReportUpgradeOperationCompleted == null)) {
                this.ReportUpgradeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportUpgradeOperationCompleted);
            }
            this.InvokeAsync("ReportUpgrade", new object[] {
                        machinename,
                        domain,
                        user,
                        oldversion,
                        newversion}, this.ReportUpgradeOperationCompleted, userState);
        }
        
        private void OnReportUpgradeOperationCompleted(object arg) {
            if ((this.ReportUpgradeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportUpgradeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://strategicthought.com/webservices/")]
    public partial class UpdateFile {
        
        private bool dirField;
        
        private string filenameField;
        
        private string fullpathField;
        
        private string versionField;
        
        private long sizeField;
        
        /// <remarks/>
        public bool dir {
            get {
                return this.dirField;
            }
            set {
                this.dirField = value;
            }
        }
        
        /// <remarks/>
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <remarks/>
        public string fullpath {
            get {
                return this.fullpathField;
            }
            set {
                this.fullpathField = value;
            }
        }
        
        /// <remarks/>
        public string version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public long size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckNewVersionCompletedEventHandler(object sender, CheckNewVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckNewVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckNewVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFileListForUpdateCompletedEventHandler(object sender, GetFileListForUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileListForUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileListForUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UpdateFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UpdateFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFilesForDownloadCompletedEventHandler(object sender, GetFilesForDownloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilesForDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilesForDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UpdateFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UpdateFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServerPathCompletedEventHandler(object sender, GetServerPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DownloadFileCompletedEventHandler(object sender, DownloadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckDBCompletedEventHandler(object sender, CheckDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReportUpgradeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591