//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.296.
// 
#pragma warning disable 1591

namespace STL.PL.WS9 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WEODManagerSoap", Namespace="http://strategicthought.com/webservices/")]
    public partial class WEODManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private Authentication authenticationValueField;
        
        private System.Threading.SendOrPostCallback GetEODControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInterfaceControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInterfaceErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback EODControlUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInterfaceValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInterfaceFinancialOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInterfaceBreakdownOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInterfaceTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSummaryUpdateControlDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSummaryControlBrancgFiguresOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSummaryControlTotalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEodOptionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveEODConfigurationOptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEodOptionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEODAdHocScriptsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EODStartJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteEODConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDiskSpaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEodOptionListDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetReRunStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFACT2000OptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EODSetReRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckServiceExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckToAddSCStatementsOptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveOptionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WEODManager() {
            this.Url = "http://localhost/Courts.NET.WS/WEODManager.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public Authentication AuthenticationValue {
            get {
                return this.authenticationValueField;
            }
            set {
                this.authenticationValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetEODControlCompletedEventHandler GetEODControlCompleted;
        
        /// <remarks/>
        public event GetInterfaceControlCompletedEventHandler GetInterfaceControlCompleted;
        
        /// <remarks/>
        public event GetInterfaceErrorCompletedEventHandler GetInterfaceErrorCompleted;
        
        /// <remarks/>
        public event EODControlUpdateCompletedEventHandler EODControlUpdateCompleted;
        
        /// <remarks/>
        public event GetInterfaceValueCompletedEventHandler GetInterfaceValueCompleted;
        
        /// <remarks/>
        public event GetInterfaceFinancialCompletedEventHandler GetInterfaceFinancialCompleted;
        
        /// <remarks/>
        public event GetInterfaceBreakdownCompletedEventHandler GetInterfaceBreakdownCompleted;
        
        /// <remarks/>
        public event GetInterfaceTransactionsCompletedEventHandler GetInterfaceTransactionsCompleted;
        
        /// <remarks/>
        public event GetSummaryUpdateControlDetailsCompletedEventHandler GetSummaryUpdateControlDetailsCompleted;
        
        /// <remarks/>
        public event GetSummaryControlBrancgFiguresCompletedEventHandler GetSummaryControlBrancgFiguresCompleted;
        
        /// <remarks/>
        public event GetSummaryControlTotalsCompletedEventHandler GetSummaryControlTotalsCompleted;
        
        /// <remarks/>
        public event GetEodOptionListCompletedEventHandler GetEodOptionListCompleted;
        
        /// <remarks/>
        public event SaveEODConfigurationOptionsCompletedEventHandler SaveEODConfigurationOptionsCompleted;
        
        /// <remarks/>
        public event GetEodOptionStatusCompletedEventHandler GetEodOptionStatusCompleted;
        
        /// <remarks/>
        public event GetEODAdHocScriptsCompletedEventHandler GetEODAdHocScriptsCompleted;
        
        /// <remarks/>
        public event EODStartJobCompletedEventHandler EODStartJobCompleted;
        
        /// <remarks/>
        public event DeleteEODConfigurationCompletedEventHandler DeleteEODConfigurationCompleted;
        
        /// <remarks/>
        public event CheckDiskSpaceCompletedEventHandler CheckDiskSpaceCompleted;
        
        /// <remarks/>
        public event GetEodOptionListDetailsCompletedEventHandler GetEodOptionListDetailsCompleted;
        
        /// <remarks/>
        public event SetReRunStatusCompletedEventHandler SetReRunStatusCompleted;
        
        /// <remarks/>
        public event SaveFACT2000OptionsCompletedEventHandler SaveFACT2000OptionsCompleted;
        
        /// <remarks/>
        public event EODSetReRunCompletedEventHandler EODSetReRunCompleted;
        
        /// <remarks/>
        public event CheckServiceExistsCompletedEventHandler CheckServiceExistsCompleted;
        
        /// <remarks/>
        public event CheckToAddSCStatementsOptionCompletedEventHandler CheckToAddSCStatementsOptionCompleted;
        
        /// <remarks/>
        public event RemoveOptionCompletedEventHandler RemoveOptionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetEODControl", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetEODControl(out string err) {
            object[] results = this.Invoke("GetEODControl", new object[0]);
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEODControl(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEODControl", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetEODControl(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetEODControlAsync() {
            this.GetEODControlAsync(null);
        }
        
        /// <remarks/>
        public void GetEODControlAsync(object userState) {
            if ((this.GetEODControlOperationCompleted == null)) {
                this.GetEODControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEODControlOperationCompleted);
            }
            this.InvokeAsync("GetEODControl", new object[0], this.GetEODControlOperationCompleted, userState);
        }
        
        private void OnGetEODControlOperationCompleted(object arg) {
            if ((this.GetEODControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEODControlCompleted(this, new GetEODControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetInterfaceControl", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetInterfaceControl(string eodInterface, string eodInterface2, bool allRuns, out string err) {
            object[] results = this.Invoke("GetInterfaceControl", new object[] {
                        eodInterface,
                        eodInterface2,
                        allRuns});
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetInterfaceControl(string eodInterface, string eodInterface2, bool allRuns, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetInterfaceControl", new object[] {
                        eodInterface,
                        eodInterface2,
                        allRuns}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetInterfaceControl(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetInterfaceControlAsync(string eodInterface, string eodInterface2, bool allRuns) {
            this.GetInterfaceControlAsync(eodInterface, eodInterface2, allRuns, null);
        }
        
        /// <remarks/>
        public void GetInterfaceControlAsync(string eodInterface, string eodInterface2, bool allRuns, object userState) {
            if ((this.GetInterfaceControlOperationCompleted == null)) {
                this.GetInterfaceControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInterfaceControlOperationCompleted);
            }
            this.InvokeAsync("GetInterfaceControl", new object[] {
                        eodInterface,
                        eodInterface2,
                        allRuns}, this.GetInterfaceControlOperationCompleted, userState);
        }
        
        private void OnGetInterfaceControlOperationCompleted(object arg) {
            if ((this.GetInterfaceControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInterfaceControlCompleted(this, new GetInterfaceControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetInterfaceError", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetInterfaceError(string eodInterface, int runno, System.DateTime startdate, out string err) {
            object[] results = this.Invoke("GetInterfaceError", new object[] {
                        eodInterface,
                        runno,
                        startdate});
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetInterfaceError(string eodInterface, int runno, System.DateTime startdate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetInterfaceError", new object[] {
                        eodInterface,
                        runno,
                        startdate}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetInterfaceError(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetInterfaceErrorAsync(string eodInterface, int runno, System.DateTime startdate) {
            this.GetInterfaceErrorAsync(eodInterface, runno, startdate, null);
        }
        
        /// <remarks/>
        public void GetInterfaceErrorAsync(string eodInterface, int runno, System.DateTime startdate, object userState) {
            if ((this.GetInterfaceErrorOperationCompleted == null)) {
                this.GetInterfaceErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInterfaceErrorOperationCompleted);
            }
            this.InvokeAsync("GetInterfaceError", new object[] {
                        eodInterface,
                        runno,
                        startdate}, this.GetInterfaceErrorOperationCompleted, userState);
        }
        
        private void OnGetInterfaceErrorOperationCompleted(object arg) {
            if ((this.GetInterfaceErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInterfaceErrorCompleted(this, new GetInterfaceErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/EODControlUpdate", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int EODControlUpdate(System.Data.DataSet controls, out string err) {
            object[] results = this.Invoke("EODControlUpdate", new object[] {
                        controls});
            err = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEODControlUpdate(System.Data.DataSet controls, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EODControlUpdate", new object[] {
                        controls}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndEODControlUpdate(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void EODControlUpdateAsync(System.Data.DataSet controls) {
            this.EODControlUpdateAsync(controls, null);
        }
        
        /// <remarks/>
        public void EODControlUpdateAsync(System.Data.DataSet controls, object userState) {
            if ((this.EODControlUpdateOperationCompleted == null)) {
                this.EODControlUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEODControlUpdateOperationCompleted);
            }
            this.InvokeAsync("EODControlUpdate", new object[] {
                        controls}, this.EODControlUpdateOperationCompleted, userState);
        }
        
        private void OnEODControlUpdateOperationCompleted(object arg) {
            if ((this.EODControlUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EODControlUpdateCompleted(this, new EODControlUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetInterfaceValue", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetInterfaceValue(string eodInterface, int runno, out string err) {
            object[] results = this.Invoke("GetInterfaceValue", new object[] {
                        eodInterface,
                        runno});
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetInterfaceValue(string eodInterface, int runno, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetInterfaceValue", new object[] {
                        eodInterface,
                        runno}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetInterfaceValue(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetInterfaceValueAsync(string eodInterface, int runno) {
            this.GetInterfaceValueAsync(eodInterface, runno, null);
        }
        
        /// <remarks/>
        public void GetInterfaceValueAsync(string eodInterface, int runno, object userState) {
            if ((this.GetInterfaceValueOperationCompleted == null)) {
                this.GetInterfaceValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInterfaceValueOperationCompleted);
            }
            this.InvokeAsync("GetInterfaceValue", new object[] {
                        eodInterface,
                        runno}, this.GetInterfaceValueOperationCompleted, userState);
        }
        
        private void OnGetInterfaceValueOperationCompleted(object arg) {
            if ((this.GetInterfaceValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInterfaceValueCompleted(this, new GetInterfaceValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetInterfaceFinancial", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetInterfaceFinancial(int runno, out string err) {
            object[] results = this.Invoke("GetInterfaceFinancial", new object[] {
                        runno});
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetInterfaceFinancial(int runno, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetInterfaceFinancial", new object[] {
                        runno}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetInterfaceFinancial(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetInterfaceFinancialAsync(int runno) {
            this.GetInterfaceFinancialAsync(runno, null);
        }
        
        /// <remarks/>
        public void GetInterfaceFinancialAsync(int runno, object userState) {
            if ((this.GetInterfaceFinancialOperationCompleted == null)) {
                this.GetInterfaceFinancialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInterfaceFinancialOperationCompleted);
            }
            this.InvokeAsync("GetInterfaceFinancial", new object[] {
                        runno}, this.GetInterfaceFinancialOperationCompleted, userState);
        }
        
        private void OnGetInterfaceFinancialOperationCompleted(object arg) {
            if ((this.GetInterfaceFinancialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInterfaceFinancialCompleted(this, new GetInterfaceFinancialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetInterfaceBreakdown", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetInterfaceBreakdown(int runno, int branchNo, string interfaceAcctNo, out string err) {
            object[] results = this.Invoke("GetInterfaceBreakdown", new object[] {
                        runno,
                        branchNo,
                        interfaceAcctNo});
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetInterfaceBreakdown(int runno, int branchNo, string interfaceAcctNo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetInterfaceBreakdown", new object[] {
                        runno,
                        branchNo,
                        interfaceAcctNo}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetInterfaceBreakdown(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetInterfaceBreakdownAsync(int runno, int branchNo, string interfaceAcctNo) {
            this.GetInterfaceBreakdownAsync(runno, branchNo, interfaceAcctNo, null);
        }
        
        /// <remarks/>
        public void GetInterfaceBreakdownAsync(int runno, int branchNo, string interfaceAcctNo, object userState) {
            if ((this.GetInterfaceBreakdownOperationCompleted == null)) {
                this.GetInterfaceBreakdownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInterfaceBreakdownOperationCompleted);
            }
            this.InvokeAsync("GetInterfaceBreakdown", new object[] {
                        runno,
                        branchNo,
                        interfaceAcctNo}, this.GetInterfaceBreakdownOperationCompleted, userState);
        }
        
        private void OnGetInterfaceBreakdownOperationCompleted(object arg) {
            if ((this.GetInterfaceBreakdownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInterfaceBreakdownCompleted(this, new GetInterfaceBreakdownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetInterfaceTransactions", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetInterfaceTransactions(int runno, int empeeno, string code, string interfaceAcctNo, int branchNo, out string err) {
            object[] results = this.Invoke("GetInterfaceTransactions", new object[] {
                        runno,
                        empeeno,
                        code,
                        interfaceAcctNo,
                        branchNo});
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetInterfaceTransactions(int runno, int empeeno, string code, string interfaceAcctNo, int branchNo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetInterfaceTransactions", new object[] {
                        runno,
                        empeeno,
                        code,
                        interfaceAcctNo,
                        branchNo}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetInterfaceTransactions(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetInterfaceTransactionsAsync(int runno, int empeeno, string code, string interfaceAcctNo, int branchNo) {
            this.GetInterfaceTransactionsAsync(runno, empeeno, code, interfaceAcctNo, branchNo, null);
        }
        
        /// <remarks/>
        public void GetInterfaceTransactionsAsync(int runno, int empeeno, string code, string interfaceAcctNo, int branchNo, object userState) {
            if ((this.GetInterfaceTransactionsOperationCompleted == null)) {
                this.GetInterfaceTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInterfaceTransactionsOperationCompleted);
            }
            this.InvokeAsync("GetInterfaceTransactions", new object[] {
                        runno,
                        empeeno,
                        code,
                        interfaceAcctNo,
                        branchNo}, this.GetInterfaceTransactionsOperationCompleted, userState);
        }
        
        private void OnGetInterfaceTransactionsOperationCompleted(object arg) {
            if ((this.GetInterfaceTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInterfaceTransactionsCompleted(this, new GetInterfaceTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetSummaryUpdateControlDetails", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSummaryUpdateControlDetails(int firstrunno, int lastrunno, bool useLiveDatabase, out string err) {
            object[] results = this.Invoke("GetSummaryUpdateControlDetails", new object[] {
                        firstrunno,
                        lastrunno,
                        useLiveDatabase});
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSummaryUpdateControlDetails(int firstrunno, int lastrunno, bool useLiveDatabase, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSummaryUpdateControlDetails", new object[] {
                        firstrunno,
                        lastrunno,
                        useLiveDatabase}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetSummaryUpdateControlDetails(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSummaryUpdateControlDetailsAsync(int firstrunno, int lastrunno, bool useLiveDatabase) {
            this.GetSummaryUpdateControlDetailsAsync(firstrunno, lastrunno, useLiveDatabase, null);
        }
        
        /// <remarks/>
        public void GetSummaryUpdateControlDetailsAsync(int firstrunno, int lastrunno, bool useLiveDatabase, object userState) {
            if ((this.GetSummaryUpdateControlDetailsOperationCompleted == null)) {
                this.GetSummaryUpdateControlDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSummaryUpdateControlDetailsOperationCompleted);
            }
            this.InvokeAsync("GetSummaryUpdateControlDetails", new object[] {
                        firstrunno,
                        lastrunno,
                        useLiveDatabase}, this.GetSummaryUpdateControlDetailsOperationCompleted, userState);
        }
        
        private void OnGetSummaryUpdateControlDetailsOperationCompleted(object arg) {
            if ((this.GetSummaryUpdateControlDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSummaryUpdateControlDetailsCompleted(this, new GetSummaryUpdateControlDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetSummaryControlBrancgFigures", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSummaryControlBrancgFigures(int runno, bool useLiveDatabase, out string err) {
            object[] results = this.Invoke("GetSummaryControlBrancgFigures", new object[] {
                        runno,
                        useLiveDatabase});
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSummaryControlBrancgFigures(int runno, bool useLiveDatabase, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSummaryControlBrancgFigures", new object[] {
                        runno,
                        useLiveDatabase}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetSummaryControlBrancgFigures(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSummaryControlBrancgFiguresAsync(int runno, bool useLiveDatabase) {
            this.GetSummaryControlBrancgFiguresAsync(runno, useLiveDatabase, null);
        }
        
        /// <remarks/>
        public void GetSummaryControlBrancgFiguresAsync(int runno, bool useLiveDatabase, object userState) {
            if ((this.GetSummaryControlBrancgFiguresOperationCompleted == null)) {
                this.GetSummaryControlBrancgFiguresOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSummaryControlBrancgFiguresOperationCompleted);
            }
            this.InvokeAsync("GetSummaryControlBrancgFigures", new object[] {
                        runno,
                        useLiveDatabase}, this.GetSummaryControlBrancgFiguresOperationCompleted, userState);
        }
        
        private void OnGetSummaryControlBrancgFiguresOperationCompleted(object arg) {
            if ((this.GetSummaryControlBrancgFiguresCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSummaryControlBrancgFiguresCompleted(this, new GetSummaryControlBrancgFiguresCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetSummaryControlTotals", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSummaryControlTotals(int runno, int branchno, string type, bool useLiveDatabase, out string err) {
            object[] results = this.Invoke("GetSummaryControlTotals", new object[] {
                        runno,
                        branchno,
                        type,
                        useLiveDatabase});
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSummaryControlTotals(int runno, int branchno, string type, bool useLiveDatabase, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSummaryControlTotals", new object[] {
                        runno,
                        branchno,
                        type,
                        useLiveDatabase}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetSummaryControlTotals(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSummaryControlTotalsAsync(int runno, int branchno, string type, bool useLiveDatabase) {
            this.GetSummaryControlTotalsAsync(runno, branchno, type, useLiveDatabase, null);
        }
        
        /// <remarks/>
        public void GetSummaryControlTotalsAsync(int runno, int branchno, string type, bool useLiveDatabase, object userState) {
            if ((this.GetSummaryControlTotalsOperationCompleted == null)) {
                this.GetSummaryControlTotalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSummaryControlTotalsOperationCompleted);
            }
            this.InvokeAsync("GetSummaryControlTotals", new object[] {
                        runno,
                        branchno,
                        type,
                        useLiveDatabase}, this.GetSummaryControlTotalsOperationCompleted, userState);
        }
        
        private void OnGetSummaryControlTotalsOperationCompleted(object arg) {
            if ((this.GetSummaryControlTotalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSummaryControlTotalsCompleted(this, new GetSummaryControlTotalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetEodOptionList", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetEodOptionList(string configurationName, out string err) {
            object[] results = this.Invoke("GetEodOptionList", new object[] {
                        configurationName});
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEodOptionList(string configurationName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEodOptionList", new object[] {
                        configurationName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetEodOptionList(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetEodOptionListAsync(string configurationName) {
            this.GetEodOptionListAsync(configurationName, null);
        }
        
        /// <remarks/>
        public void GetEodOptionListAsync(string configurationName, object userState) {
            if ((this.GetEodOptionListOperationCompleted == null)) {
                this.GetEodOptionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEodOptionListOperationCompleted);
            }
            this.InvokeAsync("GetEodOptionList", new object[] {
                        configurationName}, this.GetEodOptionListOperationCompleted, userState);
        }
        
        private void OnGetEodOptionListOperationCompleted(object arg) {
            if ((this.GetEodOptionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEodOptionListCompleted(this, new GetEodOptionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/SaveEODConfigurationOptions", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveEODConfigurationOptions(string confugurationName, string country, int freqType, int startDate, int startTime, System.Data.DataSet options, System.DateTime configStartDate, out string err) {
            object[] results = this.Invoke("SaveEODConfigurationOptions", new object[] {
                        confugurationName,
                        country,
                        freqType,
                        startDate,
                        startTime,
                        options,
                        configStartDate});
            err = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveEODConfigurationOptions(string confugurationName, string country, int freqType, int startDate, int startTime, System.Data.DataSet options, System.DateTime configStartDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveEODConfigurationOptions", new object[] {
                        confugurationName,
                        country,
                        freqType,
                        startDate,
                        startTime,
                        options,
                        configStartDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveEODConfigurationOptions(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveEODConfigurationOptionsAsync(string confugurationName, string country, int freqType, int startDate, int startTime, System.Data.DataSet options, System.DateTime configStartDate) {
            this.SaveEODConfigurationOptionsAsync(confugurationName, country, freqType, startDate, startTime, options, configStartDate, null);
        }
        
        /// <remarks/>
        public void SaveEODConfigurationOptionsAsync(string confugurationName, string country, int freqType, int startDate, int startTime, System.Data.DataSet options, System.DateTime configStartDate, object userState) {
            if ((this.SaveEODConfigurationOptionsOperationCompleted == null)) {
                this.SaveEODConfigurationOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveEODConfigurationOptionsOperationCompleted);
            }
            this.InvokeAsync("SaveEODConfigurationOptions", new object[] {
                        confugurationName,
                        country,
                        freqType,
                        startDate,
                        startTime,
                        options,
                        configStartDate}, this.SaveEODConfigurationOptionsOperationCompleted, userState);
        }
        
        private void OnSaveEODConfigurationOptionsOperationCompleted(object arg) {
            if ((this.SaveEODConfigurationOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveEODConfigurationOptionsCompleted(this, new SaveEODConfigurationOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetEodOptionStatus", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEodOptionStatus(string configurationName, string optionCode, out string err) {
            object[] results = this.Invoke("GetEodOptionStatus", new object[] {
                        configurationName,
                        optionCode});
            err = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEodOptionStatus(string configurationName, string optionCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEodOptionStatus", new object[] {
                        configurationName,
                        optionCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetEodOptionStatus(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEodOptionStatusAsync(string configurationName, string optionCode) {
            this.GetEodOptionStatusAsync(configurationName, optionCode, null);
        }
        
        /// <remarks/>
        public void GetEodOptionStatusAsync(string configurationName, string optionCode, object userState) {
            if ((this.GetEodOptionStatusOperationCompleted == null)) {
                this.GetEodOptionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEodOptionStatusOperationCompleted);
            }
            this.InvokeAsync("GetEodOptionStatus", new object[] {
                        configurationName,
                        optionCode}, this.GetEodOptionStatusOperationCompleted, userState);
        }
        
        private void OnGetEodOptionStatusOperationCompleted(object arg) {
            if ((this.GetEodOptionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEodOptionStatusCompleted(this, new GetEodOptionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetEODAdHocScripts", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetEODAdHocScripts(out string err) {
            object[] results = this.Invoke("GetEODAdHocScripts", new object[0]);
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEODAdHocScripts(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEODAdHocScripts", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetEODAdHocScripts(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetEODAdHocScriptsAsync() {
            this.GetEODAdHocScriptsAsync(null);
        }
        
        /// <remarks/>
        public void GetEODAdHocScriptsAsync(object userState) {
            if ((this.GetEODAdHocScriptsOperationCompleted == null)) {
                this.GetEODAdHocScriptsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEODAdHocScriptsOperationCompleted);
            }
            this.InvokeAsync("GetEODAdHocScripts", new object[0], this.GetEODAdHocScriptsOperationCompleted, userState);
        }
        
        private void OnGetEODAdHocScriptsOperationCompleted(object arg) {
            if ((this.GetEODAdHocScriptsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEODAdHocScriptsCompleted(this, new GetEODAdHocScriptsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/EODStartJob", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int EODStartJob(string configurationName, string country, out string err) {
            object[] results = this.Invoke("EODStartJob", new object[] {
                        configurationName,
                        country});
            err = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEODStartJob(string configurationName, string country, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EODStartJob", new object[] {
                        configurationName,
                        country}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndEODStartJob(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void EODStartJobAsync(string configurationName, string country) {
            this.EODStartJobAsync(configurationName, country, null);
        }
        
        /// <remarks/>
        public void EODStartJobAsync(string configurationName, string country, object userState) {
            if ((this.EODStartJobOperationCompleted == null)) {
                this.EODStartJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEODStartJobOperationCompleted);
            }
            this.InvokeAsync("EODStartJob", new object[] {
                        configurationName,
                        country}, this.EODStartJobOperationCompleted, userState);
        }
        
        private void OnEODStartJobOperationCompleted(object arg) {
            if ((this.EODStartJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EODStartJobCompleted(this, new EODStartJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/DeleteEODConfiguration", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteEODConfiguration(string configurationName, out string err) {
            object[] results = this.Invoke("DeleteEODConfiguration", new object[] {
                        configurationName});
            err = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteEODConfiguration(string configurationName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteEODConfiguration", new object[] {
                        configurationName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteEODConfiguration(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteEODConfigurationAsync(string configurationName) {
            this.DeleteEODConfigurationAsync(configurationName, null);
        }
        
        /// <remarks/>
        public void DeleteEODConfigurationAsync(string configurationName, object userState) {
            if ((this.DeleteEODConfigurationOperationCompleted == null)) {
                this.DeleteEODConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteEODConfigurationOperationCompleted);
            }
            this.InvokeAsync("DeleteEODConfiguration", new object[] {
                        configurationName}, this.DeleteEODConfigurationOperationCompleted, userState);
        }
        
        private void OnDeleteEODConfigurationOperationCompleted(object arg) {
            if ((this.DeleteEODConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteEODConfigurationCompleted(this, new DeleteEODConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/CheckDiskSpace", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CheckDiskSpace(string option, out bool enoughSpace, out bool pathError, out string err) {
            object[] results = this.Invoke("CheckDiskSpace", new object[] {
                        option});
            enoughSpace = ((bool)(results[1]));
            pathError = ((bool)(results[2]));
            err = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckDiskSpace(string option, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckDiskSpace", new object[] {
                        option}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCheckDiskSpace(System.IAsyncResult asyncResult, out bool enoughSpace, out bool pathError, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            enoughSpace = ((bool)(results[1]));
            pathError = ((bool)(results[2]));
            err = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDiskSpaceAsync(string option) {
            this.CheckDiskSpaceAsync(option, null);
        }
        
        /// <remarks/>
        public void CheckDiskSpaceAsync(string option, object userState) {
            if ((this.CheckDiskSpaceOperationCompleted == null)) {
                this.CheckDiskSpaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDiskSpaceOperationCompleted);
            }
            this.InvokeAsync("CheckDiskSpace", new object[] {
                        option}, this.CheckDiskSpaceOperationCompleted, userState);
        }
        
        private void OnCheckDiskSpaceOperationCompleted(object arg) {
            if ((this.CheckDiskSpaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDiskSpaceCompleted(this, new CheckDiskSpaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/GetEodOptionListDetails", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetEodOptionListDetails(string configurationName, out System.DateTime startDate, out int frequency, out string err) {
            object[] results = this.Invoke("GetEodOptionListDetails", new object[] {
                        configurationName});
            startDate = ((System.DateTime)(results[1]));
            frequency = ((int)(results[2]));
            err = ((string)(results[3]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEodOptionListDetails(string configurationName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEodOptionListDetails", new object[] {
                        configurationName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetEodOptionListDetails(System.IAsyncResult asyncResult, out System.DateTime startDate, out int frequency, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            startDate = ((System.DateTime)(results[1]));
            frequency = ((int)(results[2]));
            err = ((string)(results[3]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetEodOptionListDetailsAsync(string configurationName) {
            this.GetEodOptionListDetailsAsync(configurationName, null);
        }
        
        /// <remarks/>
        public void GetEodOptionListDetailsAsync(string configurationName, object userState) {
            if ((this.GetEodOptionListDetailsOperationCompleted == null)) {
                this.GetEodOptionListDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEodOptionListDetailsOperationCompleted);
            }
            this.InvokeAsync("GetEodOptionListDetails", new object[] {
                        configurationName}, this.GetEodOptionListDetailsOperationCompleted, userState);
        }
        
        private void OnGetEodOptionListDetailsOperationCompleted(object arg) {
            if ((this.GetEodOptionListDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEodOptionListDetailsCompleted(this, new GetEodOptionListDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/SetReRunStatus", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SetReRunStatus(string configurationName, string status, out string err) {
            object[] results = this.Invoke("SetReRunStatus", new object[] {
                        configurationName,
                        status});
            err = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetReRunStatus(string configurationName, string status, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetReRunStatus", new object[] {
                        configurationName,
                        status}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSetReRunStatus(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SetReRunStatusAsync(string configurationName, string status) {
            this.SetReRunStatusAsync(configurationName, status, null);
        }
        
        /// <remarks/>
        public void SetReRunStatusAsync(string configurationName, string status, object userState) {
            if ((this.SetReRunStatusOperationCompleted == null)) {
                this.SetReRunStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetReRunStatusOperationCompleted);
            }
            this.InvokeAsync("SetReRunStatus", new object[] {
                        configurationName,
                        status}, this.SetReRunStatusOperationCompleted, userState);
        }
        
        private void OnSetReRunStatusOperationCompleted(object arg) {
            if ((this.SetReRunStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetReRunStatusCompleted(this, new SetReRunStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/SaveFACT2000Options", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveFACT2000Options(System.DateTime effDate, string fullProduct, string excludeZeroStock, string processEOD, string processEOW, string processEOP, string processCINT, out string err) {
            object[] results = this.Invoke("SaveFACT2000Options", new object[] {
                        effDate,
                        fullProduct,
                        excludeZeroStock,
                        processEOD,
                        processEOW,
                        processEOP,
                        processCINT});
            err = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveFACT2000Options(System.DateTime effDate, string fullProduct, string excludeZeroStock, string processEOD, string processEOW, string processEOP, string processCINT, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveFACT2000Options", new object[] {
                        effDate,
                        fullProduct,
                        excludeZeroStock,
                        processEOD,
                        processEOW,
                        processEOP,
                        processCINT}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveFACT2000Options(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFACT2000OptionsAsync(System.DateTime effDate, string fullProduct, string excludeZeroStock, string processEOD, string processEOW, string processEOP, string processCINT) {
            this.SaveFACT2000OptionsAsync(effDate, fullProduct, excludeZeroStock, processEOD, processEOW, processEOP, processCINT, null);
        }
        
        /// <remarks/>
        public void SaveFACT2000OptionsAsync(System.DateTime effDate, string fullProduct, string excludeZeroStock, string processEOD, string processEOW, string processEOP, string processCINT, object userState) {
            if ((this.SaveFACT2000OptionsOperationCompleted == null)) {
                this.SaveFACT2000OptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFACT2000OptionsOperationCompleted);
            }
            this.InvokeAsync("SaveFACT2000Options", new object[] {
                        effDate,
                        fullProduct,
                        excludeZeroStock,
                        processEOD,
                        processEOW,
                        processEOP,
                        processCINT}, this.SaveFACT2000OptionsOperationCompleted, userState);
        }
        
        private void OnSaveFACT2000OptionsOperationCompleted(object arg) {
            if ((this.SaveFACT2000OptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFACT2000OptionsCompleted(this, new SaveFACT2000OptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/EODSetReRun", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("err")]
        public string EODSetReRun(string configName, string optionCode, int runNo) {
            object[] results = this.Invoke("EODSetReRun", new object[] {
                        configName,
                        optionCode,
                        runNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEODSetReRun(string configName, string optionCode, int runNo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EODSetReRun", new object[] {
                        configName,
                        optionCode,
                        runNo}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEODSetReRun(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EODSetReRunAsync(string configName, string optionCode, int runNo) {
            this.EODSetReRunAsync(configName, optionCode, runNo, null);
        }
        
        /// <remarks/>
        public void EODSetReRunAsync(string configName, string optionCode, int runNo, object userState) {
            if ((this.EODSetReRunOperationCompleted == null)) {
                this.EODSetReRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEODSetReRunOperationCompleted);
            }
            this.InvokeAsync("EODSetReRun", new object[] {
                        configName,
                        optionCode,
                        runNo}, this.EODSetReRunOperationCompleted, userState);
        }
        
        private void OnEODSetReRunOperationCompleted(object arg) {
            if ((this.EODSetReRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EODSetReRunCompleted(this, new EODSetReRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/CheckServiceExists", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckServiceExists(string serviceName, out string err) {
            object[] results = this.Invoke("CheckServiceExists", new object[] {
                        serviceName});
            err = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckServiceExists(string serviceName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckServiceExists", new object[] {
                        serviceName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckServiceExists(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckServiceExistsAsync(string serviceName) {
            this.CheckServiceExistsAsync(serviceName, null);
        }
        
        /// <remarks/>
        public void CheckServiceExistsAsync(string serviceName, object userState) {
            if ((this.CheckServiceExistsOperationCompleted == null)) {
                this.CheckServiceExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckServiceExistsOperationCompleted);
            }
            this.InvokeAsync("CheckServiceExists", new object[] {
                        serviceName}, this.CheckServiceExistsOperationCompleted, userState);
        }
        
        private void OnCheckServiceExistsOperationCompleted(object arg) {
            if ((this.CheckServiceExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckServiceExistsCompleted(this, new CheckServiceExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/CheckToAddSCStatementsOption", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckToAddSCStatementsOption(out string err) {
            object[] results = this.Invoke("CheckToAddSCStatementsOption", new object[0]);
            err = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckToAddSCStatementsOption(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckToAddSCStatementsOption", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckToAddSCStatementsOption(System.IAsyncResult asyncResult, out string err) {
            object[] results = this.EndInvoke(asyncResult);
            err = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckToAddSCStatementsOptionAsync() {
            this.CheckToAddSCStatementsOptionAsync(null);
        }
        
        /// <remarks/>
        public void CheckToAddSCStatementsOptionAsync(object userState) {
            if ((this.CheckToAddSCStatementsOptionOperationCompleted == null)) {
                this.CheckToAddSCStatementsOptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckToAddSCStatementsOptionOperationCompleted);
            }
            this.InvokeAsync("CheckToAddSCStatementsOption", new object[0], this.CheckToAddSCStatementsOptionOperationCompleted, userState);
        }
        
        private void OnCheckToAddSCStatementsOptionOperationCompleted(object arg) {
            if ((this.CheckToAddSCStatementsOptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckToAddSCStatementsOptionCompleted(this, new CheckToAddSCStatementsOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://strategicthought.com/webservices/RemoveOption", RequestNamespace="http://strategicthought.com/webservices/", ResponseNamespace="http://strategicthought.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("err")]
        public string RemoveOption(string configurationName, string optionCode) {
            object[] results = this.Invoke("RemoveOption", new object[] {
                        configurationName,
                        optionCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveOption(string configurationName, string optionCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveOption", new object[] {
                        configurationName,
                        optionCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRemoveOption(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveOptionAsync(string configurationName, string optionCode) {
            this.RemoveOptionAsync(configurationName, optionCode, null);
        }
        
        /// <remarks/>
        public void RemoveOptionAsync(string configurationName, string optionCode, object userState) {
            if ((this.RemoveOptionOperationCompleted == null)) {
                this.RemoveOptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveOptionOperationCompleted);
            }
            this.InvokeAsync("RemoveOption", new object[] {
                        configurationName,
                        optionCode}, this.RemoveOptionOperationCompleted, userState);
        }
        
        private void OnRemoveOptionOperationCompleted(object arg) {
            if ((this.RemoveOptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveOptionCompleted(this, new RemoveOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://strategicthought.com/webservices/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://strategicthought.com/webservices/", IsNullable=false)]
    public partial class Authentication : System.Web.Services.Protocols.SoapHeader {
        
        private string userField;
        
        private int userIdField;
        
        private string cookieField;
        
        private string passwordField;
        
        private string cultureField;
        
        private string countryField;
        
        private string versionField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public int UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        public string Cookie {
            get {
                return this.cookieField;
            }
            set {
                this.cookieField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string Culture {
            get {
                return this.cultureField;
            }
            set {
                this.cultureField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEODControlCompletedEventHandler(object sender, GetEODControlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEODControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEODControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetInterfaceControlCompletedEventHandler(object sender, GetInterfaceControlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInterfaceControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInterfaceControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetInterfaceErrorCompletedEventHandler(object sender, GetInterfaceErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInterfaceErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInterfaceErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EODControlUpdateCompletedEventHandler(object sender, EODControlUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EODControlUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EODControlUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetInterfaceValueCompletedEventHandler(object sender, GetInterfaceValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInterfaceValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInterfaceValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetInterfaceFinancialCompletedEventHandler(object sender, GetInterfaceFinancialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInterfaceFinancialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInterfaceFinancialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetInterfaceBreakdownCompletedEventHandler(object sender, GetInterfaceBreakdownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInterfaceBreakdownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInterfaceBreakdownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetInterfaceTransactionsCompletedEventHandler(object sender, GetInterfaceTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInterfaceTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInterfaceTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSummaryUpdateControlDetailsCompletedEventHandler(object sender, GetSummaryUpdateControlDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSummaryUpdateControlDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSummaryUpdateControlDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSummaryControlBrancgFiguresCompletedEventHandler(object sender, GetSummaryControlBrancgFiguresCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSummaryControlBrancgFiguresCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSummaryControlBrancgFiguresCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSummaryControlTotalsCompletedEventHandler(object sender, GetSummaryControlTotalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSummaryControlTotalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSummaryControlTotalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEodOptionListCompletedEventHandler(object sender, GetEodOptionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEodOptionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEodOptionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaveEODConfigurationOptionsCompletedEventHandler(object sender, SaveEODConfigurationOptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveEODConfigurationOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveEODConfigurationOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEodOptionStatusCompletedEventHandler(object sender, GetEodOptionStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEodOptionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEodOptionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEODAdHocScriptsCompletedEventHandler(object sender, GetEODAdHocScriptsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEODAdHocScriptsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEODAdHocScriptsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EODStartJobCompletedEventHandler(object sender, EODStartJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EODStartJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EODStartJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteEODConfigurationCompletedEventHandler(object sender, DeleteEODConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteEODConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteEODConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckDiskSpaceCompletedEventHandler(object sender, CheckDiskSpaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDiskSpaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDiskSpaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool enoughSpace {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool pathError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEodOptionListDetailsCompletedEventHandler(object sender, GetEodOptionListDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEodOptionListDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEodOptionListDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.DateTime startDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int frequency {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetReRunStatusCompletedEventHandler(object sender, SetReRunStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetReRunStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetReRunStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaveFACT2000OptionsCompletedEventHandler(object sender, SaveFACT2000OptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFACT2000OptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFACT2000OptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EODSetReRunCompletedEventHandler(object sender, EODSetReRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EODSetReRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EODSetReRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckServiceExistsCompletedEventHandler(object sender, CheckServiceExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckServiceExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckServiceExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckToAddSCStatementsOptionCompletedEventHandler(object sender, CheckToAddSCStatementsOptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckToAddSCStatementsOptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckToAddSCStatementsOptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveOptionCompletedEventHandler(object sender, RemoveOptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveOptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveOptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591