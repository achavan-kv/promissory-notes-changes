using System;
using System.Windows.Forms;
using System.Threading;
using System.Reflection;
using SHDocVw;

namespace STL.PL
{
	/// <summary>
	/// A popup prompt to report a system exception to the user with the
	/// name of the function where the error occurred. The system exception
	/// is the message generated by the .NET exception handler. The function
	/// name is coded into the application to identify the field, button or
	/// server side code where the error originated. The application will
	/// also log the error in the Windows Event Log.
	/// </summary>
	public class SoapErrorDisplay : Form
	{
        delegate void SetHeightCallback(int newHeight);

		private RichTextBox rtxtMessage;
        private Label label1;
		private Button btnDetails;
		private LinkLabel hyperlink;
		private Label label2;
		private ToolTip tooltip;
		private System.ComponentModel.IContainer components;
        private System.Windows.Forms.WebBrowser browser;
		private readonly string screenShotPath = "";

		public SoapErrorDisplay(Exception ex) //, string function)
		{
			InitializeComponent();
			//object Dummy = null;
			var html = "";
			var location = Assembly.GetExecutingAssembly().Location;
			screenShotPath = location.Substring(0, location.IndexOf("Courts.NET.PL.exe"));
			screenShotPath += "ErrorScreenShot.jpg";

			tooltip.SetToolTip(hyperlink, screenShotPath);

			/* if the exception contains html display it in the browser
			 * rather than the rich text box to improve legibility */
			if(ex.Message.IndexOf("<html>") != -1)
			{
				browser.Visible = true;
				rtxtMessage.Visible = false;

				int start = ex.Message.IndexOf("<html>");
				int end = ex.Message.IndexOf("</html>") + 7;

				html = ex.Message.Substring(start, end - start);

				// The control needs to be initialized before it can be used.
				//browser.Navigate("about:blank", ref Dummy, ref Dummy, ref Dummy, ref Dummy);
                browser.Navigate("about:blank");
				
                //// Wait for the control the be initialized and ready.
                //while(browser.ReadyState != SHDocVw.tagREADYSTATE.READYSTATE_COMPLETE)
                //{
                //    Application.DoEvents();
                //}

                //// Update the contents of the browser control.
                //HTMLDocument CurrentDocument = (HTMLDocument)this.browser.Document;
                //CurrentDocument.body.innerHTML = html;
                this.browser.Document.Write(html);
			}
			else
			{
				rtxtMessage.Text = "Message: \n\n" + ex.Message + "\n\nStackTrace: \n\n" + ex.StackTrace;
			}
		}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
            this.components = new System.ComponentModel.Container();
            this.rtxtMessage = new System.Windows.Forms.RichTextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.btnDetails = new System.Windows.Forms.Button();
            this.hyperlink = new System.Windows.Forms.LinkLabel();
            this.label2 = new System.Windows.Forms.Label();
            this.tooltip = new System.Windows.Forms.ToolTip(this.components);
            this.browser = new System.Windows.Forms.WebBrowser();
            this.SuspendLayout();
            // 
            // rtxtMessage
            // 
            this.rtxtMessage.Location = new System.Drawing.Point(8, 128);
            this.rtxtMessage.Name = "rtxtMessage";
            this.rtxtMessage.ReadOnly = true;
            this.rtxtMessage.Size = new System.Drawing.Size(392, 264);
            this.rtxtMessage.TabIndex = 0;
            this.rtxtMessage.Text = "";
            // 
            // label1
            // 
            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label1.Location = new System.Drawing.Point(16, 16);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(376, 48);
            this.label1.TabIndex = 1;
            this.label1.Text = "An unexpected error has occurred. This may be caused by a bug or an error in the " +
                "system configuration.";
            // 
            // btnDetails
            // 
            this.btnDetails.Location = new System.Drawing.Point(344, 88);
            this.btnDetails.Name = "btnDetails";
            this.btnDetails.Size = new System.Drawing.Size(56, 23);
            this.btnDetails.TabIndex = 4;
            this.btnDetails.Text = "details...";
            this.btnDetails.Click += new System.EventHandler(this.btnDetails_Click);
            // 
            // hyperlink
            // 
            this.hyperlink.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.hyperlink.Location = new System.Drawing.Point(238, 64);
            this.hyperlink.Name = "hyperlink";
            this.hyperlink.Size = new System.Drawing.Size(32, 16);
            this.hyperlink.TabIndex = 5;
            this.hyperlink.TabStop = true;
            this.hyperlink.Text = "here";
            this.hyperlink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.hyperlink_LinkClicked);
            // 
            // label2
            // 
            this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label2.Location = new System.Drawing.Point(16, 64);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(376, 37);
            this.label2.TabIndex = 6;
            this.label2.Text = "Please send the screen shot located            and details of the error to suppor" +
                "t.";
            // 
            // browser
            // 
            this.browser.Location = new System.Drawing.Point(8, 128);
            this.browser.MinimumSize = new System.Drawing.Size(20, 20);
            this.browser.Name = "browser";
            this.browser.Size = new System.Drawing.Size(392, 262);
            this.browser.TabIndex = 7;
            this.browser.Visible = false;
            // 
            // SoapErrorDisplay
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.ClientSize = new System.Drawing.Size(410, 123);
            this.Controls.Add(this.browser);
            this.Controls.Add(this.btnDetails);
            this.Controls.Add(this.hyperlink);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.rtxtMessage);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.Name = "SoapErrorDisplay";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Error";
            this.ResumeLayout(false);

		}
		#endregion

        //private void btnOK_Click(object sender, System.EventArgs e)
        //{
        //    Close();
        //}

		private int destHeight = 144;

		private void btnDetails_Click(object sender, System.EventArgs e)
		{
			destHeight = destHeight==432 ? 144 : 432;
			btnDetails.Text = btnDetails.Text=="details..."? "hide" : "details...";
			Thread summary = new Thread(new ThreadStart(ShowDetails));
			summary.Start();
		}

		private void ShowDetails()
		{
			while (Math.Abs(this.Height - destHeight)> 1)
			{
				this.SetHeight(Height - ((Height - destHeight) / 2));	
				Thread.Sleep(40);
			}
			this.SetHeight(destHeight);
		}

        private void SetHeight(int newHeight)
        {
            // InvokeRequired required compares the thread ID of the
            // calling thread to the thread ID of the creating thread.
            // If these threads are different, it returns true.
            if (this.InvokeRequired)
            {
                SetHeightCallback d = new SetHeightCallback(SetHeight);
                this.Invoke(d, new object[] { newHeight });
            }
            else
            {
                this.Height = newHeight;
            }
        }

		private void hyperlink_LinkClicked(object sender, System.Windows.Forms.LinkLabelLinkClickedEventArgs e)
		{
			try
			{
				RunIE();
			}
			catch(Exception ex)
			{
				/* nothing we can do, we're already in the exception handler */
				MessageBox.Show(ex.Message);
			}
		}

		public void RunIE()
		{
			object o = null;
			SHDocVw.InternetExplorer m_IExplorer = null;
			IWebBrowserApp m_WebBrowser = null;

			try
			{
				m_IExplorer = new SHDocVw.InternetExplorer();
			}
			catch(Exception e)
			{
				MessageBox.Show(e.Message);
			}

			try
			{	
				m_WebBrowser = (IWebBrowserApp) m_IExplorer;
				m_WebBrowser.Visible = true;
				
				m_WebBrowser.Navigate(screenShotPath, ref o, ref o, ref o, ref o);
			}
			catch(Exception sE)
			{
				MessageBox.Show(sE.Message);
			}
		}
	}
}
