













//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Cosacs Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using Blue.Transactions;

namespace Blue.Cosacs.Customer
{
    	public partial class DataForReindexSolr : Blue.Transactions.Command<Context>
	{
	    public DataForReindexSolr() : base("Customer.DataForReindexSolr")
	    {
	                base.AddInParameter("@CustomerId", DbType.AnsiString );
	                base.AddInParameter("@MaxId", DbType.Int32 );
	            }
	
	        public string CustomerId
	    {
	        get { return (string)base[0]; }
	        set { base[0] = value; }
	    }
	        public int? MaxId
	    {
	        get { return (int?)base[1]; }
	        set { base[1] = value; }
	    }
	    }
	
	partial class DataForReindexSolr
	{
	    public new void Fill(DataSet ds)
	    {
	        base.Fill(ds);
	    }
	
	        public void Fill(DataSet ds,  string _CustomerId, int? _MaxId)
	    {
	        this.CustomerId = _CustomerId;
this.MaxId = _MaxId;

	        Fill(ds);
	        
	    }
	    }
	

        public partial class ContextBase : DbContextBase
        {
			protected ContextBase(string connectionString = "Default") : base(connectionString) 
			{
				Database.SetInitializer<Context>(null);
			}
		 
            
            
            protected override void OnModelCreating(DbModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);
                
                        modelBuilder.Entity< CustomerSearchView >().ToTable("CustomerSearchView", "Customer");
                        
            }
        }

            partial class ContextBase
    {
        public virtual DbSet<CustomerSearchView> CustomerSearchView { get; set; }
    }
    
        [Serializable]
	[DataContract]
    public partial class CustomerSearchView
    {
                [DataMember] public long? ID { get; set; }
                [DataMember] public string CustomerId { get; set; }
                [DataMember] public string Title { get; set; }
                [DataMember] public string FirstName { get; set; }
                [DataMember] public string LastName { get; set; }
                [DataMember] public int? Alias { get; set; }
                [DataMember] public int? DOB { get; set; }
                [DataMember] public string HomePhoneNumber { get; set; }
                [DataMember] public string MobileNumber { get; set; }
                [DataMember] public string Email { get; set; }
                [DataMember] public string HomeAddressLine1 { get; set; }
                [DataMember] public string HomeAddressLine2 { get; set; }
                [DataMember] public string City { get; set; }
                [DataMember] public string PostCode { get; set; }
                [DataMember] public bool IsSalesCustomer { get; set; }
                [DataMember] public int HasRCreditSource { get; set; }
                [DataMember] public int? RCreditSourceDate { get; set; }
                [DataMember] public int HasOCreditSource { get; set; }
                [DataMember] public int? OCreditSourceDate { get; set; }
                [DataMember] public int HasCashSource { get; set; }
                [DataMember] public int? CashSourceDate { get; set; }
                [DataMember] public int HasStoreCardSource { get; set; }
                [DataMember] public int? StoreCardSourceDate { get; set; }
                [DataMember] public bool? HasWarrantySource { get; set; }
                [DataMember] public DateTime? WarrantySourceDate { get; set; }
                [DataMember] public bool? HasInstallationSource { get; set; }
                [DataMember] public DateTime? InstallationSourceDate { get; set; }
                [DataMember] public int? AvailableSpend { get; set; }
                [DataMember] public int? CustomerBranchNo { get; set; }
                [DataMember] public int? CustomerBranchName { get; set; }
                [DataMember] public int? SalesPersonId { get; set; }
                [DataMember] public int? SalesPerson { get; set; }
                [DataMember] public int? DateLastBought { get; set; }
                [DataMember] public string CustomerSource { get; set; }
            }

        public partial class Settings : Blue.Config.SettingsBase
    {
        public Settings() : base(Blue.Cosacs.Customer.Module.Instance) {}

        public static StructureMap.Configuration.DSL.IRegistry Register<T>(StructureMap.Configuration.DSL.IRegistry registry, T singletonObject)
            where T : Blue.Config.ISettings

        {
            registry.For<Blue.Config.ISettings>().Add(singletonObject).Named(@"Blue.Cosacs.Customer");
            registry.For<T>().Singleton().Use(singletonObject);
            return registry;
        }

        public override Blue.Config.SettingMetadata[] Metadata()
        {
            return metadata;
        }

        #region Setting Metadata
        private static readonly Blue.Config.SettingMetadata[] metadata = new Blue.Config.SettingMetadata[] 
        {
                        new Blue.Config.SettingMetadata.@int {
                Id = @"CustomerSearchAvailableStart",
                Name = @"Minimun value for available spend on customer search for creating ranges.",
                Description = @"This will be the minimun to create the lower range of available spend",
                Category = @"Customers",
                Default = @"0",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@int,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"CustomerSearchAvailableGroupSize",
                Name = @"Size of each available spend group on customers search",
                Description = @"This value will afect the size of each group that will be created. For example setting the parameter to 100, each group will contain values from 100 to 199",
                Category = @"Customers",
                Default = @"100",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@int,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                    };
        #endregion

        #region Setting Enums
                #endregion

        #region Setting Properties
                public int CustomerSearchAvailableStart 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Int("CustomerSearchAvailableStart"); }
        }
                public int CustomerSearchAvailableGroupSize 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Int("CustomerSearchAvailableGroupSize"); }
        }
                #endregion
    }
    
    

        public class Module : Blue.Config.ModuleBase
    {
        private Module() {}

        public static readonly Module Instance = new Module
        {
            Label = @"Customer",
            Namespace = @"Blue.Cosacs.Customer",
            Schema = @"Customer",
        };
    }
    }
