

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Cosacs Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using Blue.Transactions;
using System.Data.SqlClient;
using System.Threading.Tasks;
using Microsoft.SqlServer.Server;

namespace Blue.Cosacs.Merchandising
{
    public partial class CintOrderStatsTVP
    {
        public string PrimaryReference { get; set; }
        public string Sku { get; set; }
        public string ReferenceType { get; set; }
        public string SecondaryReference { get; set; }
        public string ParentSku { get; set; }
        public string StockLocation { get; set; }
        public int? OrderId { get; set; }
    }
    public partial class CintOrderTVP
    {
        public int? RunNo { get; set; }
        public string Type { get; set; }
        public string PrimaryReference { get; set; }
        public string SaleType { get; set; }
        public string SaleLocation { get; set; }
        public string Sku { get; set; }
        public int? ProductId { get; set; }
        public string StockLocation { get; set; }
        public string ParentSku { get; set; }
        public int? ParentId { get; set; }
        public DateTime? TransactionDate { get; set; }
        public int? Quantity { get; set; }
        public decimal? Price { get; set; }
        public decimal? Tax { get; set; }
        public string SecondaryReference { get; set; }
        public string ReferenceType { get; set; }
        public decimal? Discount { get; set; }
        public decimal? CashPrice { get; set; }
        public int? PromotionId { get; set; }
        public decimal? CostPrice { get; set; }
        public int? TempId { get; set; }
    }
    public partial class UpdateCintOrderStatsTVP
    {
        public string PrimaryReference { get; set; }
        public string Sku { get; set; }
        public string ParentSku { get; set; }
        public string StockLocation { get; set; }
        public int? QtyOrderedInc { get; set; }
        public int? QtyDeliveredInc { get; set; }
        public int? QtyReturnedInc { get; set; }
        public int? QtyRepossessedInc { get; set; }
        public int? QtyOrdered { get; set; }
        public string SecondaryReference { get; set; }
        public string ReferenceType { get; set; }
    }
    public partial class UpdateProductStockLevelTVP
    {
        public int? LocationId { get; set; }
        public int? ProductId { get; set; }
        public int? StockOnHand { get; set; }
        public int? StockOnOrder { get; set; }
        public int? StockAvailable { get; set; }
    }

    public partial class RecreateDataForGoodsReceiptResumeInput
    {
        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            return parameters.ToArray();
        }
    }

    public partial class ContextBase : DbContextBase
    {
        public int RecreateDataForGoodsReceiptResume(RecreateDataForGoodsReceiptResumeInput input)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.RecreateDataForGoodsReceiptResume", input.GetParams());
        }

        public int RecreateDataForGoodsReceiptResume(params object[] p)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.RecreateDataForGoodsReceiptResume", p);
        }
    }

    public partial class BulkProductSaveInput
    {
        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            return parameters.ToArray();
        }
    }

    public partial class ContextBase : DbContextBase
    {
        public int BulkProductSave(BulkProductSaveInput input)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.BulkProductSave", input.GetParams());
        }

        public int BulkProductSave(params object[] p)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.BulkProductSave", p);
        }
    }

    public partial class BulkHierarchySaveInput
    {
        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            return parameters.ToArray();
        }
    }

    public partial class ContextBase : DbContextBase
    {
        public int BulkHierarchySave(BulkHierarchySaveInput input)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.BulkHierarchySave", input.GetParams());
        }

        public int BulkHierarchySave(params object[] p)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.BulkHierarchySave", p);
        }
    }

    public partial class BulkProductIncoSaveInput
    {
        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            return parameters.ToArray();
        }
    }

    public partial class ContextBase : DbContextBase
    {
        public int BulkProductIncoSave(BulkProductIncoSaveInput input)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.BulkProductIncoSave", input.GetParams());
        }

        public int BulkProductIncoSave(params object[] p)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.BulkProductIncoSave", p);
        }
    }

    public partial class TruncateProductStagingInput
    {
        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            return parameters.ToArray();
        }
    }

    public partial class ContextBase : DbContextBase
    {
        public int TruncateProductStaging(TruncateProductStagingInput input)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.TruncateProductStaging", input.GetParams());
        }

        public int TruncateProductStaging(params object[] p)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.TruncateProductStaging", p);
        }
    }

    public partial class AutoExpirePurchaseOrdersInput
    {
        public DateTime? ExpireDate { get; set; }
        public int? DaysTillCancel { get; set; }

        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            parameters.Add(new SqlParameter { ParameterName = "ExpireDate", Value = ExpireDate, Direction = ParameterDirection.Input });
            parameters.Add(new SqlParameter { ParameterName = "DaysTillCancel", Value = DaysTillCancel, Direction = ParameterDirection.Input });
            return parameters.ToArray();
        }
    }

    /// <summary>
    /// This method is  transactional beware!
    /// </summary>
    public partial class ContextBase : DbContextBase
    {
        public Task<List<AutoExpirePurchaseOrdersOutput>> AutoExpirePurchaseOrders(AutoExpirePurchaseOrdersInput input)
        {
            return this.Database.SqlQuery<AutoExpirePurchaseOrdersOutput>("Merchandising.AutoExpirePurchaseOrders @ExpireDate , @DaysTillCancel", input.GetParams()).ToListAsync();
        }

        public Task<List<AutoExpirePurchaseOrdersOutput>> AutoExpirePurchaseOrders(params object[] p)
        {
            return this.Database.SqlQuery<AutoExpirePurchaseOrdersOutput>("Merchandising.AutoExpirePurchaseOrders", p).ToListAsync();
        }
    }


    public partial class AutoCancelPurchaseOrdersInput
    {
        public DateTime? CancelDate { get; set; }
        public int? DaysTillCancel { get; set; }
        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            parameters.Add(new SqlParameter { ParameterName = "CancelDate", Value = CancelDate, Direction = ParameterDirection.Input });
            parameters.Add(new SqlParameter { ParameterName = "DaysTillCancel", Value = DaysTillCancel, Direction = ParameterDirection.Input });
            return parameters.ToArray();
        }
    }

    /// <summary>
    /// This method is  transactional beware!
    /// </summary>
    public partial class ContextBase : DbContextBase
    {
        public Task<List<AutoCancelPurchaseOrdersOutput>> AutoCancelPurchaseOrders(AutoCancelPurchaseOrdersInput input)
        {
            return this.Database.SqlQuery<AutoCancelPurchaseOrdersOutput>("Merchandising.AutoCancelPurchaseOrders @CancelDate, @DaysTillCancel", input.GetParams()).ToListAsync();
        }

        public Task<List<AutoCancelPurchaseOrdersOutput>> AutoCancelPurchaseOrders(params object[] p)
        {
            return this.Database.SqlQuery<AutoCancelPurchaseOrdersOutput>("Merchandising.AutoCancelPurchaseOrders", p).ToListAsync();
        }
    }


    public partial class CintOrderSaveInput
    {
        public IEnumerable<CintOrderTVP> cintOrder { get; set; }

        private DataTable cintOrderToDataTable()
        {
            var dataTable = new DataTable();
            dataTable.Columns.Add("RunNo", typeof(int));

            dataTable.Columns.Add("Type", typeof(string));

            dataTable.Columns.Add("PrimaryReference", typeof(string));

            dataTable.Columns.Add("SaleType", typeof(string));

            dataTable.Columns.Add("SaleLocation", typeof(string));

            dataTable.Columns.Add("Sku", typeof(string));

            dataTable.Columns.Add("ProductId", typeof(int));

            dataTable.Columns.Add("StockLocation", typeof(string));

            dataTable.Columns.Add("ParentSku", typeof(string));

            dataTable.Columns.Add("ParentId", typeof(int));

            dataTable.Columns.Add("TransactionDate", typeof(DateTime));

            dataTable.Columns.Add("Quantity", typeof(int));

            dataTable.Columns.Add("Price", typeof(decimal));

            dataTable.Columns.Add("Tax", typeof(decimal));

            dataTable.Columns.Add("SecondaryReference", typeof(string));

            dataTable.Columns.Add("ReferenceType", typeof(string));

            dataTable.Columns.Add("Discount", typeof(decimal));

            dataTable.Columns.Add("CashPrice", typeof(decimal));

            dataTable.Columns.Add("PromotionId", typeof(int));

            dataTable.Columns.Add("CostPrice", typeof(decimal));

            dataTable.Columns.Add("TempId", typeof(int));
            if (cintOrder == null)
            {
                return dataTable;
            }
            foreach (var item in cintOrder)
            {
                dataTable.Rows.Add(item.RunNo
                            , item.Type
                            , item.PrimaryReference
                            , item.SaleType
                            , item.SaleLocation
                            , item.Sku
                            , item.ProductId
                            , item.StockLocation
                            , item.ParentSku
                            , item.ParentId
                            , item.TransactionDate
                            , item.Quantity
                            , item.Price
                            , item.Tax
                            , item.SecondaryReference
                            , item.ReferenceType
                            , item.Discount
                            , item.CashPrice
                            , item.PromotionId
                            , item.CostPrice
                            , item.TempId
                                                );
            }
            return dataTable;
        }

        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            var tvp0 = new SqlParameter { ParameterName = "cintOrder", Value = cintOrderToDataTable(), Direction = ParameterDirection.Input }; // DataTable, IEnumerable<SqlDataRecord>, or DbDataReader only.
            tvp0.SqlDbType = SqlDbType.Structured;
            tvp0.TypeName = "Merchandising.CintOrderTVP";
            parameters.Add(tvp0);
            return parameters.ToArray();
        }
    }

    /// <summary>
    /// This method is  transactional beware!
    /// </summary>
    public partial class ContextBase : DbContextBase
    {
        public Task<List<CintOrderSaveOutput>> CintOrderSave(CintOrderSaveInput input)
        {
            return this.Database.SqlQuery<CintOrderSaveOutput>("Merchandising.CintOrderSave @cintOrder", input.GetParams()).ToListAsync();
        }

        public Task<List<CintOrderSaveOutput>> CintOrderSave(params object[] p)
        {
            return this.Database.SqlQuery<CintOrderSaveOutput>("Merchandising.CintOrderSave", p).ToListAsync();
        }

        public Task<List<StockMovementReportResult>> GetStockMovementForNegativeStockReport(DateTime endDate, DataTable dtProductIds, DataTable dtProductLocationIds)
        {
            var pEndDate = new SqlParameter("EndDate", SqlDbType.Date);
            pEndDate.Value = endDate;

            var pProdIds = new SqlParameter("ProductIds", SqlDbType.Structured);
            pProdIds.Value = dtProductIds;
            pProdIds.TypeName = "dbo.IntTVP";

            var pProdLocIds = new SqlParameter("ProductLocationIds", SqlDbType.Structured);
            pProdLocIds.Value = dtProductLocationIds;
            pProdLocIds.TypeName = "dbo.IntTVP";

            return this.Database.SqlQuery<StockMovementReportResult>("EXEC Merchandising.GetStockMovementForNegativeStockReport @endDate, @ProductIds, @ProductLocationIds", pEndDate, pProdIds, pProdLocIds).ToListAsync();
        }
        //CR - Product warranty association need to populate based on warrantable status of product.
        public Task<bool> ValidateWarrantableProduct(string SKU)
        {
            var param1 = new SqlParameter("SKU", SqlDbType.VarChar);
            param1.Value = SKU;
            return this.Database.SqlQuery<bool>("EXEC Merchandising.ValidateWarrantableProduct @SKU", param1).FirstOrDefaultAsync();
        }
    }
    public partial class StockMovementReportResult
    {
        public StockMovementReportResult()
        {
            Tags = new List<string>();
        }
        public string Division { get; set; }
        public string Department { get; set; }
        public string Class { get; set; }
        public string TransactionId { get; set; }
        public int ProductId { get; set; }
        public string LongDescription { get; set; }
        public string BrandName { get; set; }
        public string ProductTags { get; set; }
        public List<string> Tags { get; set; }
        public string SKU { get; set; }
        public int LocationId { get; set; }
        public string Location { get; set; }
        public string Type { get; set; }
        public string Narration { get; set; }
        public int Quantity { get; set; }
        public DateTime? Date { get; set; }
        public DateTime? DateUTC { get; set; }
        public DateTime? DateProcessed { get; set; }
        public DateTime? DateProcessedUTC { get; set; }
        public int? UserId { get; set; }
        public string User { get; set; }
        public int StockLevel { get; set; }
        public bool? IsDirect { get; set; }
        public bool IsHeader { get; set; }
    }

    public partial class ProductStockLevelsUpdateOnOrderInput
    {
        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            return parameters.ToArray();
        }
    }

    public partial class ContextBase : DbContextBase
    {
        public int ProductStockLevelsUpdateOnOrder(ProductStockLevelsUpdateOnOrderInput input)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.ProductStockLevelsUpdateOnOrder", input.GetParams());
        }

        public int ProductStockLevelsUpdateOnOrder(params object[] p)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.ProductStockLevelsUpdateOnOrder", p);
        }

        // This procedure is used to update stock on order for PO's.
        public int ProductStockLevelsUpdateOnOrder(DataTable dtPOIds)
        {
            var POIds = new SqlParameter("POIds", SqlDbType.Structured);
            POIds.Value = dtPOIds;
            POIds.TypeName = "dbo.IntTVP";
            return this.Database.ExecuteSqlCommand("Merchandising.ProductStockLevelsUpdateOnOrder @POIds", POIds);
        }

    }

    public partial class CreateNewProductStockLevelsInput
    {
        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            return parameters.ToArray();
        }
    }




    public partial class ContextBase : DbContextBase
    {
        public int CreateNewProductStockLevels(CreateNewProductStockLevelsInput input)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.CreateNewProductStockLevels", input.GetParams());
        }

        public int CreateNewProductStockLevels(params object[] p)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.CreateNewProductStockLevels", p);
        }
        public int CreateHistoryForGRNandPO(Product ProductId)
        {
            //return this.Database.SqlQuery<AutoCancelPurchaseOrdersOutput>("Merchandising.AutoCancelPurchaseOrders @CancelDate, @DaysTillCancel", input.GetParams()).ToListAsync();

            return this.Database.ExecuteSqlCommand("Merchandising.CreateHistoryForGRNandPO @ProductId", ProductId.GetParams());
        }
    }

    public partial class UpdateCintOrderStatsInput
    {
        public IEnumerable<UpdateCintOrderStatsTVP> stats { get; set; }

        private DataTable statsToDataTable()
        {
            var dataTable = new DataTable();
            dataTable.Columns.Add("PrimaryReference", typeof(string));

            dataTable.Columns.Add("Sku", typeof(string));

            dataTable.Columns.Add("ParentSku", typeof(string));

            dataTable.Columns.Add("StockLocation", typeof(string));

            dataTable.Columns.Add("QtyOrderedInc", typeof(int));

            dataTable.Columns.Add("QtyDeliveredInc", typeof(int));

            dataTable.Columns.Add("QtyReturnedInc", typeof(int));

            dataTable.Columns.Add("QtyRepossessedInc", typeof(int));

            dataTable.Columns.Add("QtyOrdered", typeof(int));

            dataTable.Columns.Add("SecondaryReference", typeof(string));

            dataTable.Columns.Add("ReferenceType", typeof(string));
            if (stats == null)
            {
                return dataTable;
            }
            foreach (var item in stats)
            {
                dataTable.Rows.Add(item.PrimaryReference
                            , item.Sku
                            , item.ParentSku
                            , item.StockLocation
                            , item.QtyOrderedInc
                            , item.QtyDeliveredInc
                            , item.QtyReturnedInc
                            , item.QtyRepossessedInc
                            , item.QtyOrdered
                            , item.SecondaryReference
                            , item.ReferenceType
                                                );
            }
            return dataTable;
        }

        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            var tvp0 = new SqlParameter { ParameterName = "stats", Value = statsToDataTable(), Direction = ParameterDirection.Input }; // DataTable, IEnumerable<SqlDataRecord>, or DbDataReader only.
            tvp0.SqlDbType = SqlDbType.Structured;
            tvp0.TypeName = "Merchandising.UpdateCintOrderStatsTVP";
            parameters.Add(tvp0);
            return parameters.ToArray();
        }
    }

    public partial class ContextBase : DbContextBase
    {
        public int UpdateCintOrderStats(UpdateCintOrderStatsInput input)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.UpdateCintOrderStats @stats", input.GetParams());
        }

        public int UpdateCintOrderStats(params object[] p)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.UpdateCintOrderStats", p);
        }
    }

    public partial class UpdateProductStockLevelInput
    {
        public IEnumerable<UpdateProductStockLevelTVP> productStock { get; set; }

        private DataTable productStockToDataTable()
        {
            var dataTable = new DataTable();
            dataTable.Columns.Add("LocationId", typeof(int));

            dataTable.Columns.Add("ProductId", typeof(int));

            dataTable.Columns.Add("StockOnHand", typeof(int));

            dataTable.Columns.Add("StockOnOrder", typeof(int));

            dataTable.Columns.Add("StockAvailable", typeof(int));
            if (productStock == null)
            {
                return dataTable;
            }
            foreach (var item in productStock)
            {
                dataTable.Rows.Add(item.LocationId
                            , item.ProductId
                            , item.StockOnHand
                            , item.StockOnOrder
                            , item.StockAvailable
                                                );
            }
            return dataTable;
        }

        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            var tvp0 = new SqlParameter { ParameterName = "productStock", Value = productStockToDataTable(), Direction = ParameterDirection.Input }; // DataTable, IEnumerable<SqlDataRecord>, or DbDataReader only.
            tvp0.SqlDbType = SqlDbType.Structured;
            tvp0.TypeName = "Merchandising.UpdateProductStockLevelTVP";
            parameters.Add(tvp0);
            return parameters.ToArray();
        }
    }

    public partial class ContextBase : DbContextBase
    {
        public int UpdateProductStockLevel(UpdateProductStockLevelInput input)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.UpdateProductStockLevel @productStock", input.GetParams());
        }

        public int UpdateProductStockLevel(params object[] p)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.UpdateProductStockLevel", p);
        }
    }

    public partial class CintOrderStatsGetQuantityInput
    {
        public IEnumerable<CintOrderStatsTVP> stats { get; set; }

        private DataTable statsToDataTable()
        {
            var dataTable = new DataTable();
            dataTable.Columns.Add("PrimaryReference", typeof(string));

            dataTable.Columns.Add("Sku", typeof(string));

            dataTable.Columns.Add("ReferenceType", typeof(string));

            dataTable.Columns.Add("SecondaryReference", typeof(string));

            dataTable.Columns.Add("ParentSku", typeof(string));

            dataTable.Columns.Add("StockLocation", typeof(string));

            dataTable.Columns.Add("OrderId", typeof(int));
            if (stats == null)
            {
                return dataTable;
            }
            foreach (var item in stats)
            {
                dataTable.Rows.Add(item.PrimaryReference
                            , item.Sku
                            , item.ReferenceType
                            , item.SecondaryReference
                            , item.ParentSku
                            , item.StockLocation
                            , item.OrderId
                                                );
            }
            return dataTable;
        }

        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            var tvp0 = new SqlParameter { ParameterName = "stats", Value = statsToDataTable(), Direction = ParameterDirection.Input }; // DataTable, IEnumerable<SqlDataRecord>, or DbDataReader only.
            tvp0.SqlDbType = SqlDbType.Structured;
            tvp0.TypeName = "Merchandising.CintOrderStatsTVP";
            parameters.Add(tvp0);
            return parameters.ToArray();
        }
    }

    /// <summary>
    /// This method is  transactional beware!
    /// </summary>
    public partial class ContextBase : DbContextBase
    {
        public Task<List<CintOrderStatsGetQuantityOutput>> CintOrderStatsGetQuantity(CintOrderStatsGetQuantityInput input)
        {
            return this.Database.SqlQuery<CintOrderStatsGetQuantityOutput>("Merchandising.CintOrderStatsGetQuantity @stats", input.GetParams()).ToListAsync();
        }

        public Task<List<CintOrderStatsGetQuantityOutput>> CintOrderStatsGetQuantity(params object[] p)
        {
            return this.Database.SqlQuery<CintOrderStatsGetQuantityOutput>("Merchandising.CintOrderStatsGetQuantity", p).ToListAsync();
        }
    }


    public partial class StockEvaluationSnapshotRefreshInput
    {
        public int? date { get; set; }
        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            parameters.Add(new SqlParameter { ParameterName = "date", Value = date, Direction = ParameterDirection.Input });
            return parameters.ToArray();
        }
    }

    public partial class ContextBase : DbContextBase
    {
        public int StockEvaluationSnapshotRefresh(StockEvaluationSnapshotRefreshInput input)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.StockEvaluationSnapshotRefresh @date", input.GetParams());
        }

        public int StockEvaluationSnapshotRefresh(params object[] p)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.StockEvaluationSnapshotRefresh", p);
        }
    }

    public partial class UpdateLocationBranchInput
    {
        public int? LocationId { get; set; }
        public string WorkPhone { get; set; }
        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            parameters.Add(new SqlParameter { ParameterName = "LocationId", Value = LocationId, Direction = ParameterDirection.Input });
            parameters.Add(new SqlParameter { ParameterName = "WorkPhone", Value = WorkPhone, Direction = ParameterDirection.Input });
            return parameters.ToArray();
        }
    }

    public partial class ContextBase : DbContextBase
    {
        public int UpdateLocationBranch(UpdateLocationBranchInput input)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.UpdateLocationBranch @LocationId, @WorkPhone", input.GetParams());
        }

        public int UpdateLocationBranch(params object[] p)
        {
            return this.Database.ExecuteSqlCommand("Merchandising.UpdateLocationBranch", p);
        }
    }

    public partial class ContextBase : DbContextBase
    {
        protected ContextBase(string connectionString = "Default") : base(connectionString)
        {
            Database.SetInitializer<Context>(null);
        }


        public virtual DbSet<AssociatedProduct> AssociatedProduct { get; set; }

        public virtual DbSet<Brand> Brand { get; set; }

        public virtual DbSet<CintOrder> CintOrder { get; set; }

        public virtual DbSet<CintOrderStats> CintOrderStats { get; set; }

        public virtual DbSet<CintError> CintError { get; set; }

        public virtual DbSet<CintsError> CintsError { get; set; }

        public virtual DbSet<CintRun> CintRun { get; set; }

        public virtual DbSet<Combo> Combo { get; set; }

        public virtual DbSet<ComboProduct> ComboProduct { get; set; }

        public virtual DbSet<ComboProductPrice> ComboProductPrice { get; set; }

        public virtual DbSet<CostPrice> CostPrice { get; set; }

        public virtual DbSet<ClassMapping> ClassMapping { get; set; }

        public virtual DbSet<GoodsOnLoan> GoodsOnLoan { get; set; }

        public virtual DbSet<GoodsOnLoanProduct> GoodsOnLoanProduct { get; set; }

        public virtual DbSet<GoodsReceipt> GoodsReceipt { get; set; }

        public virtual DbSet<GoodsReceiptDirect> GoodsReceiptDirect { get; set; }

        public virtual DbSet<GoodsReceiptProduct> GoodsReceiptProduct { get; set; }

        public virtual DbSet<GoodsReceiptDirectProduct> GoodsReceiptDirectProduct { get; set; }

        public virtual DbSet<HierarchyLevel> HierarchyLevel { get; set; }

        public virtual DbSet<HierarchyTag> HierarchyTag { get; set; }

        public virtual DbSet<HierarchyTagCondition> HierarchyTagCondition { get; set; }

        public virtual DbSet<Incoterm> Incoterm { get; set; }

        public virtual DbSet<IncotermStaging> IncotermStaging { get; set; }

        public virtual DbSet<Location> Location { get; set; }

        public virtual DbSet<NegativeStockSnapshot> NegativeStockSnapshot { get; set; }

        public virtual DbSet<PeriodData> PeriodData { get; set; }

        public virtual DbSet<Product> Product { get; set; }

        public virtual DbSet<ProductStatus> ProductStatus { get; set; }

        public virtual DbSet<ProductStockLevel> ProductStockLevel { get; set; }

        public virtual DbSet<ProductHierarchy> ProductHierarchy { get; set; }

        public virtual DbSet<ProductSupplier> ProductSupplier { get; set; }

        public virtual DbSet<Promotion> Promotion { get; set; }

        public virtual DbSet<PromotionDetail> PromotionDetail { get; set; }

        public virtual DbSet<PromotionHierarchy> PromotionHierarchy { get; set; }

        public virtual DbSet<PurchaseOrder> PurchaseOrder { get; set; }

        public virtual DbSet<PurchaseOrderProduct> PurchaseOrderProduct { get; set; }

        public virtual DbSet<RepossessedCondition> RepossessedCondition { get; set; }

        public virtual DbSet<RepossessedProduct> RepossessedProduct { get; set; }

        public virtual DbSet<RetailPrice> RetailPrice { get; set; }

        public virtual DbSet<SetProduct> SetProduct { get; set; }

        public virtual DbSet<SetLocation> SetLocation { get; set; }

        public virtual DbSet<StockAdjustment> StockAdjustment { get; set; }

        public virtual DbSet<StockAdjustmentPrimaryReason> StockAdjustmentPrimaryReason { get; set; }

        public virtual DbSet<StockAdjustmentProduct> StockAdjustmentProduct { get; set; }

        public virtual DbSet<StockAdjustmentSecondaryReason> StockAdjustmentSecondaryReason { get; set; }

        public virtual DbSet<StockAllocationProduct> StockAllocationProduct { get; set; }

        public virtual DbSet<StockCount> StockCount { get; set; }

        public virtual DbSet<StockCountHierarchy> StockCountHierarchy { get; set; }

        public virtual DbSet<StockCountProduct> StockCountProduct { get; set; }

        public virtual DbSet<StockRequisitionProduct> StockRequisitionProduct { get; set; }

        public virtual DbSet<StockTransfer> StockTransfer { get; set; }

        public virtual DbSet<StockTransferMovement> StockTransferMovement { get; set; }

        public virtual DbSet<StockTransferProduct> StockTransferProduct { get; set; }

        public virtual DbSet<StockValuationSnapshot> StockValuationSnapshot { get; set; }

        public virtual DbSet<Supplier> Supplier { get; set; }

        public virtual DbSet<SupplierStatus> SupplierStatus { get; set; }

        public virtual DbSet<TaxRate> TaxRate { get; set; }

        public virtual DbSet<TransactionType> TransactionType { get; set; }

        public virtual DbSet<VendorReturn> VendorReturn { get; set; }

        public virtual DbSet<VendorReturnProduct> VendorReturnProduct { get; set; }

        public virtual DbSet<GoodsReceiptResume> GoodsReceiptResume { get; set; }

        public virtual DbSet<ProductStaging> ProductStaging { get; set; }

        public virtual DbSet<ProductHierarchyStaging> ProductHierarchyStaging { get; set; }

        public virtual DbSet<SucrBase> SucrBase { get; set; }

        /// <summary>
        /// /Create Db sets for Ashley CR
        /// 
        /// 
        /// </summary>
        /// <param name="modelBuilder"></param>
        //public virtual DbSet<AshleySetUp> AshleySetups { get; set; }
        public virtual DbSet<ProductAttribute> ProductAttributes { get; set; }
        public virtual DbSet<ProductStockRange> ProductStockRanges { get; set; }
        public virtual DbSet<AdditionalCostPrice> AdditionalCostPrices { get; set; }
        public virtual DbSet<AdditionalCostPriceAudit> AdditionalCostPriceAudits { get; set; }
        public virtual DbSet<ForceIndexAutoPurchaseOrder> ForceIndexAutoPurchaseOrder { get; set; }
        public virtual DbSet<POCancelReasonList> POCancelReasonList { get; set; }
        public virtual DbSet<AshleyErrorLog> AshleyErrorLogs { get; set; }
        public virtual DbSet<RenissanceCustomers> RenissanceCustomers { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            var t0 = modelBuilder.Entity<AssociatedProduct>();
            t0.ToTable("AssociatedProduct", "Merchandising");

            t0.HasKey(t => t.Id);

            t0.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t0.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t0.Property(t => t.AssociatedHierarchy)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t1 = modelBuilder.Entity<Brand>();
            t1.ToTable("Brand", "Merchandising");

            t1.HasKey(t => t.Id);

            t1.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t1.Property(t => t.BrandCode)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(6)

            ;

            t1.Property(t => t.BrandName)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(25)

            ;

            var t2 = modelBuilder.Entity<CintOrder>();
            t2.ToTable("CintOrder", "Merchandising");

            t2.HasKey(t => t.Id);

            t2.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t2.Property(t => t.RunNo)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t2.Property(t => t.Type)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t2.Property(t => t.PrimaryReference)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t2.Property(t => t.SaleType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t2.Property(t => t.SaleLocation)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t2.Property(t => t.Sku)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(10)

            ;

            t2.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t2.Property(t => t.StockLocation)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t2.Property(t => t.ParentSku)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(10)

            ;

            t2.Property(t => t.ParentId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t2.Property(t => t.TransactionDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t2.Property(t => t.Quantity)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t2.Property(t => t.Price)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t2.Property(t => t.Tax)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t2.Property(t => t.SecondaryReference)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t2.Property(t => t.ReferenceType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t2.Property(t => t.Discount)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t2.Property(t => t.CashPrice)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t2.Property(t => t.PromotionId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t2.Property(t => t.CostPrice)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t2.Property(t => t.CintRegularOrderId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t3 = modelBuilder.Entity<CintOrderStats>();
            t3.ToTable("CintOrderStats", "Merchandising");

            t3.HasKey(t => t.Id);

            t3.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t3.Property(t => t.PrimaryReference)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t3.Property(t => t.Sku)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t3.Property(t => t.ParentSku)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t3.Property(t => t.StockLocation)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t3.Property(t => t.QtyOrdered)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t3.Property(t => t.QtyDelivered)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t3.Property(t => t.QtyReturned)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t3.Property(t => t.QtyRepossessed)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t3.Property(t => t.SecondaryReference)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t3.Property(t => t.ReferenceType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            var t4 = modelBuilder.Entity<CintError>();
            t4.ToTable("CintError", "Merchandising");

            t4.HasKey(t => t.MessageId);

            t4.Property(t => t.ProductCode)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t4.Property(t => t.PrimaryReference)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t4.Property(t => t.Type)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t4.Property(t => t.StockLocation)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(10)

            ;

            t4.Property(t => t.SaleLocation)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(10)

            ;

            t4.Property(t => t.ErrorMessage)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(2000)

            ;

            t4.Property(t => t.Date)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t4.Property(t => t.RunNo)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t4.Property(t => t.SecondaryReference)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t4.Property(t => t.ReferenceType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t4.Property(t => t.MessageId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t4.Property(t => t.Resolved)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t5 = modelBuilder.Entity<CintsError>();
            t5.ToTable("CintsError", "Merchandising");

            t5.HasKey(t => t.MessageId);

            t5.Property(t => t.MessageId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t5.Property(t => t.Exception)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t5.Property(t => t.CreatedOn)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t5.Property(t => t.Runno)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t5.Property(t => t.Resolved)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t6 = modelBuilder.Entity<CintRun>();
            t6.ToTable("CintRun", "Merchandising");

            t6.HasKey(t => t.Id);

            t6.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t6.Property(t => t.RunId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t7 = modelBuilder.Entity<Combo>();
            t7.ToTable("Combo", "Merchandising");

            t7.HasKey(t => t.Id);

            t7.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t7.Property(t => t.StartDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t7.Property(t => t.EndDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t8 = modelBuilder.Entity<ComboProduct>();
            t8.ToTable("ComboProduct", "Merchandising");

            t8.HasKey(t => t.Id);

            t8.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t8.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t8.Property(t => t.ComboId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t8.Property(t => t.Quantity)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t9 = modelBuilder.Entity<ComboProductPrice>();
            t9.ToTable("ComboProductPrice", "Merchandising");

            t9.HasKey(t => t.Id);

            t9.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t9.Property(t => t.ComboProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t9.Property(t => t.LocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t9.Property(t => t.RegularPrice)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t9.Property(t => t.CashPrice)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t9.Property(t => t.DutyFreePrice)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t9.Property(t => t.Fascia)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            var t10 = modelBuilder.Entity<CostPrice>();
            t10.ToTable("CostPrice", "Merchandising");

            t10.HasKey(t => t.Id);

            t10.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t10.Property(t => t.SupplierCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t10.Property(t => t.LastLandedCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t10.Property(t => t.AverageWeightedCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t10.Property(t => t.SupplierCurrency)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(10)

            ;

            t10.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t10.Property(t => t.LastLandedCostUpdated)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t10.Property(t => t.AverageWeightedCostUpdated)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t11 = modelBuilder.Entity<ClassMapping>();
            t11.ToTable("ClassMapping", "Merchandising");

            t11.HasKey(t => t.Id);

            t11.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t11.Property(t => t.ClassCode)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(10)

            ;

            t11.Property(t => t.LegacyCode)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(3)

            ;

            var t12 = modelBuilder.Entity<GoodsOnLoan>();
            t12.ToTable("GoodsOnLoan", "Merchandising");

            t12.HasKey(t => t.Id);

            t12.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t12.Property(t => t.ServiceRequestId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t12.Property(t => t.CustomerId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t12.Property(t => t.BusinessName)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t12.Property(t => t.Title)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t12.Property(t => t.FirstName)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t12.Property(t => t.LastName)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t12.Property(t => t.AddressLine2)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t12.Property(t => t.TownCity)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t12.Property(t => t.PostCode)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t12.Property(t => t.StockLocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t12.Property(t => t.ExpectedCollectionDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t12.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t12.Property(t => t.Contacts)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t12.Property(t => t.CreatedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t12.Property(t => t.CreatedOn)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t12.Property(t => t.CollectedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t12.Property(t => t.AddressLine1)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t12.Property(t => t.JobTitle)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t12.Property(t => t.DeliveryContactDetails)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t12.Property(t => t.AddressNotes)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t12.Property(t => t.PreferredDeliveryDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t12.Property(t => t.DeliveryPrintedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t12.Property(t => t.CollectionPrintedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t12.Property(t => t.StockTransferId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t12.Property(t => t.ReturnStockTransferId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t13 = modelBuilder.Entity<GoodsOnLoanProduct>();
            t13.ToTable("GoodsOnLoanProduct", "Merchandising");

            t13.HasKey(t => t.Id);

            t13.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t13.Property(t => t.GoodsOnLoanId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t13.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t13.Property(t => t.Quantity)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t13.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t13.Property(t => t.ReferenceNumber)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t13.Property(t => t.AverageWeightedCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            var t14 = modelBuilder.Entity<GoodsReceipt>();
            t14.ToTable("GoodsReceipt", "Merchandising");

            t14.HasKey(t => t.Id);

            t14.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t14.Property(t => t.LocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t14.Property(t => t.ReceivedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t14.Property(t => t.VendorDeliveryNumber)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t14.Property(t => t.VendorInvoiceNumber)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t14.Property(t => t.DateReceived)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t14.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t14.Property(t => t.ReceivedBy)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t14.Property(t => t.Location)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t14.Property(t => t.OriginalPrint)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t14.Property(t => t.DateApproved)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t14.Property(t => t.ApprovedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t14.Property(t => t.ApprovedBy)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t14.Property(t => t.CreatedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t14.Property(t => t.CreatedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t14.Property(t => t.CreatedBy)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t14.Property(t => t.CostConfirmed)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t14.Property(t => t.CostConfirmedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t14.Property(t => t.CostConfirmedBy)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            var t15 = modelBuilder.Entity<GoodsReceiptDirect>();
            t15.ToTable("GoodsReceiptDirect", "Merchandising");

            t15.HasKey(t => t.Id);

            t15.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t15.Property(t => t.LocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t15.Property(t => t.CreatedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t15.Property(t => t.ReceivedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t15.Property(t => t.ApprovedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t15.Property(t => t.VendorId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t15.Property(t => t.CreatedBy)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t15.Property(t => t.ReceivedBy)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t15.Property(t => t.ApprovedBy)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t15.Property(t => t.Vendor)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t15.Property(t => t.Currency)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t15.Property(t => t.CreatedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t15.Property(t => t.OriginalPrint)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t15.Property(t => t.DateReceived)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t15.Property(t => t.DateApproved)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t15.Property(t => t.ReferenceNumbers)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t15.Property(t => t.VendorDeliveryNumber)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t15.Property(t => t.VendorInvoiceNumber)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t15.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t15.Property(t => t.Location)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            var t16 = modelBuilder.Entity<GoodsReceiptProduct>();
            t16.ToTable("GoodsReceiptProduct", "Merchandising");

            t16.HasKey(t => t.Id);

            t16.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t16.Property(t => t.GoodsReceiptId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t16.Property(t => t.PurchaseOrderProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t16.Property(t => t.QuantityReceived)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t16.Property(t => t.QuantityBackOrdered)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t16.Property(t => t.ReasonForCancellation)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t16.Property(t => t.QuantityCancelled)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t16.Property(t => t.LastLandedCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t17 = modelBuilder.Entity<GoodsReceiptDirectProduct>();
            t17.ToTable("GoodsReceiptDirectProduct", "Merchandising");

            t17.HasKey(t => t.Id);

            t17.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t17.Property(t => t.GoodsReceiptDirectId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t17.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t17.Property(t => t.Sku)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t17.Property(t => t.Description)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(240)

            ;

            t17.Property(t => t.QuantityReceived)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t17.Property(t => t.UnitLandedCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t17.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            var t18 = modelBuilder.Entity<HierarchyLevel>();
            t18.ToTable("HierarchyLevel", "Merchandising");

            t18.HasKey(t => t.Id);

            t18.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t18.Property(t => t.Name)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            var t19 = modelBuilder.Entity<HierarchyTag>();
            t19.ToTable("HierarchyTag", "Merchandising");

            t19.HasKey(t => t.Id);

            t19.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t19.Property(t => t.LevelId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t19.Property(t => t.Name)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t19.Property(t => t.FirstYearWarrantyProvision)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t19.Property(t => t.Code)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(4)

            ;

            t19.Property(t => t.AgedAfter)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t20 = modelBuilder.Entity<HierarchyTagCondition>();
            t20.ToTable("HierarchyTagCondition", "Merchandising");

            t20.HasKey(t => t.Id);

            t20.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t20.Property(t => t.HierarchyTagId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t20.Property(t => t.Percentage)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t20.Property(t => t.RepossessedConditionId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t21 = modelBuilder.Entity<Incoterm>();
            t21.ToTable("Incoterm", "Merchandising");

            t21.HasKey(t => t.Id);

            t21.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t21.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t21.Property(t => t.Name)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(240)

            ;

            t21.Property(t => t.CurrencyType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(3)

            ;

            t21.Property(t => t.SupplierUnitCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t21.Property(t => t.CountryOfDispatch)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(2)

            ;

            t21.Property(t => t.LeadTime)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            var t22 = modelBuilder.Entity<IncotermStaging>();
            t22.ToTable("IncotermStaging", "Merchandising");

            t22.HasKey(t => t.Id);

            t22.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t22.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t22.Property(t => t.Name)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(240)

            ;

            t22.Property(t => t.CurrencyType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(3)

            ;

            t22.Property(t => t.SupplierUnitCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t22.Property(t => t.CountryOfDispatch)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(2)

            ;

            t22.Property(t => t.LeadTime)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            var t23 = modelBuilder.Entity<Location>();
            t23.ToTable("Location", "Merchandising");

            t23.HasKey(t => t.Id);

            t23.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t23.Property(t => t.LocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t23.Property(t => t.Name)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t23.Property(t => t.Fascia)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t23.Property(t => t.StoreType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t23.Property(t => t.Warehouse)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t23.Property(t => t.AddressLine1)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t23.Property(t => t.AddressLine2)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t23.Property(t => t.City)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t23.Property(t => t.PostCode)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t23.Property(t => t.Contacts)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t23.Property(t => t.SalesId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t23.Property(t => t.Active)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t23.Property(t => t.VirtualWarehouse)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t24 = modelBuilder.Entity<NegativeStockSnapshot>();
            t24.ToTable("NegativeStockSnapshot", "Merchandising");

            t24.HasKey(t => t.Id);

            t24.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t24.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t24.Property(t => t.LocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t24.Property(t => t.StockOnHandQuantity)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t24.Property(t => t.AverageWeightedCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t24.Property(t => t.StockOnHandValue)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t24.Property(t => t.StockOnHandSalesValue)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t24.Property(t => t.SnapshotDateId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t25 = modelBuilder.Entity<PeriodData>();
            t25.ToTable("PeriodData", "Merchandising");

            t25.HasKey(t => t.id);

            t25.Property(t => t.id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t25.Property(t => t.year)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t25.Property(t => t.period)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t25.Property(t => t.week)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t25.Property(t => t.startdate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t25.Property(t => t.enddate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t26 = modelBuilder.Entity<Product>();
            t26.ToTable("Product", "Merchandising");

            t26.HasKey(t => t.Id);

            t26.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t26.Property(t => t.SKU)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t26.Property(t => t.LongDescription)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(240)

            ;

            t26.Property(t => t.ProductType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t26.Property(t => t.Tags)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.StoreTypes)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.POSDescription)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(240)

            ;

            t26.Property(t => t.Attributes)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.CreatedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.LastUpdatedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.Status)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.PriceTicket)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.SKUStatus)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(1)
            .IsFixedLength()
            ;

            t26.Property(t => t.CorporateUPC)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t26.Property(t => t.VendorUPC)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(60)

            ;

            t26.Property(t => t.VendorStyleLong)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t26.Property(t => t.CountryOfOrigin)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(2)

            ;

            t26.Property(t => t.VendorWarranty)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.ReplacingTo)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t26.Property(t => t.Features)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.BrandId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.PrimaryVendorId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.LastStatusChangeDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.OnlineDateAdded)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.LabelRequired)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.BoxCount)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.ProductAction)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(1)
            .IsFixedLength()
            ;

            t26.Property(t => t.CreatedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.ExternalCreationDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t26.Property(t => t.MagentoExportType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t26.Property(t => t.Warrantable)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t27 = modelBuilder.Entity<ProductStatus>();
            t27.ToTable("ProductStatus", "Merchandising");

            t27.HasKey(t => t.Id);

            t27.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t27.Property(t => t.Name)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t27.Property(t => t.IsAutomatic)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t27.Property(t => t.IsSystem)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t28 = modelBuilder.Entity<ProductStockLevel>();
            t28.ToTable("ProductStockLevel", "Merchandising");

            t28.HasKey(t => t.Id);

            t28.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t28.Property(t => t.LocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t28.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t28.Property(t => t.StockOnHand)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t28.Property(t => t.StockOnOrder)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t28.Property(t => t.StockAvailable)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t29 = modelBuilder.Entity<ProductHierarchy>();
            t29.ToTable("ProductHierarchy", "Merchandising");

            t29.HasKey(t => t.Id);

            t29.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t29.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t29.Property(t => t.HierarchyTagId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t29.Property(t => t.HierarchyLevelId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t30 = modelBuilder.Entity<ProductSupplier>();
            t30.ToTable("ProductSupplier", "Merchandising");

            t30.HasKey(t => t.Id);

            t30.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t30.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t30.Property(t => t.SupplierId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t31 = modelBuilder.Entity<Promotion>();
            t31.ToTable("Promotion", "Merchandising");

            t31.HasKey(t => t.Id);

            t31.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t31.Property(t => t.Name)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t31.Property(t => t.Fascia)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t31.Property(t => t.LocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t31.Property(t => t.StartDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t31.Property(t => t.EndDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t31.Property(t => t.PromotionType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            var t32 = modelBuilder.Entity<PromotionDetail>();
            t32.ToTable("PromotionDetail", "Merchandising");

            t32.HasKey(t => t.Id);

            t32.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t32.Property(t => t.PromotionId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t32.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t32.Property(t => t.PriceType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t32.Property(t => t.Price)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t32.Property(t => t.ValueDiscount)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t32.Property(t => t.PercentDiscount)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            var t33 = modelBuilder.Entity<PromotionHierarchy>();
            t33.ToTable("PromotionHierarchy", "Merchandising");

            t33.HasKey(t => t.Id);

            t33.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t33.Property(t => t.PromotionDetailId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t33.Property(t => t.LevelId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t33.Property(t => t.TagId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t34 = modelBuilder.Entity<PurchaseOrder>();
            t34.ToTable("PurchaseOrder", "Merchandising");

            t34.HasKey(t => t.Id);

            t34.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t34.Property(t => t.VendorId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t34.Property(t => t.Vendor)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t34.Property(t => t.RequestedDeliveryDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t34.Property(t => t.ReceivingLocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t34.Property(t => t.ReceivingLocation)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t34.Property(t => t.ReferenceNumbers)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t34.Property(t => t.Currency)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(3)

            ;

            t34.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t34.Property(t => t.Status)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t34.Property(t => t.OriginalPrint)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t34.Property(t => t.CreatedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t34.Property(t => t.CreatedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t34.Property(t => t.CreatedBy)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t34.Property(t => t.PaymentTerms)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(60)

            ;

            t34.Property(t => t.OriginSystem)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(10)

            ;

            t34.Property(t => t.CorporatePoNumber)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t34.Property(t => t.ShipDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t34.Property(t => t.ShipVia)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(60)

            ;

            t34.Property(t => t.PortOfLoading)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(60)

            ;

            t34.Property(t => t.Attributes)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t34.Property(t => t.CommissionChargeFlag)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(1)
            .IsFixedLength()
            ;

            t34.Property(t => t.CommissionPercentage)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(10)

            ;

            t34.Property(t => t.ExpiredDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t35 = modelBuilder.Entity<PurchaseOrderProduct>();
            t35.ToTable("PurchaseOrderProduct", "Merchandising");

            t35.HasKey(t => t.Id);

            t35.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t35.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t35.Property(t => t.Sku)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t35.Property(t => t.Description)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(240)

            ;

            t35.Property(t => t.RequestedDeliveryDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t35.Property(t => t.QuantityOrdered)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t35.Property(t => t.UnitCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t35.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t35.Property(t => t.EstimatedDeliveryDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t35.Property(t => t.PurchaseOrderId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t35.Property(t => t.PreLandedUnitCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t35.Property(t => t.PreLandedExtendedCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t35.Property(t => t.LabelRequired)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t35.Property(t => t.QuantityCancelled)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t36 = modelBuilder.Entity<RepossessedCondition>();
            t36.ToTable("RepossessedCondition", "Merchandising");

            t36.HasKey(t => t.Id);

            t36.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t36.Property(t => t.Name)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t36.Property(t => t.SKUSuffix)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(10)

            ;

            var t37 = modelBuilder.Entity<RepossessedProduct>();
            t37.ToTable("RepossessedProduct", "Merchandising");

            t37.HasKey(t => t.Id);

            t37.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t37.Property(t => t.OriginalProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t37.Property(t => t.RepossessedConditionId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t38 = modelBuilder.Entity<RetailPrice>();
            t38.ToTable("RetailPrice", "Merchandising");

            t38.HasKey(t => t.Id);

            t38.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t38.Property(t => t.LocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t38.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t38.Property(t => t.EffectiveDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t38.Property(t => t.RegularPrice)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t38.Property(t => t.CashPrice)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t38.Property(t => t.DutyFreePrice)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t38.Property(t => t.LastUpdated)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t38.Property(t => t.Fascia)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            var t39 = modelBuilder.Entity<SetProduct>();
            t39.ToTable("SetProduct", "Merchandising");

            t39.HasKey(t => t.Id);

            t39.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t39.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t39.Property(t => t.SetId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t39.Property(t => t.Quantity)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t40 = modelBuilder.Entity<SetLocation>();
            t40.ToTable("SetLocation", "Merchandising");

            t40.HasKey(t => t.Id);

            t40.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t40.Property(t => t.LocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t40.Property(t => t.RegularPrice)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t40.Property(t => t.CashPrice)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t40.Property(t => t.DutyFreePrice)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t40.Property(t => t.SetId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t40.Property(t => t.Fascia)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t40.Property(t => t.EffectiveDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t41 = modelBuilder.Entity<StockAdjustment>();
            t41.ToTable("StockAdjustment", "Merchandising");

            t41.HasKey(t => t.Id);

            t41.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t41.Property(t => t.LocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t41.Property(t => t.PrimaryReasonId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t41.Property(t => t.SecondaryReasonId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t41.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t41.Property(t => t.AuthorisedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t41.Property(t => t.AuthorisedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t41.Property(t => t.CreatedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t41.Property(t => t.CreatedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t41.Property(t => t.ReferenceNumber)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t41.Property(t => t.OriginalPrint)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t42 = modelBuilder.Entity<StockAdjustmentPrimaryReason>();
            t42.ToTable("StockAdjustmentPrimaryReason", "Merchandising");

            t42.HasKey(t => t.Id);

            t42.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t42.Property(t => t.Name)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t42.Property(t => t.DateDeleted)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t43 = modelBuilder.Entity<StockAdjustmentProduct>();
            t43.ToTable("StockAdjustmentProduct", "Merchandising");

            t43.HasKey(t => t.Id);

            t43.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t43.Property(t => t.StockAdjustmentId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t43.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t43.Property(t => t.Quantity)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t43.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t43.Property(t => t.ReferenceNumber)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t43.Property(t => t.AverageWeightedCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            var t44 = modelBuilder.Entity<StockAdjustmentSecondaryReason>();
            t44.ToTable("StockAdjustmentSecondaryReason", "Merchandising");

            t44.HasKey(t => t.Id);

            t44.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t44.Property(t => t.PrimaryReasonId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t44.Property(t => t.SecondaryReason)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t44.Property(t => t.TransactionCode)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(10)

            ;

            t44.Property(t => t.DebitAccount)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(30)

            ;

            t44.Property(t => t.CreditAccount)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(30)

            ;

            t44.Property(t => t.SplitDebitByDepartment)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t44.Property(t => t.SplitCreditByDepartment)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t44.Property(t => t.DefaultForCountAdjustment)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t44.Property(t => t.DateDeleted)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t45 = modelBuilder.Entity<StockAllocationProduct>();
            t45.ToTable("StockAllocationProduct", "Merchandising");

            t45.HasKey(t => t.Id);

            t45.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t45.Property(t => t.ReceivingLocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t45.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t45.Property(t => t.Quantity)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t45.Property(t => t.AverageWeightedCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t45.Property(t => t.BookingId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t45.Property(t => t.QuantityCancelled)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t45.Property(t => t.QuantityReceived)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t45.Property(t => t.CompletedOn)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t45.Property(t => t.WarehouseLocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t45.Property(t => t.CreatedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t45.Property(t => t.CreatedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t45.Property(t => t.ReferenceNumber)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t45.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t46 = modelBuilder.Entity<StockCount>();
            t46.ToTable("StockCount", "Merchandising");

            t46.HasKey(t => t.Id);

            t46.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t46.Property(t => t.LocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t46.Property(t => t.Type)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(10)

            ;

            t46.Property(t => t.CountDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t46.Property(t => t.CreatedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t46.Property(t => t.CreatedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t46.Property(t => t.CancelledDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t46.Property(t => t.CancelledById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t46.Property(t => t.StartedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t46.Property(t => t.ClosedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t46.Property(t => t.ClosedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t46.Property(t => t.StartedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t46.Property(t => t.StockAdjustmentId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t47 = modelBuilder.Entity<StockCountHierarchy>();
            t47.ToTable("StockCountHierarchy", "Merchandising");

            t47.HasKey(t => t.Id);

            t47.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t47.Property(t => t.StockCountId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t47.Property(t => t.HierarchyLevelId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t47.Property(t => t.HierarchyTagId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t48 = modelBuilder.Entity<StockCountProduct>();
            t48.ToTable("StockCountProduct", "Merchandising");

            t48.HasKey(t => t.Id);

            t48.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t48.Property(t => t.StockCountId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t48.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t48.Property(t => t.StartStockOnHand)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t48.Property(t => t.Count)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t48.Property(t => t.SystemAdjustment)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t48.Property(t => t.VerifiedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t48.Property(t => t.CreatedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t48.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t48.Property(t => t.Hierarchy)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            var t49 = modelBuilder.Entity<StockRequisitionProduct>();
            t49.ToTable("StockRequisitionProduct", "Merchandising");

            t49.HasKey(t => t.Id);

            t49.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t49.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t49.Property(t => t.Quantity)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t49.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t49.Property(t => t.ReferenceNumber)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t49.Property(t => t.AverageWeightedCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t49.Property(t => t.BookingId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t49.Property(t => t.QuantityCancelled)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t49.Property(t => t.QuantityReceived)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t49.Property(t => t.CompletedOn)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t49.Property(t => t.WarehouseLocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t49.Property(t => t.ReceivingLocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t49.Property(t => t.CreatedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t49.Property(t => t.CreatedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t50 = modelBuilder.Entity<StockTransfer>();
            t50.ToTable("StockTransfer", "Merchandising");

            t50.HasKey(t => t.Id);

            t50.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t50.Property(t => t.SendingLocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t50.Property(t => t.ReceivingLocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t50.Property(t => t.ViaLocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t50.Property(t => t.ReferenceNumber)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(200)

            ;

            t50.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(200)

            ;

            t50.Property(t => t.OriginalPrint)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t50.Property(t => t.CreatedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t50.Property(t => t.CreatedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t51 = modelBuilder.Entity<StockTransferMovement>();
            t51.ToTable("StockTransferMovement", "Merchandising");

            t51.HasKey(t => t.Id);

            t51.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t51.Property(t => t.BookingId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t51.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t51.Property(t => t.SendingLocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t51.Property(t => t.ReceivingLocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t51.Property(t => t.Type)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(14)

            ;

            t51.Property(t => t.Quantity)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t51.Property(t => t.DateProcessed)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t51.Property(t => t.AverageWeightedCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            var t52 = modelBuilder.Entity<StockTransferProduct>();
            t52.ToTable("StockTransferProduct", "Merchandising");

            t52.HasKey(t => t.Id);

            t52.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t52.Property(t => t.StockTransferId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t52.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t52.Property(t => t.Quantity)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t52.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t52.Property(t => t.ReferenceNumber)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t52.Property(t => t.AverageWeightedCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t52.Property(t => t.BookingId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t52.Property(t => t.QuantityCancelled)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t52.Property(t => t.QuantityReceived)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t52.Property(t => t.CompletedOn)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t53 = modelBuilder.Entity<StockValuationSnapshot>();
            t53.ToTable("StockValuationSnapshot", "Merchandising");

            t53.HasKey(t => t.Id);

            t53.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t53.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t53.Property(t => t.LocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t53.Property(t => t.StockOnHandQuantity)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t53.Property(t => t.StockOnHandValue)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t53.Property(t => t.StockOnHandSalesValue)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t53.Property(t => t.SnapshotDateId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t53.Property(t => t.CashPrice)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            var t54 = modelBuilder.Entity<Supplier>();
            t54.ToTable("Supplier", "Merchandising");

            t54.HasKey(t => t.Id);

            t54.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t54.Property(t => t.AddressLine1)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(240)

            ;

            t54.Property(t => t.AddressLine2)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(240)

            ;

            t54.Property(t => t.City)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(25)

            ;

            t54.Property(t => t.PostCode)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t54.Property(t => t.PaymentTerms)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t54.Property(t => t.OrderEmail)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t54.Property(t => t.Contacts)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t54.Property(t => t.Name)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(240)

            ;

            t54.Property(t => t.Type)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t54.Property(t => t.Status)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t54.Property(t => t.Code)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(30)

            ;

            t54.Property(t => t.Country)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(2)

            ;

            t54.Property(t => t.Tags)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t54.Property(t => t.Currency)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(10)

            ;

            t54.Property(t => t.State)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(150)

            ;

            var t55 = modelBuilder.Entity<SupplierStatus>();
            t55.ToTable("SupplierStatus", "Merchandising");

            t55.HasKey(t => t.Id);

            t55.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t55.Property(t => t.Name)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            var t56 = modelBuilder.Entity<TaxRate>();
            t56.ToTable("TaxRate", "Merchandising");

            t56.HasKey(t => t.Id);

            t56.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t56.Property(t => t.Name)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t56.Property(t => t.Rate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t56.Property(t => t.EffectiveDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t56.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t57 = modelBuilder.Entity<TransactionType>();
            t57.ToTable("TransactionType", "Merchandising");

            t57.HasKey(t => t.Id);

            t57.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t57.Property(t => t.Name)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t57.Property(t => t.TransactionCode)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(10)

            ;

            t57.Property(t => t.DebitAccount)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(30)

            ;

            t57.Property(t => t.CreditAccount)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(30)

            ;

            t57.Property(t => t.SplitDebitByDepartment)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t57.Property(t => t.SplitCreditByDepartment)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t58 = modelBuilder.Entity<VendorReturn>();
            t58.ToTable("VendorReturn", "Merchandising");

            t58.HasKey(t => t.Id);

            t58.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t58.Property(t => t.GoodsReceiptId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t58.Property(t => t.CreatedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t58.Property(t => t.ApprovedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t58.Property(t => t.CreatedBy)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t58.Property(t => t.ApprovedBy)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t58.Property(t => t.CreatedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t58.Property(t => t.ApprovedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t58.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t58.Property(t => t.ReceiptType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t58.Property(t => t.ReferenceNumber)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            var t59 = modelBuilder.Entity<VendorReturnProduct>();
            t59.ToTable("VendorReturnProduct", "Merchandising");

            t59.HasKey(t => t.Id);

            t59.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t59.Property(t => t.VendorReturnId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t59.Property(t => t.GoodsReceiptProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t59.Property(t => t.QuantityReturned)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t59.Property(t => t.Comments)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            var t60 = modelBuilder.Entity<GoodsReceiptResume>();
            t60.ToTable("GoodsReceiptResume", "Merchandising");

            t60.HasKey(t => t.Id);

            t60.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t60.Property(t => t.ReferenceNumberCsl)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t60.Property(t => t.DateReceived)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t60.Property(t => t.LocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t60.Property(t => t.Date)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t60.Property(t => t.Quantity)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t60.Property(t => t.LastLandedCost)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            .HasPrecision(28, 12);

            t60.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t60.Property(t => t.VendorId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t60.Property(t => t.VendorName)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t60.Property(t => t.PurchaseOrderId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t60.Property(t => t.SKU)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t60.Property(t => t.Description)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(240)

            ;

            t60.Property(t => t.Status)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t60.Property(t => t.ReceivingLocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t60.Property(t => t.QuantityCancelled)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t60.Property(t => t.QuantityOrdered)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t60.Property(t => t.ReceiptProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t61 = modelBuilder.Entity<ProductStaging>();
            t61.ToTable("ProductStaging", "Merchandising");

            t61.HasKey(t => t.Id);

            t61.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t61.Property(t => t.SKU)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t61.Property(t => t.LongDescription)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(240)

            ;

            t61.Property(t => t.ProductType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(100)

            ;

            t61.Property(t => t.Tags)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.StoreTypes)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.POSDescription)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(240)

            ;

            t61.Property(t => t.Attributes)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.CreatedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.LastUpdatedDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.Status)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.PriceTicket)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.SKUStatus)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(1)
            .IsFixedLength()
            ;

            t61.Property(t => t.CorporateUPC)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t61.Property(t => t.VendorUPC)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(60)

            ;

            t61.Property(t => t.VendorStyleLong)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(50)

            ;

            t61.Property(t => t.CountryOfOrigin)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(2)

            ;

            t61.Property(t => t.VendorWarranty)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.ReplacingTo)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t61.Property(t => t.Features)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.BrandId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.PrimaryVendorId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.LastStatusChangeDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.OnlineDateAdded)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.LabelRequired)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.BoxCount)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.ProductAction)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(1)
            .IsFixedLength()
            ;

            t61.Property(t => t.CreatedById)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.ExternalCreationDate)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t61.Property(t => t.MagentoExportType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t61.Property(t => t.BrandCode)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(6)

            ;

            t61.Property(t => t.BrandName)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(25)

            ;

            var t62 = modelBuilder.Entity<ProductHierarchyStaging>();
            t62.ToTable("ProductHierarchyStaging", "Merchandising");

            t62.HasKey(t => t.Id);

            t62.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t62.Property(t => t.ProductId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t62.Property(t => t.HierarchyTagId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t62.Property(t => t.HierarchyLevelId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            var t63 = modelBuilder.Entity<SucrBase>();
            t63.ToTable("SucrBase", "Merchandising");

            t63.HasKey(t => t.Id);

            t63.Property(t => t.Id)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)



            ;

            t63.Property(t => t.LocationId)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t63.Property(t => t.SummaryType)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
            .IsUnicode(false)
            .HasMaxLength(20)

            ;

            t63.Property(t => t.Units)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            t63.Property(t => t.Value)
            .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)



            ;

            modelBuilder.Entity<AbbreviatedStockExportView>().ToTable("AbbreviatedStockExportView", "Merchandising");

            modelBuilder.Entity<AllocatedStockView>().ToTable("AllocatedStockView", "Merchandising");

            modelBuilder.Entity<BuyerSalesHistoryReportView>().ToTable("BuyerSalesHistoryReportView", "Merchandising");

            modelBuilder.Entity<BuyerSalesHistoryView>().ToTable("BuyerSalesHistoryView", "Merchandising");

            modelBuilder.Entity<CintOrderCostView>().ToTable("CintOrderCostView", "Merchandising");

            modelBuilder.Entity<ComboView>().ToTable("ComboView", "Merchandising");

            modelBuilder.Entity<ComboPriceView>().ToTable("ComboPriceView", "Merchandising");

            modelBuilder.Entity<ComboProductView>().ToTable("ComboProductView", "Merchandising");

            modelBuilder.Entity<ComponentView>().ToTable("ComponentView", "Merchandising");

            modelBuilder.Entity<CostPriceView>().ToTable("CostPriceView", "Merchandising");

            modelBuilder.Entity<CurrentCostPriceView>().ToTable("CurrentCostPriceView", "Merchandising");

            modelBuilder.Entity<CurrentPriceByLocationView>().ToTable("CurrentPriceByLocationView", "Merchandising");

            modelBuilder.Entity<CurrentRetailPriceView>().ToTable("CurrentRetailPriceView", "Merchandising");

            modelBuilder.Entity<CurrentStockPriceByLocationView>().ToTable("CurrentStockPriceByLocationView", "Merchandising");

            modelBuilder.Entity<DatesView>().ToTable("DatesView", "Merchandising");

            modelBuilder.Entity<PriceByLocationView>().ToTable("PriceByLocationView", "Merchandising");

            modelBuilder.Entity<ForceGoodsReceiptIndexView>().ToTable("ForceGoodsReceiptIndexView", "Merchandising");

            modelBuilder.Entity<ForceMerchandiseStockLevelsView>().ToTable("ForceMerchandiseStockLevelsView", "Merchandising");

            modelBuilder.Entity<ForceMerchandiseProductEnquiryIndexView>().ToTable("ForceMerchandiseProductEnquiryIndexView", "Merchandising");

            modelBuilder.Entity<ForcePromotionIndexView>().ToTable("ForcePromotionIndexView", "Merchandising");

            modelBuilder.Entity<ForcePurchaseOrderIndexView>().ToTable("ForcePurchaseOrderIndexView", "Merchandising");

            modelBuilder.Entity<GoodsOnLoanSearchView>().ToTable("GoodsOnLoanSearchView", "Merchandising");

            modelBuilder.Entity<GoodsOnLoanProductView>().ToTable("GoodsOnLoanProductView", "Merchandising");

            modelBuilder.Entity<GoodsReceiptAllProductView>().ToTable("GoodsReceiptAllProductView", "Merchandising");

            modelBuilder.Entity<GoodsReceiptDirectProductView>().ToTable("GoodsReceiptDirectProductView", "Merchandising");

            modelBuilder.Entity<GoodsReceiptProductView>().ToTable("GoodsReceiptProductView", "Merchandising");

            modelBuilder.Entity<HyperionCurrentPriceView>().ToTable("HyperionCurrentPriceView", "Merchandising");

            modelBuilder.Entity<HyperionGoodsReceivedView>().ToTable("HyperionGoodsReceivedView", "Merchandising");

            modelBuilder.Entity<HyperionSalesView>().ToTable("HyperionSalesView", "Merchandising");

            modelBuilder.Entity<LocationStockLevelView>().ToTable("LocationStockLevelView", "Merchandising");

            modelBuilder.Entity<NegativeStockSnapshotView>().ToTable("NegativeStockSnapshotView", "Merchandising");

            modelBuilder.Entity<NegativeStockSummaryView>().ToTable("NegativeStockSummaryView", "Merchandising");

            modelBuilder.Entity<NonActiveStatusProgressView>().ToTable("NonActiveStatusProgressView", "Merchandising");

            modelBuilder.Entity<OrderExportView>().ToTable("OrderExportView", "Merchandising");

            modelBuilder.Entity<PeriodEndDatesView>().ToTable("PeriodEndDatesView", "Merchandising");

            modelBuilder.Entity<PrintLabelView>().ToTable("PrintLabelView", "Merchandising");

            modelBuilder.Entity<ProductExportView>().ToTable("ProductExportView", "Merchandising");

            modelBuilder.Entity<ProductHierarchyView>().ToTable("ProductHierarchyView", "Merchandising");

            modelBuilder.Entity<PendingStockOnOrderView>().ToTable("PendingStockOnOrderView", "Merchandising");

            modelBuilder.Entity<ProductHierarchyConcatView>().ToTable("ProductHierarchyConcatView", "Merchandising");

            modelBuilder.Entity<ProductMessageView>().ToTable("ProductMessageView", "Merchandising");

            modelBuilder.Entity<ProductStockLocationView>().ToTable("ProductStockLocationView", "Merchandising");

            modelBuilder.Entity<ProductSupplierView>().ToTable("ProductSupplierView", "Merchandising");

            modelBuilder.Entity<PromotionDetailView>().ToTable("PromotionDetailView", "Merchandising");

            modelBuilder.Entity<PromotionProductView>().ToTable("PromotionProductView", "Merchandising");

            modelBuilder.Entity<PromotionReportView>().ToTable("PromotionReportView", "Merchandising");

            modelBuilder.Entity<ProductsToIndexView>().ToTable("ProductsToIndexView", "Merchandising");

            modelBuilder.Entity<PromotionHierarchiesToIndex>().ToTable("PromotionHierarchiesToIndex", "Merchandising");

            modelBuilder.Entity<PurchaseOrderProductStatsView>().ToTable("PurchaseOrderProductStatsView", "Merchandising");

            modelBuilder.Entity<RepossessedPriceView>().ToTable("RepossessedPriceView", "Merchandising");

            modelBuilder.Entity<RetailPriceView>().ToTable("RetailPriceView", "Merchandising");

            modelBuilder.Entity<RP3ProductExportView>().ToTable("RP3ProductExportView", "Merchandising");

            modelBuilder.Entity<RP3PurchaseOrderView>().ToTable("RP3PurchaseOrderView", "Merchandising");

            modelBuilder.Entity<RP3PurchaseOrderProductView>().ToTable("RP3PurchaseOrderProductView", "Merchandising");

            modelBuilder.Entity<RP3VendorReturnView>().ToTable("RP3VendorReturnView", "Merchandising");

            modelBuilder.Entity<RP3VendorReturnProductView>().ToTable("RP3VendorReturnProductView", "Merchandising");

            modelBuilder.Entity<RP3GoodsReceiptView>().ToTable("RP3GoodsReceiptView", "Merchandising");

            modelBuilder.Entity<RP3GoodsReceiptProductView>().ToTable("RP3GoodsReceiptProductView", "Merchandising");

            modelBuilder.Entity<RP3StockAdjustmentView>().ToTable("RP3StockAdjustmentView", "Merchandising");

            modelBuilder.Entity<RP3StockAdjustmentProductView>().ToTable("RP3StockAdjustmentProductView", "Merchandising");

            modelBuilder.Entity<RP3StockTransferView>().ToTable("RP3StockTransferView", "Merchandising");

            modelBuilder.Entity<RP3StockTransferProductView>().ToTable("RP3StockTransferProductView", "Merchandising");

            modelBuilder.Entity<SalesComparisonReportView>().ToTable("SalesComparisonReportView", "Merchandising");

            modelBuilder.Entity<SalesView>().ToTable("SalesView", "Merchandising");

            modelBuilder.Entity<SetExportView>().ToTable("SetExportView", "Merchandising");

            modelBuilder.Entity<SetLocationView>().ToTable("SetLocationView", "Merchandising");

            modelBuilder.Entity<SetProductView>().ToTable("SetProductView", "Merchandising");

            modelBuilder.Entity<SetView>().ToTable("SetView", "Merchandising");

            modelBuilder.Entity<StockAdjustmentReasonView>().ToTable("StockAdjustmentReasonView", "Merchandising");

            modelBuilder.Entity<StockAdjustmentSearchView>().ToTable("StockAdjustmentSearchView", "Merchandising");

            modelBuilder.Entity<StockAdjustmentView>().ToTable("StockAdjustmentView", "Merchandising");

            modelBuilder.Entity<StockAdjustmentProductView>().ToTable("StockAdjustmentProductView", "Merchandising");

            modelBuilder.Entity<StockAllocationProductView>().ToTable("StockAllocationProductView", "Merchandising");

            modelBuilder.Entity<StockCountHierarchyView>().ToTable("StockCountHierarchyView", "Merchandising");

            modelBuilder.Entity<StockCountPreviewView>().ToTable("StockCountPreviewView", "Merchandising");

            modelBuilder.Entity<StockCountProductView>().ToTable("StockCountProductView", "Merchandising");

            modelBuilder.Entity<StockDeliveryDateView>().ToTable("StockDeliveryDateView", "Merchandising");

            modelBuilder.Entity<StockMovementReportView>().ToTable("StockMovementReportView", "Merchandising");

            modelBuilder.Entity<StockReceivedReportView>().ToTable("StockReceivedReportView", "Merchandising");

            modelBuilder.Entity<StockReceivedReportStockCountView>().ToTable("StockReceivedReportStockCountView", "Merchandising");

            modelBuilder.Entity<StockRequisitionProductView>().ToTable("StockRequisitionProductView", "Merchandising");

            modelBuilder.Entity<StockTransferView>().ToTable("StockTransferView", "Merchandising");

            modelBuilder.Entity<StockTransferProductView>().ToTable("StockTransferProductView", "Merchandising");

            modelBuilder.Entity<StockValuationSummaryView>().ToTable("StockValuationSummaryView", "Merchandising");

            modelBuilder.Entity<StockCountView>().ToTable("StockCountView", "Merchandising");

            modelBuilder.Entity<StockExportView>().ToTable("StockExportView", "Merchandising");

            modelBuilder.Entity<SummaryUpdateControlReportView>().ToTable("SummaryUpdateControlReportView", "Merchandising");

            modelBuilder.Entity<TagView>().ToTable("TagView", "Merchandising");

            modelBuilder.Entity<TicketExtractView>().ToTable("TicketExtractView", "Merchandising");

            modelBuilder.Entity<TopSkuReportView>().ToTable("TopSkuReportView", "Merchandising");

            modelBuilder.Entity<UserPermissionsView>().ToTable("UserPermissionsView", "Merchandising");

            modelBuilder.Entity<VendorReturnDirectNewView>().ToTable("VendorReturnDirectNewView", "Merchandising");

            modelBuilder.Entity<VendorReturnDirectProductView>().ToTable("VendorReturnDirectProductView", "Merchandising");

            modelBuilder.Entity<VendorReturnNewView>().ToTable("VendorReturnNewView", "Merchandising");

            modelBuilder.Entity<VendorReturnProductView>().ToTable("VendorReturnProductView", "Merchandising");

            modelBuilder.Entity<VendorReturnSearchView>().ToTable("VendorReturnSearchView", "Merchandising");

            modelBuilder.Entity<VendorReturnView>().ToTable("VendorReturnView", "Merchandising");

            modelBuilder.Entity<WarehouseOversupplyReportView>().ToTable("WarehouseOversupplyReportView", "Merchandising");

            modelBuilder.Entity<WTRWarrantyView>().ToTable("WTRWarrantyView", "Merchandising");

            modelBuilder.Entity<WTRInstallationsView>().ToTable("WTRInstallationsView", "Merchandising");

            modelBuilder.Entity<WTRIGenericServicesView>().ToTable("WTRIGenericServicesView", "Merchandising");

            modelBuilder.Entity<WTRAffinityView>().ToTable("WTRAffinityView", "Merchandising");

            modelBuilder.Entity<WTRLoansView>().ToTable("WTRLoansView", "Merchandising");

            modelBuilder.Entity<WTRServiceChargeView>().ToTable("WTRServiceChargeView", "Merchandising");

            modelBuilder.Entity<WTRRebatesView>().ToTable("WTRRebatesView", "Merchandising");

            modelBuilder.Entity<WTRDiscountsView>().ToTable("WTRDiscountsView", "Merchandising");

            modelBuilder.Entity<WTRSalesAView>().ToTable("WTRSalesAView", "Merchandising");

            modelBuilder.Entity<WTRSalesBView>().ToTable("WTRSalesBView", "Merchandising");

            modelBuilder.Entity<WTRSalesFView>().ToTable("WTRSalesFView", "Merchandising");

            modelBuilder.Entity<WTRPenaltyView>().ToTable("WTRPenaltyView", "Merchandising");

            modelBuilder.Entity<WTRCreditCashDifferenceView>().ToTable("WTRCreditCashDifferenceView", "Merchandising");

            modelBuilder.Entity<WTRCurrentStockItemsValueBranchView>().ToTable("WTRCurrentStockItemsValueBranchView", "Merchandising");

            modelBuilder.Entity<WTREndOfMonthStockItemsValueBranchView>().ToTable("WTREndOfMonthStockItemsValueBranchView", "Merchandising");

            modelBuilder.Entity<WTRCurrentStockItemsValueView>().ToTable("WTRCurrentStockItemsValueView", "Merchandising");

            modelBuilder.Entity<WTREndOfMonthStockItemsValueView>().ToTable("WTREndOfMonthStockItemsValueView", "Merchandising");

            modelBuilder.Entity<StockChangeView>().ToTable("StockChangeView", "Merchandising");

            modelBuilder.Entity<ProductsOnOrder>().ToTable("ProductsOnOrder", "Merchandising");

            modelBuilder.Entity<RP3CurrentWeeklyMerchandisingView>().ToTable("RP3CurrentWeeklyMerchandisingView", "Merchandising");

            modelBuilder.Entity<RP3PreviousWeeklyMerchandisingView>().ToTable("RP3PreviousWeeklyMerchandisingView", "Merchandising");

            modelBuilder.Entity<AssociatedProductsHierarchyView>().ToTable("AssociatedProductsHierarchyView", "Merchandising");
            #region Ashley Model Builder
            //modelBuilder.Entity<AshleySetUp>().ToTable("AshleySetups", "Merchandising");
            modelBuilder.Entity<ProductAttribute>().ToTable("ProductAttributes", "Merchandising");
            modelBuilder.Entity<ProductStockRange>().ToTable("ProductStockRanges", "Merchandising");
            modelBuilder.Entity<AdditionalCostPrice>().ToTable("AdditionalCostPrices", "Merchandising");
            modelBuilder.Entity<AdditionalCostPriceAudit>().ToTable("AdditionalCostPriceAudits", "Merchandising");
            modelBuilder.Entity<ForceIndexAutoPurchaseOrder>().ToTable("ForceIndexAutoPurchaseOrder", "Merchandising");
            modelBuilder.Entity<AshleyErrorLog>().ToTable("AshleyErrorLogs", "Merchandising");
            modelBuilder.Entity<POCancelReasonList>().ToTable("POCancelReasonList", "Merchandising");
            modelBuilder.Entity<RenissanceCustomers>().ToTable("RenissanceCustomers", "Merchandising");
            //
            #endregion
        }
    }


    [Serializable]
    [DataContract]
    public partial class AssociatedProduct
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int? ProductId { get; set; }
        [DataMember]
        public string AssociatedHierarchy { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class Brand
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string BrandCode { get; set; }
        [DataMember]
        public string BrandName { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class CintOrder
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int RunNo { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public string PrimaryReference { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string SaleLocation { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string StockLocation { get; set; }
        [DataMember]
        public string ParentSku { get; set; }
        [DataMember]
        public int? ParentId { get; set; }
        [DataMember]
        public DateTime TransactionDate { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public decimal? Tax { get; set; }
        [DataMember]
        public string SecondaryReference { get; set; }
        [DataMember]
        public string ReferenceType { get; set; }
        [DataMember]
        public decimal? Discount { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public int? PromotionId { get; set; }
        [DataMember]
        public decimal? CostPrice { get; set; }
        [DataMember]
        public int? CintRegularOrderId { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class CintOrderStats
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string PrimaryReference { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string ParentSku { get; set; }
        [DataMember]
        public string StockLocation { get; set; }
        [DataMember]
        public int QtyOrdered { get; set; }
        [DataMember]
        public int QtyDelivered { get; set; }
        [DataMember]
        public int QtyReturned { get; set; }
        [DataMember]
        public int QtyRepossessed { get; set; }
        [DataMember]
        public string SecondaryReference { get; set; }
        [DataMember]
        public string ReferenceType { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class CintError
    {
        [DataMember]
        public string ProductCode { get; set; }
        [DataMember]
        public string PrimaryReference { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public string StockLocation { get; set; }
        [DataMember]
        public string SaleLocation { get; set; }
        [DataMember]
        public string ErrorMessage { get; set; }
        [DataMember]
        public DateTime Date { get; set; }
        [DataMember]
        public int RunNo { get; set; }
        [DataMember]
        public string SecondaryReference { get; set; }
        [DataMember]
        public string ReferenceType { get; set; }
        [DataMember]
        public int MessageId { get; set; }
        [DataMember]
        public DateTime? Resolved { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class CintsError
    {
        [DataMember]
        public int MessageId { get; set; }
        [DataMember]
        public string Exception { get; set; }
        [DataMember]
        public DateTime CreatedOn { get; set; }
        [DataMember]
        public int Runno { get; set; }
        [DataMember]
        public DateTime? Resolved { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class CintRun
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int RunId { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class Combo
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public DateTime StartDate { get; set; }
        [DataMember]
        public DateTime EndDate { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class ComboProduct
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int ComboId { get; set; }
        [DataMember]
        public int Quantity { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class ComboProductPrice
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ComboProductId { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public decimal? RegularPrice { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public decimal? DutyFreePrice { get; set; }
        [DataMember]
        public string Fascia { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class CostPrice
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public decimal SupplierCost { get; set; }
        [DataMember]
        public decimal LastLandedCost { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        public string SupplierCurrency { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public DateTime LastLandedCostUpdated { get; set; }
        [DataMember]
        public DateTime? AverageWeightedCostUpdated { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class ClassMapping
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string ClassCode { get; set; }
        [DataMember]
        public string LegacyCode { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class GoodsOnLoan
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int? ServiceRequestId { get; set; }
        [DataMember]
        public string CustomerId { get; set; }
        [DataMember]
        public string BusinessName { get; set; }
        [DataMember]
        public string Title { get; set; }
        [DataMember]
        public string FirstName { get; set; }
        [DataMember]
        public string LastName { get; set; }
        [DataMember]
        public string AddressLine2 { get; set; }
        [DataMember]
        public string TownCity { get; set; }
        [DataMember]
        public string PostCode { get; set; }
        [DataMember]
        public int StockLocationId { get; set; }
        [DataMember]
        public DateTime ExpectedCollectionDate { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string Contacts { get; set; }
        [DataMember]
        public int CreatedById { get; set; }
        [DataMember]
        public DateTime CreatedOn { get; set; }
        [DataMember]
        public DateTime? CollectedDate { get; set; }
        [DataMember]
        public string AddressLine1 { get; set; }
        [DataMember]
        public string JobTitle { get; set; }
        [DataMember]
        public string DeliveryContactDetails { get; set; }
        [DataMember]
        public string AddressNotes { get; set; }
        [DataMember]
        public DateTime? PreferredDeliveryDate { get; set; }
        [DataMember]
        public DateTime? DeliveryPrintedDate { get; set; }
        [DataMember]
        public DateTime? CollectionPrintedDate { get; set; }
        [DataMember]
        public int? StockTransferId { get; set; }
        [DataMember]
        public int? ReturnStockTransferId { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class GoodsOnLoanProduct
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int GoodsOnLoanId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class GoodsReceipt
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public int ReceivedById { get; set; }
        [DataMember]
        public string VendorDeliveryNumber { get; set; }
        [DataMember]
        public string VendorInvoiceNumber { get; set; }
        [DataMember]
        public DateTime DateReceived { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string ReceivedBy { get; set; }
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public DateTime? OriginalPrint { get; set; }
        [DataMember]
        public DateTime? DateApproved { get; set; }
        [DataMember]
        public int? ApprovedById { get; set; }
        [DataMember]
        public string ApprovedBy { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public int? CreatedById { get; set; }
        [DataMember]
        public string CreatedBy { get; set; }
        [DataMember]
        public DateTime? CostConfirmed { get; set; }
        [DataMember]
        public int? CostConfirmedById { get; set; }
        [DataMember]
        public string CostConfirmedBy { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class GoodsReceiptDirect
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public int? CreatedById { get; set; }
        [DataMember]
        public int ReceivedById { get; set; }
        [DataMember]
        public int? ApprovedById { get; set; }
        [DataMember]
        public int? VendorId { get; set; }
        [DataMember]
        public string CreatedBy { get; set; }
        [DataMember]
        public string ReceivedBy { get; set; }
        [DataMember]
        public string ApprovedBy { get; set; }
        [DataMember]
        public string Vendor { get; set; }
        [DataMember]
        public string Currency { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public DateTime? OriginalPrint { get; set; }
        [DataMember]
        public DateTime DateReceived { get; set; }
        [DataMember]
        public DateTime? DateApproved { get; set; }
        [DataMember]
        public string ReferenceNumbers { get; set; }
        [DataMember]
        public string VendorDeliveryNumber { get; set; }
        [DataMember]
        public string VendorInvoiceNumber { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string Location { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class GoodsReceiptProduct
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int GoodsReceiptId { get; set; }
        [DataMember]
        public int PurchaseOrderProductId { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
        [DataMember]
        public int QuantityBackOrdered { get; set; }
        [DataMember]
        public string ReasonForCancellation { get; set; }
        [DataMember]
        public int? QuantityCancelled { get; set; }
        [DataMember]
        public decimal LastLandedCost { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class GoodsReceiptDirectProduct
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int GoodsReceiptDirectId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
        [DataMember]
        public decimal UnitLandedCost { get; set; }
        [DataMember]
        public string Comments { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class HierarchyLevel
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string Name { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class HierarchyTag
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int LevelId { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public decimal? FirstYearWarrantyProvision { get; set; }
        [DataMember]
        public string Code { get; set; }
        [DataMember]
        public int? AgedAfter { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class HierarchyTagCondition
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int HierarchyTagId { get; set; }
        [DataMember]
        public decimal? Percentage { get; set; }
        [DataMember]
        public int RepossessedConditionId { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class Incoterm
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string CurrencyType { get; set; }
        [DataMember]
        public decimal? SupplierUnitCost { get; set; }
        [DataMember]
        public string CountryOfDispatch { get; set; }
        [DataMember]
        public string LeadTime { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class IncotermStaging
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string CurrencyType { get; set; }
        [DataMember]
        public decimal? SupplierUnitCost { get; set; }
        [DataMember]
        public string CountryOfDispatch { get; set; }
        [DataMember]
        public string LeadTime { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class Location
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string LocationId { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public string StoreType { get; set; }
        [DataMember]
        public bool Warehouse { get; set; }
        [DataMember]
        public string AddressLine1 { get; set; }
        [DataMember]
        public string AddressLine2 { get; set; }
        [DataMember]
        public string City { get; set; }
        [DataMember]
        public string PostCode { get; set; }
        [DataMember]
        public string Contacts { get; set; }
        [DataMember]
        public string SalesId { get; set; }
        [DataMember]
        public bool Active { get; set; }
        [DataMember]
        public bool VirtualWarehouse { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class NegativeStockSnapshot
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public int StockOnHandQuantity { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        public decimal StockOnHandValue { get; set; }
        [DataMember]
        public decimal StockOnHandSalesValue { get; set; }
        [DataMember]
        public int SnapshotDateId { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class PeriodData
    {
        [DataMember]
        public short id { get; set; }
        [DataMember]
        public short year { get; set; }
        [DataMember]
        public byte period { get; set; }
        [DataMember]
        public byte week { get; set; }
        [DataMember]
        public DateTime? startdate { get; set; }
        [DataMember]
        public DateTime? enddate { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class Product
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string ProductType { get; set; }
        [DataMember]
        public string PreviousProductType { get; set; }
        [DataMember]
        public string Tags { get; set; }
        [DataMember]
        public string StoreTypes { get; set; }
        [DataMember]
        public string POSDescription { get; set; }
        [DataMember]
        public string Attributes { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public DateTime LastUpdatedDate { get; set; }
        [DataMember]
        public int Status { get; set; }
        [DataMember]
        public bool PriceTicket { get; set; }
        [DataMember]
        public string SKUStatus { get; set; }
        [DataMember]
        public string CorporateUPC { get; set; }
        [DataMember]
        public string VendorUPC { get; set; }
        [DataMember]
        public string VendorStyleLong { get; set; }
        [DataMember]
        public string CountryOfOrigin { get; set; }
        [DataMember]
        public int? VendorWarranty { get; set; }
        [DataMember]
        public string ReplacingTo { get; set; }
        [DataMember]
        public string Features { get; set; }
        [DataMember]
        public int? BrandId { get; set; }
        [DataMember]
        public int? PrimaryVendorId { get; set; }
        [DataMember]
        public DateTime LastStatusChangeDate { get; set; }
        [DataMember]
        public DateTime? OnlineDateAdded { get; set; }
        [DataMember]
        public bool LabelRequired { get; set; }
        [DataMember]
        public int BoxCount { get; set; }
        [DataMember]
        public string ProductAction { get; set; }
        [DataMember]
        public int? CreatedById { get; set; }
        [DataMember]
        public DateTime? ExternalCreationDate { get; set; }
        [DataMember]
        public string MagentoExportType { get; set; }
        [DataMember]
        public bool? Warrantable { get; set; }
        public object[] GetParams()
        {
            var parameters = new List<SqlParameter>();
            parameters.Add(new SqlParameter { ParameterName = "ProductId", Value = Id, Direction = ParameterDirection.Input });

            return parameters.ToArray();
        }
    }


    [Serializable]
    [DataContract]
    public partial class ProductStatus
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public bool IsAutomatic { get; set; }
        [DataMember]
        public bool IsSystem { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class ProductStockLevel
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int StockOnHand { get; set; }
        [DataMember]
        public int StockOnOrder { get; set; }
        [DataMember]
        public int StockAvailable { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class ProductHierarchy
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int HierarchyTagId { get; set; }
        [DataMember]
        public int HierarchyLevelId { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class ProductSupplier
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int SupplierId { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class Promotion
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public DateTime StartDate { get; set; }
        [DataMember]
        public DateTime EndDate { get; set; }
        [DataMember]
        public string PromotionType { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class PromotionDetail
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int PromotionId { get; set; }
        [DataMember]
        public int? ProductId { get; set; }
        [DataMember]
        public string PriceType { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public decimal? ValueDiscount { get; set; }
        [DataMember]
        public decimal? PercentDiscount { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class PromotionHierarchy
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int PromotionDetailId { get; set; }
        [DataMember]
        public int? LevelId { get; set; }
        [DataMember]
        public int? TagId { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class PurchaseOrder
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int VendorId { get; set; }
        [DataMember]
        public string Vendor { get; set; }
        [DataMember]
        public DateTime RequestedDeliveryDate { get; set; }
        [DataMember]
        public int ReceivingLocationId { get; set; }
        [DataMember]
        public string ReceivingLocation { get; set; }
        [DataMember]
        public string ReferenceNumbers { get; set; }
        [DataMember]
        public string Currency { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string Status { get; set; }
        [DataMember]
        public DateTime? OriginalPrint { get; set; }
        [DataMember]
        public DateTime? CreatedDate { get; set; }
        [DataMember]
        public int? CreatedById { get; set; }
        [DataMember]
        public string CreatedBy { get; set; }
        [DataMember]
        public string PaymentTerms { get; set; }
        [DataMember]
        public string OriginSystem { get; set; }
        [DataMember]
        public string CorporatePoNumber { get; set; }
        [DataMember]
        public DateTime? ShipDate { get; set; }
        [DataMember]
        public string ShipVia { get; set; }
        [DataMember]
        public string PortOfLoading { get; set; }
        [DataMember]
        public string Attributes { get; set; }
        [DataMember]
        public string CommissionChargeFlag { get; set; }
        [DataMember]
        public string CommissionPercentage { get; set; }
        [DataMember]
        public DateTime? ExpiredDate { get; set; }
        [DataMember]
        public string CancelReason { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class PurchaseOrderProduct
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public DateTime RequestedDeliveryDate { get; set; }
        [DataMember]
        public int QuantityOrdered { get; set; }
        [DataMember]
        public decimal UnitCost { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public DateTime? EstimatedDeliveryDate { get; set; }
        [DataMember]
        public int PurchaseOrderId { get; set; }
        [DataMember]
        public decimal PreLandedUnitCost { get; set; }
        [DataMember]
        public decimal PreLandedExtendedCost { get; set; }
        [DataMember]
        public bool? LabelRequired { get; set; }
        [DataMember]
        public int? QuantityCancelled { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class RepossessedCondition
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string SKUSuffix { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class RepossessedProduct
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int OriginalProductId { get; set; }
        [DataMember]
        public int RepossessedConditionId { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class RetailPrice
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public DateTime EffectiveDate { get; set; }
        [DataMember]
        public decimal RegularPrice { get; set; }
        [DataMember]
        public decimal CashPrice { get; set; }
        [DataMember]
        public decimal DutyFreePrice { get; set; }
        [DataMember]
        public DateTime LastUpdated { get; set; }
        [DataMember]
        public string Fascia { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class SetProduct
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int SetId { get; set; }
        [DataMember]
        public int Quantity { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class SetLocation
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public decimal? RegularPrice { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public decimal? DutyFreePrice { get; set; }
        [DataMember]
        public int SetId { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public DateTime EffectiveDate { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class StockAdjustment
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public int PrimaryReasonId { get; set; }
        [DataMember]
        public int SecondaryReasonId { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public DateTime? AuthorisedDate { get; set; }
        [DataMember]
        public int? AuthorisedById { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public int? CreatedById { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public DateTime? OriginalPrint { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class StockAdjustmentPrimaryReason
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public DateTime? DateDeleted { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class StockAdjustmentProduct
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int StockAdjustmentId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class StockAdjustmentSecondaryReason
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int PrimaryReasonId { get; set; }
        [DataMember]
        public string SecondaryReason { get; set; }
        [DataMember]
        public string TransactionCode { get; set; }
        [DataMember]
        public string DebitAccount { get; set; }
        [DataMember]
        public string CreditAccount { get; set; }
        [DataMember]
        public bool SplitDebitByDepartment { get; set; }
        [DataMember]
        public bool SplitCreditByDepartment { get; set; }
        [DataMember]
        public bool DefaultForCountAdjustment { get; set; }
        [DataMember]
        public DateTime? DateDeleted { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class StockAllocationProduct
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ReceivingLocationId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        public int BookingId { get; set; }
        [DataMember]
        public int QuantityCancelled { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
        [DataMember]
        public DateTime? CompletedOn { get; set; }
        [DataMember]
        public int WarehouseLocationId { get; set; }
        [DataMember]
        public int CreatedById { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public string Comments { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class StockCount
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public DateTime CountDate { get; set; }
        [DataMember]
        public int CreatedById { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public DateTime? CancelledDate { get; set; }
        [DataMember]
        public int? CancelledById { get; set; }
        [DataMember]
        public int? StartedById { get; set; }
        [DataMember]
        public int? ClosedById { get; set; }
        [DataMember]
        public DateTime? ClosedDate { get; set; }
        [DataMember]
        public DateTime? StartedDate { get; set; }
        [DataMember]
        public int? StockAdjustmentId { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class StockCountHierarchy
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int StockCountId { get; set; }
        [DataMember]
        public int HierarchyLevelId { get; set; }
        [DataMember]
        public int? HierarchyTagId { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class StockCountProduct
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int StockCountId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int? StartStockOnHand { get; set; }
        [DataMember]
        public int? Count { get; set; }
        [DataMember]
        public int? SystemAdjustment { get; set; }
        [DataMember]
        public int VerifiedById { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string Hierarchy { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class StockRequisitionProduct
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        public int BookingId { get; set; }
        [DataMember]
        public int QuantityCancelled { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
        [DataMember]
        public DateTime? CompletedOn { get; set; }
        [DataMember]
        public int WarehouseLocationId { get; set; }
        [DataMember]
        public int ReceivingLocationId { get; set; }
        [DataMember]
        public int CreatedById { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class StockTransfer
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int SendingLocationId { get; set; }
        [DataMember]
        public int ReceivingLocationId { get; set; }
        [DataMember]
        public int? ViaLocationId { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public DateTime? OriginalPrint { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public int CreatedById { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class StockTransferMovement
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int? BookingId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int SendingLocationId { get; set; }
        [DataMember]
        public int ReceivingLocationId { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public DateTime DateProcessed { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class StockTransferProduct
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int StockTransferId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        public int BookingId { get; set; }
        [DataMember]
        public int QuantityCancelled { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
        [DataMember]
        public DateTime? CompletedOn { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class StockValuationSnapshot
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int? ProductId { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public int? StockOnHandQuantity { get; set; }
        [DataMember]
        public decimal StockOnHandValue { get; set; }
        [DataMember]
        public decimal StockOnHandSalesValue { get; set; }
        [DataMember]
        public int? SnapshotDateId { get; set; }
        [DataMember]
        public decimal CashPrice { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class Supplier
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string AddressLine1 { get; set; }
        [DataMember]
        public string AddressLine2 { get; set; }
        [DataMember]
        public string City { get; set; }
        [DataMember]
        public string PostCode { get; set; }
        [DataMember]
        public string PaymentTerms { get; set; }
        [DataMember]
        public string OrderEmail { get; set; }
        [DataMember]
        public string Contacts { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public int Status { get; set; }
        [DataMember]
        public string Code { get; set; }
        [DataMember]
        public string Country { get; set; }
        [DataMember]
        public string Tags { get; set; }
        [DataMember]
        public string Currency { get; set; }
        [DataMember]
        public string State { get; set; }
        /// <summary>
        /// Author : Rahul Dubey
        /// Date   : 15/02/2019
        /// CR     : #Ashley
        /// Details: "LeadTime" will Capture Lead time of vendor in number of Day's.
        /// </summary>
        [DataMember]
        public int LeadTime { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class SupplierStatus
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string Name { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class TaxRate
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public decimal Rate { get; set; }
        [DataMember]
        public DateTime EffectiveDate { get; set; }
        [DataMember]
        public int? ProductId { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class TransactionType
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string TransactionCode { get; set; }
        [DataMember]
        public string DebitAccount { get; set; }
        [DataMember]
        public string CreditAccount { get; set; }
        [DataMember]
        public bool SplitDebitByDepartment { get; set; }
        [DataMember]
        public bool SplitCreditByDepartment { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class VendorReturn
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int GoodsReceiptId { get; set; }
        [DataMember]
        public int? CreatedById { get; set; }
        [DataMember]
        public int? ApprovedById { get; set; }
        [DataMember]
        public string CreatedBy { get; set; }
        [DataMember]
        public string ApprovedBy { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public DateTime? ApprovedDate { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string ReceiptType { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class VendorReturnProduct
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int VendorReturnId { get; set; }
        [DataMember]
        public int GoodsReceiptProductId { get; set; }
        [DataMember]
        public int QuantityReturned { get; set; }
        [DataMember]
        public string Comments { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class GoodsReceiptResume
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ReferenceNumberCsl { get; set; }
        [DataMember]
        public DateTime DateReceived { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public DateTime Date { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public decimal? LastLandedCost { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int VendorId { get; set; }
        [DataMember]
        public string VendorName { get; set; }
        [DataMember]
        public int PurchaseOrderId { get; set; }
        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public string Status { get; set; }
        [DataMember]
        public int ReceivingLocationId { get; set; }
        [DataMember]
        public int? QuantityCancelled { get; set; }
        [DataMember]
        public int? QuantityOrdered { get; set; }
        [DataMember]
        public int ReceiptProductId { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class ProductStaging
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string ProductType { get; set; }

        [DataMember]
        public string Tags { get; set; }
        [DataMember]
        public string StoreTypes { get; set; }
        [DataMember]
        public string POSDescription { get; set; }
        [DataMember]
        public string Attributes { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public DateTime LastUpdatedDate { get; set; }
        [DataMember]
        public int Status { get; set; }
        [DataMember]
        public bool PriceTicket { get; set; }
        [DataMember]
        public string SKUStatus { get; set; }
        [DataMember]
        public string CorporateUPC { get; set; }
        [DataMember]
        public string VendorUPC { get; set; }
        [DataMember]
        public string VendorStyleLong { get; set; }
        [DataMember]
        public string CountryOfOrigin { get; set; }
        [DataMember]
        public int? VendorWarranty { get; set; }
        [DataMember]
        public string ReplacingTo { get; set; }
        [DataMember]
        public string Features { get; set; }
        [DataMember]
        public int? BrandId { get; set; }
        [DataMember]
        public int? PrimaryVendorId { get; set; }
        [DataMember]
        public DateTime LastStatusChangeDate { get; set; }
        [DataMember]
        public DateTime? OnlineDateAdded { get; set; }
        [DataMember]
        public bool LabelRequired { get; set; }
        [DataMember]
        public int BoxCount { get; set; }
        [DataMember]
        public string ProductAction { get; set; }
        [DataMember]
        public int? CreatedById { get; set; }
        [DataMember]
        public DateTime? ExternalCreationDate { get; set; }
        [DataMember]
        public string MagentoExportType { get; set; }
        [DataMember]
        public string BrandCode { get; set; }
        [DataMember]
        public string BrandName { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class ProductHierarchyStaging
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int HierarchyTagId { get; set; }
        [DataMember]
        public int HierarchyLevelId { get; set; }
    }


    [Serializable]
    [DataContract]
    public partial class SucrBase
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string SummaryType { get; set; }
        [DataMember]
        public int Units { get; set; }
        [DataMember]
        public decimal Value { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<AbbreviatedStockExportView> AbbreviatedStockExportView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class AbbreviatedStockExportView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string VendorName { get; set; }
        [DataMember]
        public string VendorUPC { get; set; }
        [DataMember]
        public int StockOnHand { get; set; }
        [DataMember]
        public decimal? RegularPrice { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public decimal LastLandedCost { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<AllocatedStockView> AllocatedStockView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class AllocatedStockView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public int StockOnHand { get; set; }
        [DataMember]
        public decimal? StockOnHandValue { get; set; }
        [DataMember]
        public int StockAvailable { get; set; }
        [DataMember]
        public decimal? StockAvailableValue { get; set; }
        [DataMember]
        public int? StockAllocated { get; set; }
        [DataMember]
        public decimal? StockAllocatedValue { get; set; }
        [DataMember]
        public string Reference { get; set; }
        [DataMember]
        public DateTime DateAllocated { get; set; }
        [DataMember]
        public bool LocationIsWarehouse { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<BuyerSalesHistoryReportView> BuyerSalesHistoryReportView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class BuyerSalesHistoryReportView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string ProductType { get; set; }
        [DataMember]
        public string PreviousProductType { get; set; }
        [DataMember]
        public string BrandName { get; set; }
        [DataMember]
        public string Vendor { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public bool Warehouse { get; set; }
        [DataMember]
        public int? StockOnHand { get; set; }
        [DataMember]
        public int? StockOnOrder { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public decimal? taxrate { get; set; }
        [DataMember]
        public string Year { get; set; }
        [DataMember]
        public int? NumericYear { get; set; }
        [DataMember]
        public DateTime? StartDate { get; set; }
        [DataMember]
        public DateTime? EndDate { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<BuyerSalesHistoryView> BuyerSalesHistoryView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class BuyerSalesHistoryView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public string Year { get; set; }
        [DataMember]
        public int? NumericYear { get; set; }
        [DataMember]
        public string Month { get; set; }
        [DataMember]
        public int? NumericMonth { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public decimal? Discount { get; set; }
        [DataMember]
        public decimal? Tax { get; set; }
        [DataMember]
        public int? SalesVolume { get; set; }
        [DataMember]
        public decimal? SalesValue { get; set; }
        [DataMember]
        public decimal? TotalCost { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<CintOrderCostView> CintOrderCostView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class CintOrderCostView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int RunNo { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public string PrimaryReference { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string SaleLocation { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string StockLocation { get; set; }
        [DataMember]
        public string ParentSku { get; set; }
        [DataMember]
        public DateTime TransactionDate { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public decimal? Tax { get; set; }
        [DataMember]
        public string SecondaryReference { get; set; }
        [DataMember]
        public string ReferenceType { get; set; }
        [DataMember]
        public decimal? Discount { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int? ParentId { get; set; }
        [DataMember]
        public int StockLocationId { get; set; }
        [DataMember]
        public int SalesLocationId { get; set; }
        [DataMember]
        public decimal? AverageWeightedCost { get; set; }
        [DataMember]
        public int? PromotionId { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ComboView> ComboView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ComboView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public int Status { get; set; }
        [DataMember]
        public DateTime StartDate { get; set; }
        [DataMember]
        public DateTime EndDate { get; set; }
        [DataMember]
        public DateTime LastUpdatedDate { get; set; }
        [DataMember]
        public bool PriceTicket { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public string Tags { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ComboPriceView> ComboPriceView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ComboPriceView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ComboProductId { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public decimal? RegularPrice { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public decimal? DutyFreePrice { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public int? StockAvailable { get; set; }
        [DataMember]
        public int ComboId { get; set; }
        [DataMember]
        public decimal? TaxRate { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ComboProductView> ComboProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ComboProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ComboProductId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int ComboId { get; set; }
        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public int? StockAvailable { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public decimal? RegularPrice { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public decimal? DutyFreePrice { get; set; }
        [DataMember]
        public decimal? SupplierCost { get; set; }
        [DataMember]
        public string SupplierCurrency { get; set; }
        [DataMember]
        public decimal? AverageWeightedCost { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public DateTime? PriceEffectiveDate { get; set; }
        [DataMember]
        public decimal? TaxRate { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ComponentView> ComponentView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ComponentView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int ParentId { get; set; }
        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public int Quantity { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<CostPriceView> CostPriceView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class CostPriceView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public decimal SupplierCost { get; set; }
        [DataMember]
        public decimal? LastLandedCost { get; set; }
        [DataMember]
        public decimal? AverageWeightedCost { get; set; }
        [DataMember]
        public string SupplierCurrency { get; set; }
        [DataMember]
        public DateTime? LastLandedCostUpdated { get; set; }
        [DataMember]
        public DateTime? AverageWeightedCostUpdated { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<CurrentCostPriceView> CurrentCostPriceView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class CurrentCostPriceView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public decimal SupplierCost { get; set; }
        [DataMember]
        public decimal LastLandedCost { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        public string SupplierCurrency { get; set; }
        [DataMember]
        public DateTime LastLandedCostUpdated { get; set; }
        [DataMember]
        public DateTime? AverageWeightedCostUpdated { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<CurrentPriceByLocationView> CurrentPriceByLocationView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class CurrentPriceByLocationView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string SalesId { get; set; }
        [DataMember]
        public decimal? RegularPrice { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public decimal? DutyFreePrice { get; set; }
        [DataMember]
        public decimal? TaxRate { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<CurrentRetailPriceView> CurrentRetailPriceView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class CurrentRetailPriceView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public DateTime? EffectiveDate { get; set; }
        [DataMember]
        public decimal? RegularPrice { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public decimal? DutyFreePrice { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public decimal? TaxRate { get; set; }
        [DataMember]
        public string Name { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<CurrentStockPriceByLocationView> CurrentStockPriceByLocationView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class CurrentStockPriceByLocationView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string SalesId { get; set; }
        [DataMember]
        public decimal? RegularPrice { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public decimal? DutyFreePrice { get; set; }
        [DataMember]
        public decimal? TaxRate { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<DatesView> DatesView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class DatesView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int DateKey { get; set; }
        [DataMember]
        public DateTime FullDateAlternateKey { get; set; }
        [DataMember]
        public byte DayNumberOFWeek { get; set; }
        [DataMember]
        public string DayNameOfWeek { get; set; }
        [DataMember]
        public byte DayNumberOfMonth { get; set; }
        [DataMember]
        public short DayOfFiscalYear { get; set; }
        [DataMember]
        public short DayOfCalendarYear { get; set; }
        [DataMember]
        public byte CalendarWeek { get; set; }
        [DataMember]
        public byte FiscalWeek { get; set; }
        [DataMember]
        public string MonthName { get; set; }
        [DataMember]
        public byte CalendarPeriod { get; set; }
        [DataMember]
        public byte FiscalPeriod { get; set; }
        [DataMember]
        public short CalendarYear { get; set; }
        [DataMember]
        public short FiscalYear { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<PriceByLocationView> PriceByLocationView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class PriceByLocationView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string SalesId { get; set; }
        [DataMember]
        public decimal? RegularPrice { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public decimal? DutyFreePrice { get; set; }
        [DataMember]
        public decimal? TaxRate { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ForceGoodsReceiptIndexView> ForceGoodsReceiptIndexView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ForceGoodsReceiptIndexView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int ReceiptId { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public DateTime? CostConfirmed { get; set; }
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public string Vendor { get; set; }
        [DataMember]
        public string VendorDeliveryNumber { get; set; }
        [DataMember]
        public string VendorInvoiceNumber { get; set; }
        [DataMember]
        public string CreatedBy { get; set; }
        [DataMember]
        public string ApprovedBy { get; set; }
        [DataMember]
        public string ReceivedBy { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public DateTime? DateApproved { get; set; }
        [DataMember]
        public DateTime DateReceived { get; set; }
        [DataMember]
        public string Currency { get; set; }
        [DataMember]
        public decimal? TotalCost { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ForceMerchandiseStockLevelsView> ForceMerchandiseStockLevelsView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ForceMerchandiseStockLevelsView
    {
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string ProductType { get; set; }
        [DataMember]

        public string Tags { get; set; }
        [DataMember]
        public string StoreTypes { get; set; }
        [DataMember]
        public string PrimaryVendor { get; set; }
        [DataMember]
        public string Suppliers { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public string Status { get; set; }
        [DataMember]
        public string LocationNumber { get; set; }
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public bool Warehouse { get; set; }
        [DataMember]
        public bool? VirtualWarehouse { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public string Condition { get; set; }
        [DataMember]
        public int StockAvailable { get; set; }
        [DataMember]
        public int StockOnHand { get; set; }
        [DataMember]
        public int StockOnOrder { get; set; }
        [DataMember]
        public int? StockAllocated { get; set; }
        [DataMember]
        public decimal? AverageWeightedCost { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ForceMerchandiseProductEnquiryIndexView> ForceMerchandiseProductEnquiryIndexView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ForceMerchandiseProductEnquiryIndexView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string POSDescription { get; set; }
        [DataMember]
        public string ProductType { get; set; }
        [DataMember]
        public string PreviousProductType { get; set; }
        [DataMember]
        public string Tags { get; set; }
        [DataMember]
        public string StoreTypes { get; set; }
        [DataMember]
        public string PrimaryVendor { get; set; }
        [DataMember]
        public string Suppliers { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public string Status { get; set; }
        [DataMember]
        public string Hierarchy { get; set; }
        [DataMember]
        public string LevelTags { get; set; }
        [DataMember]
        public string Condition { get; set; }
        [DataMember]
        public int? StockAvailable { get; set; }
        [DataMember]
        public int? StockOnHand { get; set; }
        [DataMember]
        public int? StockOnOrder { get; set; }
        [DataMember]
        public int? StockAllocated { get; set; }
        [DataMember]
        public bool LabelRequired { get; set; }
        [DataMember]
        public string CorporateUPC { get; set; }
        [DataMember]
        public string VendorUPC { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ForcePromotionIndexView> ForcePromotionIndexView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ForcePromotionIndexView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int PromotionId { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public DateTime StartDate { get; set; }
        [DataMember]
        public DateTime EndDate { get; set; }
        [DataMember]
        public string PromotionType { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public string Hierarchy { get; set; }
        [DataMember]
        public int? ProductId { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ForcePurchaseOrderIndexView> ForcePurchaseOrderIndexView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ForcePurchaseOrderIndexView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int VendorId { get; set; }
        [DataMember]
        public string Vendor { get; set; }
        [DataMember]
        public string ReceivingLocation { get; set; }
        [DataMember]
        public string ReferenceNumbers { get; set; }
        [DataMember]
        public string Status { get; set; }
        [DataMember]
        public string CreatedBy { get; set; }
        [DataMember]
        public string TotalCost { get; set; }
        [DataMember]
        public string CorporatePoNumber { get; set; }
        [DataMember]
        public string OriginSystem { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<GoodsOnLoanSearchView> GoodsOnLoanSearchView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class GoodsOnLoanSearchView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int GoodsOnLoanId { get; set; }
        [DataMember]
        public int StockLocationId { get; set; }
        [DataMember]
        public string StockLocation { get; set; }
        [DataMember]
        public DateTime ExpectedCollectionDate { get; set; }
        [DataMember]
        public DateTime? CollectedDate { get; set; }
        [DataMember]
        public DateTime CreatedOn { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string BusinessName { get; set; }
        [DataMember]
        public string CustomerId { get; set; }
        [DataMember]
        public string Status { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public decimal? TotalCost { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<GoodsOnLoanProductView> GoodsOnLoanProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class GoodsOnLoanProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int GoodsOnLoanId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string Brand { get; set; }
        [DataMember]
        public string CorporateUPC { get; set; }
        [DataMember]
        public string Category { get; set; }
        [DataMember]
        public string Model { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<GoodsReceiptAllProductView> GoodsReceiptAllProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class GoodsReceiptAllProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int GoodsReceiptId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public DateTime DateReceived { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<GoodsReceiptDirectProductView> GoodsReceiptDirectProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class GoodsReceiptDirectProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int GoodsReceiptDirectId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
        [DataMember]
        public decimal UnitLandedCost { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public int LocationId { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<GoodsReceiptProductView> GoodsReceiptProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class GoodsReceiptProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int GoodsReceiptId { get; set; }
        [DataMember]
        public DateTime? CostConfirmed { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public DateTime DateReceived { get; set; }
        [DataMember]
        public int PurchaseOrderProductId { get; set; }
        [DataMember]
        public int PurchaseOrderId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public DateTime? EstimatedDeliveryDate { get; set; }
        [DataMember]
        public int VendorId { get; set; }
        [DataMember]
        public string Vendor { get; set; }
        [DataMember]
        public string Currency { get; set; }
        [DataMember]
        public string VendorType { get; set; }
        [DataMember]
        public string ProductCode { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public int QuantityOrdered { get; set; }
        [DataMember]
        public decimal LastLandedCost { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
        [DataMember]
        public int QuantityBackOrdered { get; set; }
        [DataMember]
        public int? QuantityCancelled { get; set; }
        [DataMember]
        public string ReasonForCancellation { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<HyperionCurrentPriceView> HyperionCurrentPriceView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class HyperionCurrentPriceView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public string ChainCode { get; set; }
        [DataMember]
        public string ClassCode { get; set; }
        [DataMember]
        public string SalesLocation { get; set; }
        [DataMember]
        public string ClassDescription { get; set; }
        [DataMember]
        public string BrandCode { get; set; }
        [DataMember]
        public string BrandName { get; set; }
        [DataMember]
        public decimal InventorySalePrice { get; set; }
        [DataMember]
        public decimal InventoryCosts { get; set; }
        [DataMember]
        public int InventoryUnits { get; set; }
        [DataMember]
        public int TotalReceived { get; set; }
        [DataMember]
        public decimal TotalCost { get; set; }
        [DataMember]
        public decimal PurchaseSalePrice { get; set; }
        [DataMember]
        public decimal TotalSalesValue { get; set; }
        [DataMember]
        public int TotalSalesUnits { get; set; }
        [DataMember]
        public decimal SalesCostWithoutTax { get; set; }
        [DataMember]
        public decimal TotalReturnsValue { get; set; }
        [DataMember]
        public int TotalReturnsUnits { get; set; }
        [DataMember]
        public decimal InventoryProductMargin { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<HyperionGoodsReceivedView> HyperionGoodsReceivedView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class HyperionGoodsReceivedView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public int? TotalReceived { get; set; }
        [DataMember]
        public decimal? TotalCost { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<HyperionSalesView> HyperionSalesView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class HyperionSalesView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public decimal? TotalSalesValue { get; set; }
        [DataMember]
        public decimal? TotalReturnsValue { get; set; }
        [DataMember]
        public int? TotalSalesUnits { get; set; }
        [DataMember]
        public int? TotalReturnsUnits { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<LocationStockLevelView> LocationStockLevelView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class LocationStockLevelView
    {
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int StockOnHand { get; set; }
        [DataMember]
        public int StockOnOrder { get; set; }
        [DataMember]
        public int StockAvailable { get; set; }
        [DataMember]
        public int? StockAllocated { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationNumber { get; set; }
        [DataMember]
        public string SalesId { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public string StoreType { get; set; }
        [DataMember]
        public bool Warehouse { get; set; }
        [DataMember]
        public bool VirtualWarehouse { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<NegativeStockSnapshotView> NegativeStockSnapshotView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class NegativeStockSnapshotView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public int StockOnHandQuantity { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        public decimal StockOnHandValue { get; set; }
        [DataMember]
        public decimal StockOnHandSalesValue { get; set; }
        [DataMember]
        public int SnapshotDateId { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public string ProductType { get; set; }

        [DataMember]
        public string Tags { get; set; }
        [DataMember]
        public DateTime? DateLastReceived { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<NegativeStockSummaryView> NegativeStockSummaryView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class NegativeStockSummaryView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public int StockOnHandQuantity { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        public decimal StockOnHandValue { get; set; }
        [DataMember]
        public decimal StockOnHandSalesValue { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<NonActiveStatusProgressView> NonActiveStatusProgressView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class NonActiveStatusProgressView
    {
        [DataMember]
        public int Id { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<OrderExportView> OrderExportView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class OrderExportView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string WarehouseNo { get; set; }
        [DataMember]
        public string ItemNo { get; set; }
        [DataMember]
        public string Supplier { get; set; }
        [DataMember]
        public int OrderNo { get; set; }
        [DataMember]
        public DateTime? DeliveryDate { get; set; }
        [DataMember]
        public int OrderQuantity { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<PeriodEndDatesView> PeriodEndDatesView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class PeriodEndDatesView
    {
        [DataMember]
        public short? Id { get; set; }
        [DataMember]
        public short year { get; set; }
        [DataMember]
        public byte period { get; set; }
        [DataMember]
        public DateTime? EndDate { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<PrintLabelView> PrintLabelView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class PrintLabelView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int PurchaseOrderProductId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string ProductType { get; set; }

        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string CorporateUPC { get; set; }
        [DataMember]
        public int BoxCount { get; set; }
        [DataMember]
        public string POSDescription { get; set; }
        [DataMember]
        public string VendorStyleLong { get; set; }
        [DataMember]
        public string BrandName { get; set; }
        [DataMember]
        public string Vendor { get; set; }
        [DataMember]
        public int PurchaseOrderId { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ProductExportView> ProductExportView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ProductExportView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public string WarehouseNo { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string ItemNo { get; set; }
        [DataMember]
        public string SupplierCode { get; set; }
        [DataMember]
        public string ItemDescr1 { get; set; }
        [DataMember]
        public string ItemDescr2 { get; set; }
        [DataMember]
        public decimal? UnitPriceHP { get; set; }
        [DataMember]
        public decimal? UnitPriceCash { get; set; }
        [DataMember]
        public string Category { get; set; }
        [DataMember]
        public string Supplier { get; set; }
        [DataMember]
        public string ProdStatus { get; set; }
        [DataMember]
        public string Warrantable { get; set; }
        [DataMember]
        public string ProdType { get; set; }
        [DataMember]
        public decimal? DutyFreePrice { get; set; }
        [DataMember]
        public string RefCode { get; set; }
        [DataMember]
        public string BarCode { get; set; }
        [DataMember]
        public string LeadTime { get; set; }
        [DataMember]
        public string WarrantyRenewalFlag { get; set; }
        [DataMember]
        public string AssemblyRequired { get; set; }
        [DataMember]
        public string Deleted { get; set; }
        [DataMember]
        public decimal CostPrice { get; set; }
        [DataMember]
        public string SupplierName { get; set; }
        [DataMember]
        public string Class { get; set; }
        [DataMember]
        public string SubClass { get; set; }
        [DataMember]
        public decimal? taxrate { get; set; }
        [DataMember]
        public string Attributes { get; set; }
        [DataMember]
        public string ProductType { get; set; }

    }

    partial class ContextBase
    {
        public virtual DbSet<ProductHierarchyView> ProductHierarchyView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ProductHierarchyView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int LevelId { get; set; }
        [DataMember]
        public string Level { get; set; }
        [DataMember]
        public int TagId { get; set; }
        [DataMember]
        public string Tag { get; set; }
        [DataMember]
        public string Code { get; set; }
        [DataMember]
        public int Status { get; set; }
        [DataMember]
        public string ProductType { get; set; }
        [DataMember]
        public string PreviousProductType { get; set; }
        [DataMember]
        public decimal? FirstYearWarrantyProvision { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<PendingStockOnOrderView> PendingStockOnOrderView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class PendingStockOnOrderView
    {
        [DataMember]
        public int id { get; set; }
        [DataMember]
        public int PurchaseOrderId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public DateTime DeliveryDate { get; set; }
        [DataMember]
        public int? PendingStock { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ProductHierarchyConcatView> ProductHierarchyConcatView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ProductHierarchyConcatView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Hierarchy { get; set; }
        [DataMember]
        public string LevelTags { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ProductMessageView> ProductMessageView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ProductMessageView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public string DepartmentCode { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ProductStockLocationView> ProductStockLocationView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ProductStockLocationView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int StockOnHand { get; set; }
        [DataMember]
        public int StockOnOrder { get; set; }
        [DataMember]
        public int StockAvailable { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public bool Warehouse { get; set; }
        [DataMember]
        public string SalesId { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ProductSupplierView> ProductSupplierView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ProductSupplierView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int SupplierId { get; set; }
        [DataMember]
        public string SupplierName { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<PromotionDetailView> PromotionDetailView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class PromotionDetailView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int PromotionId { get; set; }
        [DataMember]
        public int? ProductId { get; set; }
        [DataMember]
        public string priceType { get; set; }
        [DataMember]
        public DateTime StartDate { get; set; }
        [DataMember]
        public DateTime EndDate { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public string Fascia { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<PromotionProductView> PromotionProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class PromotionProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int PromotionId { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public DateTime StartDate { get; set; }
        [DataMember]
        public DateTime EndDate { get; set; }
        [DataMember]
        public string PromotionType { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public string Hierarchy { get; set; }
        [DataMember]
        public int? ProductId { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string PriceType { get; set; }
        [DataMember]
        public decimal? ValueDiscount { get; set; }
        [DataMember]
        public decimal? PercentDiscount { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<PromotionReportView> PromotionReportView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class PromotionReportView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public int PromotionId { get; set; }
        [DataMember]
        public string PromotionName { get; set; }
        [DataMember]
        public DateTime PromotionStartDate { get; set; }
        [DataMember]
        public int? Quantity { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public decimal? Discount { get; set; }
        [DataMember]
        public decimal? GrossTotal { get; set; }
        [DataMember]
        public decimal? NetTotal { get; set; }
        [DataMember]
        public decimal? AverageWeightedCost { get; set; }
        [DataMember]
        public decimal? PromotionalTotal { get; set; }
        [DataMember]
        public decimal? PromotionalMargin { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ProductsToIndexView> ProductsToIndexView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ProductsToIndexView
    {
        [DataMember]
        public int? Id { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<PromotionHierarchiesToIndex> PromotionHierarchiesToIndex { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class PromotionHierarchiesToIndex
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int PromotionDetailId { get; set; }
        [DataMember]
        public int? LevelId { get; set; }
        [DataMember]
        public int? TagId { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<PurchaseOrderProductStatsView> PurchaseOrderProductStatsView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class PurchaseOrderProductStatsView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int? QuantityPending { get; set; }
        [DataMember]
        public int? QuantityCancelled { get; set; }
        [DataMember]
        public int? QuantityReceived { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RepossessedPriceView> RepossessedPriceView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RepossessedPriceView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int? locationId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public DateTime EffectiveDate { get; set; }
        [DataMember]
        public decimal? RegularPrice { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public decimal? DutyFreePrice { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public decimal? TaxRate { get; set; }
        [DataMember]
        public string Name { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RetailPriceView> RetailPriceView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RetailPriceView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public DateTime? EffectiveDate { get; set; }
        [DataMember]
        public decimal? RegularPrice { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public decimal? DutyFreePrice { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public decimal? TaxRate { get; set; }
        [DataMember]
        public string Name { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RP3ProductExportView> RP3ProductExportView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RP3ProductExportView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string ProductAction { get; set; }
        [DataMember]
        public string User { get; set; }
        [DataMember]
        public DateTime? ExternalCreationDate { get; set; }
        [DataMember]
        public DateTime CreationDate { get; set; }
        [DataMember]
        public string SkuStatusCode { get; set; }
        [DataMember]
        public string SkuType { get; set; }
        [DataMember]
        public string ProductCode { get; set; }
        [DataMember]
        public string CorporateUPC { get; set; }
        [DataMember]
        public string DivisionCode { get; set; }
        [DataMember]
        public string DivisionName { get; set; }
        [DataMember]
        public string DepartmentCode { get; set; }
        [DataMember]
        public string DepartmentName { get; set; }
        [DataMember]
        public string ClassCode { get; set; }
        [DataMember]
        public string ClassName { get; set; }
        [DataMember]
        public string VendorCode { get; set; }
        [DataMember]
        public string VendorName { get; set; }
        [DataMember]
        public string BrandCode { get; set; }
        [DataMember]
        public string BrandName { get; set; }
        [DataMember]
        public string SupplierModel { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public string CurrencyType { get; set; }
        [DataMember]
        public decimal? AverageCost { get; set; }
        [DataMember]
        public decimal? LastReceptionCost { get; set; }
        [DataMember]
        public decimal? LastSupplierCost { get; set; }
        [DataMember]
        public decimal? LowestReceptionCost { get; set; }
        [DataMember]
        public decimal? RetailPrice { get; set; }
        [DataMember]
        public DateTime? LastTransactionDate { get; set; }
        [DataMember]
        public DateTime? LastReceptionDate { get; set; }
        [DataMember]
        public DateTime? LastSalesDate { get; set; }
        [DataMember]
        public string ProductStatus { get; set; }
        [DataMember]
        public string Tags { get; set; }
        [DataMember]
        public string ProductType { get; set; }

        [DataMember]
        public string ReplacingTo { get; set; }
        [DataMember]
        public int? VendorWarranty { get; set; }
        [DataMember]
        public string CountryOfOrigin { get; set; }
        [DataMember]
        public string Incoterm { get; set; }
        [DataMember]
        public string CountryOfDispatch { get; set; }
        [DataMember]
        public string LeadTime { get; set; }
        [DataMember]
        public string Attributes { get; set; }
        [DataMember]
        public string SubjectTax { get; set; }
        [DataMember]
        public decimal? TaxPercentage { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RP3PurchaseOrderView> RP3PurchaseOrderView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RP3PurchaseOrderView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int PONumber { get; set; }
        [DataMember]
        public string VendorCode { get; set; }
        [DataMember]
        public string VendorName { get; set; }
        [DataMember]
        public string ReceivingLocationCode { get; set; }
        [DataMember]
        public string ReceivingLocationName { get; set; }
        [DataMember]
        public string POStatus { get; set; }
        [DataMember]
        public string POType { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public DateTime ExpectedDeliveryDate { get; set; }
        [DataMember]
        public string CorporatePONumber { get; set; }
        [DataMember]
        public string ReferenceNumbers { get; set; }
        [DataMember]
        public decimal? SubTotal { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RP3PurchaseOrderProductView> RP3PurchaseOrderProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RP3PurchaseOrderProductView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int PONumber { get; set; }
        [DataMember]
        public string ProductCode { get; set; }
        [DataMember]
        public int? LineNumber { get; set; }
        [DataMember]
        public int UnitsOrdered { get; set; }
        [DataMember]
        public int? UnitsReceived { get; set; }
        [DataMember]
        public decimal SupplierUnitCost { get; set; }
        [DataMember]
        public string SupplierCurrency { get; set; }
        [DataMember]
        public decimal PreLandedUnitCost { get; set; }
        [DataMember]
        public decimal ActualLandedUnitCost { get; set; }
        [DataMember]
        public decimal UnitPrice { get; set; }
        [DataMember]
        public decimal? SubTotal { get; set; }
        [DataMember]
        public DateTime? CreatedDate { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RP3VendorReturnView> RP3VendorReturnView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RP3VendorReturnView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int RTSNumber { get; set; }
        [DataMember]
        public int GRNNumber { get; set; }
        [DataMember]
        public int PONumber { get; set; }
        [DataMember]
        public string CorporatePONumber { get; set; }
        [DataMember]
        public string VendorCode { get; set; }
        [DataMember]
        public string VendorName { get; set; }
        [DataMember]
        public string ReceivingLocationCode { get; set; }
        [DataMember]
        public string ReceivingLocationName { get; set; }
        [DataMember]
        public string POType { get; set; }
        [DataMember]
        public DateTime TransactionDate { get; set; }
        [DataMember]
        public string SupplierInvoiceNumber { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RP3VendorReturnProductView> RP3VendorReturnProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RP3VendorReturnProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int RTSNumber { get; set; }
        [DataMember]
        public int GRNNumber { get; set; }
        [DataMember]
        public int PONumber { get; set; }
        [DataMember]
        public string ProductCode { get; set; }
        [DataMember]
        public int UnitsReturned { get; set; }
        [DataMember]
        public decimal SupplierUnitCost { get; set; }
        [DataMember]
        public string SupplierCurrency { get; set; }
        [DataMember]
        public decimal PreLandedUnitCost { get; set; }
        [DataMember]
        public decimal LastLandedCost { get; set; }
        [DataMember]
        public decimal? UnitPrice { get; set; }
        [DataMember]
        public DateTime TransactionDate { get; set; }
        [DataMember]
        public int LocationId { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RP3GoodsReceiptView> RP3GoodsReceiptView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RP3GoodsReceiptView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int GRNNumber { get; set; }
        [DataMember]
        public string VendorCode { get; set; }
        [DataMember]
        public string VendorName { get; set; }
        [DataMember]
        public string ReceivingLocationCode { get; set; }
        [DataMember]
        public string ReceivingLocationName { get; set; }
        [DataMember]
        public string POType { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public int PONumber { get; set; }
        [DataMember]
        public string CorporatePONumber { get; set; }
        [DataMember]
        public string SupplierInvoiceNumber { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public string GRNStatus { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RP3GoodsReceiptProductView> RP3GoodsReceiptProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RP3GoodsReceiptProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int GRNNumber { get; set; }
        [DataMember]
        public int PONumber { get; set; }
        [DataMember]
        public string ProductCode { get; set; }
        [DataMember]
        public int UnitsReceived { get; set; }
        [DataMember]
        public decimal SupplierUnitCost { get; set; }
        [DataMember]
        public string SupplierCurrency { get; set; }
        [DataMember]
        public decimal PreLandedUnitCost { get; set; }
        [DataMember]
        public decimal ActualLandedCost { get; set; }
        [DataMember]
        public decimal? UnitPrice { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public int LocationId { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RP3StockAdjustmentView> RP3StockAdjustmentView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RP3StockAdjustmentView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int StockAdjustmentNumber { get; set; }
        [DataMember]
        public string PrimaryReason { get; set; }
        [DataMember]
        public string SecondaryReason { get; set; }
        [DataMember]
        public string ReasonSign { get; set; }
        [DataMember]
        public string LocationCode { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public DateTime TransactionDate { get; set; }
        [DataMember]
        public decimal? ExtendedCost { get; set; }
        [DataMember]
        public decimal? ExtendedPrice { get; set; }
        [DataMember]
        public string Notes { get; set; }
        [DataMember]
        public string AdjustmentStatus { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RP3StockAdjustmentProductView> RP3StockAdjustmentProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RP3StockAdjustmentProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int StockAdjustmentNumber { get; set; }
        [DataMember]
        public string ProductCode { get; set; }
        [DataMember]
        public int UnitQuantity { get; set; }
        [DataMember]
        public decimal UnitCost { get; set; }
        [DataMember]
        public decimal? UnitRetailPrice { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public int LocationId { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RP3StockTransferView> RP3StockTransferView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RP3StockTransferView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public string StockTransferNote { get; set; }
        [DataMember]
        public string TransferType { get; set; }
        [DataMember]
        public string SendingLocationCode { get; set; }
        [DataMember]
        public string SendingLocationName { get; set; }
        [DataMember]
        public int? ViaLocationCode { get; set; }
        [DataMember]
        public string ViaLocationName { get; set; }
        [DataMember]
        public string ReceivingLocationCode { get; set; }
        [DataMember]
        public string ReceivingLocationName { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RP3StockTransferProductView> RP3StockTransferProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RP3StockTransferProductView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public string StockTransferNote { get; set; }
        [DataMember]
        public string ProductCode { get; set; }
        [DataMember]
        public int SendingUnits { get; set; }
        [DataMember]
        public int ReceivingUnits { get; set; }
        [DataMember]
        public decimal UnitCost { get; set; }
        [DataMember]
        public decimal? UnitPrice { get; set; }
        [DataMember]
        public DateTime? DateProcessed { get; set; }
        [DataMember]
        public string SendingLocationId { get; set; }
        [DataMember]
        public string ReceivingLocationId { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<SalesComparisonReportView> SalesComparisonReportView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class SalesComparisonReportView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public string SalesId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public int? BrandId { get; set; }
        [DataMember]
        public string BrandName { get; set; }
        [DataMember]
        public string Tags { get; set; }
        [DataMember]
        public int StockOnHand { get; set; }
        [DataMember]
        public int StockOnOrder { get; set; }
        [DataMember]
        public int? StockRequested { get; set; }
        [DataMember]
        public decimal? CurrentRegularPrice { get; set; }
        [DataMember]
        public decimal? CurrentCashPrice { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string Class { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<SalesView> SalesView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class SalesView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public int? StockLocationId { get; set; }
        [DataMember]
        public string StockLocation { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public int? Quantity { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<SetExportView> SetExportView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class SetExportView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public string Parent { get; set; }
        [DataMember]
        public string Child { get; set; }
        [DataMember]
        public int Quantity { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<SetLocationView> SetLocationView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class SetLocationView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int SetId { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public DateTime EffectiveDate { get; set; }
        [DataMember]
        public decimal? RegularPrice { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public decimal? DutyFreePrice { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<SetProductView> SetProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class SetProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int SetProductId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int SetId { get; set; }
        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public decimal? RegularPrice { get; set; }
        [DataMember]
        public decimal? CashPrice { get; set; }
        [DataMember]
        public decimal? DutyFreePrice { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public DateTime? PriceEffectiveDate { get; set; }
        [DataMember]
        public decimal? TaxRate { get; set; }
        [DataMember]
        public decimal? SupplierCost { get; set; }
        [DataMember]
        public decimal? AverageWeightedCost { get; set; }
        [DataMember]
        public decimal? LastLandedCost { get; set; }
        [DataMember]
        public string SupplierCurrency { get; set; }
        [DataMember]
        public string LocationName { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<SetView> SetView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class SetView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockAdjustmentReasonView> StockAdjustmentReasonView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockAdjustmentReasonView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public string PrimaryReason { get; set; }
        [DataMember]
        public DateTime? PrimaryReasonDateDeleted { get; set; }
        [DataMember]
        public int? SecondaryReasonId { get; set; }
        [DataMember]
        public int PrimaryReasonId { get; set; }
        [DataMember]
        public string SecondaryReason { get; set; }
        [DataMember]
        public string TransactionCode { get; set; }
        [DataMember]
        public string DebitAccount { get; set; }
        [DataMember]
        public string CreditAccount { get; set; }
        [DataMember]
        public bool? SplitDebitByDepartment { get; set; }
        [DataMember]
        public bool? SplitCreditByDepartment { get; set; }
        [DataMember]
        public bool? DefaultForCountAdjustment { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockAdjustmentSearchView> StockAdjustmentSearchView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockAdjustmentSearchView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int StockAdjustmentId { get; set; }
        [DataMember]
        public int PrimaryReasonId { get; set; }
        [DataMember]
        public string PrimaryReason { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public int SecondaryReasonId { get; set; }
        [DataMember]
        public string SecondaryReason { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public int Approved { get; set; }
        [DataMember]
        public string Status { get; set; }
        [DataMember]
        public decimal? TotalCost { get; set; }
        [DataMember]
        public string Comments { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockAdjustmentView> StockAdjustmentView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockAdjustmentView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public string SalesLocationId { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public int PrimaryReasonId { get; set; }
        [DataMember]
        public string PrimaryReason { get; set; }
        [DataMember]
        public int SecondaryReasonId { get; set; }
        [DataMember]
        public string SecondaryReason { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public DateTime? AuthorisedDate { get; set; }
        [DataMember]
        public int? AuthorisedById { get; set; }
        [DataMember]
        public string AuthorisedBy { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public int? CreatedById { get; set; }
        [DataMember]
        public string CreatedBy { get; set; }
        [DataMember]
        public DateTime? OriginalPrint { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockAdjustmentProductView> StockAdjustmentProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockAdjustmentProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int StockAdjustmentId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string Sku { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockAllocationProductView> StockAllocationProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockAllocationProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ReceivingLocationId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        public int BookingId { get; set; }
        [DataMember]
        public int QuantityCancelled { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
        [DataMember]
        public DateTime? CompletedOn { get; set; }
        [DataMember]
        public int WarehouseLocationId { get; set; }
        [DataMember]
        public int CreatedById { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public int? StockAvailable { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string Brand { get; set; }
        [DataMember]
        public string CorporateUPC { get; set; }
        [DataMember]
        public string Category { get; set; }
        [DataMember]
        public string Model { get; set; }
        [DataMember]
        public string WarehouseSalesLocationId { get; set; }
        [DataMember]
        public string ReceivingSalesLocationId { get; set; }
        [DataMember]
        public string WarehouseLocation { get; set; }
        [DataMember]
        public string ReceivingLocation { get; set; }
        [DataMember]
        public string CreatedBy { get; set; }
        [DataMember]
        public string Status { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockCountHierarchyView> StockCountHierarchyView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockCountHierarchyView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int StockCountId { get; set; }
        [DataMember]
        public int HierarchyLevelId { get; set; }
        [DataMember]
        public string Level { get; set; }
        [DataMember]
        public int? HierarchyTagId { get; set; }
        [DataMember]
        public string Tag { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockCountPreviewView> StockCountPreviewView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockCountPreviewView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public int? StockOnHand { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public int HierarchyLevelId { get; set; }
        [DataMember]
        public int HierarchyTagId { get; set; }
        [DataMember]
        public int? LastVariance { get; set; }
        [DataMember]
        public DateTime? LastCountDate { get; set; }
        [DataMember]
        public int? StockCountId { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockCountProductView> StockCountProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockCountProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int StockCountId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string Attributes { get; set; }
        [DataMember]
        public string CorporateUPC { get; set; }
        [DataMember]
        public int? StartStockOnHand { get; set; }
        [DataMember]
        public int? Count { get; set; }
        [DataMember]
        public int? SystemAdjustment { get; set; }
        [DataMember]
        public int? Variance { get; set; }
        [DataMember]
        public int? NetMovement { get; set; }
        [DataMember]
        public int CurrentStockOnHand { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public DateTime CountDate { get; set; }
        [DataMember]
        public DateTime? ClosedDate { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public string Hierarchy { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockDeliveryDateView> StockDeliveryDateView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockDeliveryDateView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int ReceivingLocationId { get; set; }
        [DataMember]
        public DateTime? EstimatedDeliveryDate { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockMovementReportView> StockMovementReportView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockMovementReportView
    {
        [DataMember]
        public long? id { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string Class { get; set; }
        [DataMember]
        public string TransactionId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string BrandName { get; set; }
        [DataMember]
        public string ProductTags { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public string Narration { get; set; }
        [DataMember]
        public int? Quantity { get; set; }
        [DataMember]
        public DateTime? Date { get; set; }
        [DataMember]
        public DateTime? DateUTC { get; set; }
        [DataMember]
        public DateTime DateProcessedUTC { get; set; }
        [DataMember]
        public int? UserId { get; set; }
        [DataMember]
        public string User { get; set; }
        [DataMember]
        public bool? IsDirect { get; set; }
        [DataMember]
        public int? SendingLocationId { get; set; }
        [DataMember]
        public int? ReceivingLocationId { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockReceivedReportView> StockReceivedReportView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockReceivedReportView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string Class { get; set; }
        [DataMember]
        public int ReferenceNumberCsl { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public DateTime Date { get; set; }
        [DataMember]
        public DateTime? UTCDate { get; set; }
        [DataMember]
        public int? Quantity { get; set; }
        [DataMember]
        public decimal? LastLandedCost { get; set; }
        [DataMember]
        public int VendorId { get; set; }
        [DataMember]
        public int PurchaseOrderId { get; set; }
        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public string Vendor { get; set; }
        [DataMember]
        public int StockOnHand { get; set; }
        [DataMember]
        public decimal? ExtendedLandedCost { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockReceivedReportStockCountView> StockReceivedReportStockCountView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockReceivedReportStockCountView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int PurchaseOrderId { get; set; }
        [DataMember]
        public int ReferenceNumberCsl { get; set; }
        [DataMember]
        public int? ReceivedStock { get; set; }
        [DataMember]
        public int? OrderedStock { get; set; }
        [DataMember]
        public int? QuantityCancelled { get; set; }
        [DataMember]
        public int? Pending { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockRequisitionProductView> StockRequisitionProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockRequisitionProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        public int BookingId { get; set; }
        [DataMember]
        public int QuantityCancelled { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
        [DataMember]
        public DateTime? CompletedOn { get; set; }
        [DataMember]
        public int WarehouseLocationId { get; set; }
        [DataMember]
        public int ReceivingLocationId { get; set; }
        [DataMember]
        public int CreatedById { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string Brand { get; set; }
        [DataMember]
        public string CorporateUPC { get; set; }
        [DataMember]
        public string Category { get; set; }
        [DataMember]
        public string Model { get; set; }
        [DataMember]
        public string WarehouseSalesLocationId { get; set; }
        [DataMember]
        public string ReceivingSalesLocationId { get; set; }
        [DataMember]
        public string WarehouseLocation { get; set; }
        [DataMember]
        public string ReceivingLocation { get; set; }
        [DataMember]
        public string CreatedBy { get; set; }
        [DataMember]
        public string Status { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockTransferView> StockTransferView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockTransferView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int SendingLocationId { get; set; }
        [DataMember]
        public int ReceivingLocationId { get; set; }
        [DataMember]
        public int? ViaLocationId { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public DateTime? OriginalPrint { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public int CreatedById { get; set; }
        [DataMember]
        public string CreatedBy { get; set; }
        [DataMember]
        public decimal? Total { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockTransferProductView> StockTransferProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockTransferProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int StockTransferId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        public int BookingId { get; set; }
        [DataMember]
        public int QuantityCancelled { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
        [DataMember]
        public DateTime? CompletedOn { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string Brand { get; set; }
        [DataMember]
        public string CorporateUPC { get; set; }
        [DataMember]
        public string Category { get; set; }
        [DataMember]
        public string Model { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockValuationSummaryView> StockValuationSummaryView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockValuationSummaryView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public int StockOnHandQuantity { get; set; }
        [DataMember]
        public decimal StockOnHandValue { get; set; }
        [DataMember]
        public decimal StockOnHandSalesValue { get; set; }
        [DataMember]
        public decimal CashPrice { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockCountView> StockCountView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockCountView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public DateTime CountDate { get; set; }
        [DataMember]
        public int CreatedById { get; set; }
        [DataMember]
        public string CreatedBy { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public int? CancelledById { get; set; }
        [DataMember]
        public int? StockAdjustmentId { get; set; }
        [DataMember]
        public string CancelledBy { get; set; }
        [DataMember]
        public DateTime? CancelledDate { get; set; }
        [DataMember]
        public string StartedBy { get; set; }
        [DataMember]
        public int? StartedById { get; set; }
        [DataMember]
        public DateTime? StartedDate { get; set; }
        [DataMember]
        public DateTime? ClosedDate { get; set; }
        [DataMember]
        public int? ClosedById { get; set; }
        [DataMember]
        public string ClosedBy { get; set; }
        [DataMember]
        public string Status { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockExportView> StockExportView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockExportView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string WarehouseNo { get; set; }
        [DataMember]
        public string ItemNo { get; set; }
        [DataMember]
        public int StockFactAvailable { get; set; }
        [DataMember]
        public int StockActual { get; set; }
        [DataMember]
        public int StockOnOrder { get; set; }
        [DataMember]
        public string StockLastPlannedDate { get; set; }
        [DataMember]
        public string StockDamage { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<SummaryUpdateControlReportView> SummaryUpdateControlReportView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class SummaryUpdateControlReportView
    {
        [DataMember]
        public long? id { get; set; }
        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public string TransactionType { get; set; }
        [DataMember]
        public string Reference { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public int? Units { get; set; }
        [DataMember]
        public decimal? Value { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string SalesId { get; set; }
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public short? RunNumber { get; set; }
        [DataMember]
        public string ProductType { get; set; }

        [DataMember]
        public int ProductMessageId { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<TagView> TagView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class TagView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int LevelId { get; set; }
        [DataMember]
        public string Code { get; set; }
        [DataMember]
        public string LevelName { get; set; }
        [DataMember]
        public string TagName { get; set; }
        [DataMember]
        public decimal? FirstYearWarrantyProvision { get; set; }
        [DataMember]
        public int? AgedAfter { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<TicketExtractView> TicketExtractView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class TicketExtractView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string ProductType { get; set; }

        [DataMember]
        public string SKU { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string POSDescription { get; set; }
        [DataMember]
        public string VendorStyleLong { get; set; }
        [DataMember]
        public string BrandName { get; set; }
        [DataMember]
        public string Features { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public string EffectiveDate { get; set; }
        [DataMember]
        public decimal? CurrentCashPrice { get; set; }
        [DataMember]
        public decimal? CurrentRegularPrice { get; set; }
        [DataMember]
        public decimal? TaxRate { get; set; }
        [DataMember]
        public int? SetId { get; set; }
        [DataMember]
        public string SetCode { get; set; }
        [DataMember]
        public string SetDescription { get; set; }
        [DataMember]
        public decimal? NormalCashPrice { get; set; }
        [DataMember]
        public decimal? NormalRegularPrice { get; set; }
        [DataMember]
        public decimal? DutyFreePrice { get; set; }
        [DataMember]
        public string Hierarchy { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<TopSkuReportView> TopSkuReportView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class TopSkuReportView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string StoreTypes { get; set; }
        [DataMember]
        public string BrandName { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string Tags { get; set; }
        [DataMember]
        public DateTime TransactionDate { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int QuantityDelivered { get; set; }
        [DataMember]
        public decimal ValueDelivered { get; set; }
        [DataMember]
        public decimal NetValueDelivered { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<UserPermissionsView> UserPermissionsView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class UserPermissionsView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int UserId { get; set; }
        [DataMember]
        public short BranchNo { get; set; }
        [DataMember]
        public string Login { get; set; }
        [DataMember]
        public string Password { get; set; }
        [DataMember]
        public DateTime LastChangePassword { get; set; }
        [DataMember]
        public string FirstName { get; set; }
        [DataMember]
        public string LastName { get; set; }
        [DataMember]
        public string ExternalLogin { get; set; }
        [DataMember]
        public long? LegacyPassword { get; set; }
        [DataMember]
        public string eMail { get; set; }
        [DataMember]
        public bool Locked { get; set; }
        [DataMember]
        public string FullName { get; set; }
        [DataMember]
        public bool RequireChangePassword { get; set; }
        [DataMember]
        public string FactEmployeeNo { get; set; }
        [DataMember]
        public string AddressLine1 { get; set; }
        [DataMember]
        public string AddressLine2 { get; set; }
        [DataMember]
        public string AddressLine3 { get; set; }
        [DataMember]
        public string PostCode { get; set; }
        [DataMember]
        public string Phone { get; set; }
        [DataMember]
        public string PhoneAlternate { get; set; }
        [DataMember]
        public int PermissionId { get; set; }
        [DataMember]
        public string PermissionName { get; set; }
        [DataMember]
        public string PermissionDescription { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<VendorReturnDirectNewView> VendorReturnDirectNewView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class VendorReturnDirectNewView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int GoodsReceiptProductId { get; set; }
        [DataMember]
        public int GoodsReceiptId { get; set; }
        [DataMember]
        public int? VendorId { get; set; }
        [DataMember]
        public string Vendor { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string ProductCode { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
        [DataMember]
        public decimal UnitLandedCost { get; set; }
        [DataMember]
        public int? QuantityPreviouslyReturned { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<VendorReturnDirectProductView> VendorReturnDirectProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class VendorReturnDirectProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int GoodsReceiptProductId { get; set; }
        [DataMember]
        public int GoodsReceiptId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string ProductCode { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
        [DataMember]
        public decimal LastLandedCost { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public int? VendorReturnId { get; set; }
        [DataMember]
        public DateTime? CreatedDate { get; set; }
        [DataMember]
        public int GoodsReceiptLocationId { get; set; }
        [DataMember]
        public int? VendorId { get; set; }
        [DataMember]
        public string Vendor { get; set; }
        [DataMember]
        public int QuantityReturned { get; set; }
        [DataMember]
        public int? QuantityPreviouslyReturned { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<VendorReturnNewView> VendorReturnNewView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class VendorReturnNewView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int GoodsReceiptProductId { get; set; }
        [DataMember]
        public int GoodsReceiptId { get; set; }
        [DataMember]
        public int PurchaseOrderProductId { get; set; }
        [DataMember]
        public int PurchaseOrderId { get; set; }
        [DataMember]
        public int VendorId { get; set; }
        [DataMember]
        public string Vendor { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string ProductCode { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
        [DataMember]
        public int? QuantityPreviouslyReturned { get; set; }
        [DataMember]
        public decimal LastLandedCost { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<VendorReturnProductView> VendorReturnProductView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class VendorReturnProductView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int? GoodsReceiptProductId { get; set; }
        [DataMember]
        public int GoodsReceiptId { get; set; }
        [DataMember]
        public int PurchaseOrderProductId { get; set; }
        [DataMember]
        public int PurchaseOrderId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string ProductCode { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
        [DataMember]
        public decimal LastLandedCost { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public int? VendorReturnId { get; set; }
        [DataMember]
        public DateTime? CreatedDate { get; set; }
        [DataMember]
        public int GoodsReceiptLocationId { get; set; }
        [DataMember]
        public int VendorId { get; set; }
        [DataMember]
        public string Vendor { get; set; }
        [DataMember]
        public int QuantityReturned { get; set; }
        [DataMember]
        public int? QuantityPreviouslyReturned { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<VendorReturnSearchView> VendorReturnSearchView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class VendorReturnSearchView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int? VendorReturnId { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public int? VendorId { get; set; }
        [DataMember]
        public string Vendor { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public int Approved { get; set; }
        [DataMember]
        public string Status { get; set; }
        [DataMember]
        public int GoodsReceiptId { get; set; }
        [DataMember]
        public decimal? TotalCost { get; set; }
        [DataMember]
        public string GoodsReceiptType { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<VendorReturnView> VendorReturnView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class VendorReturnView
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public DateTime CreatedDate { get; set; }
        [DataMember]
        public int? CreatedById { get; set; }
        [DataMember]
        public string CreatedBy { get; set; }
        [DataMember]
        public string ApprovedBy { get; set; }
        [DataMember]
        public int? ApprovedById { get; set; }
        [DataMember]
        public DateTime? ApprovedDate { get; set; }
        [DataMember]
        public string ReceiptType { get; set; }
        [DataMember]
        public int GoodsReceiptId { get; set; }
        [DataMember]
        public string ReferenceNumber { get; set; }
        [DataMember]
        public string ReceivedBy { get; set; }
        [DataMember]
        public int? ReceivedById { get; set; }
        [DataMember]
        public int? LocationId { get; set; }
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public DateTime? DateReceived { get; set; }
        [DataMember]
        public string VendorDeliveryNumber { get; set; }
        [DataMember]
        public string VendorInvoiceNumber { get; set; }
        [DataMember]
        public int? VendorId { get; set; }
        [DataMember]
        public string Vendor { get; set; }
        [DataMember]
        public string SalesLocationId { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WarehouseOversupplyReportView> WarehouseOversupplyReportView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WarehouseOversupplyReportView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public string StoreTypes { get; set; }
        [DataMember]
        public string Tags { get; set; }
        [DataMember]
        public int WarehouseId { get; set; }
        [DataMember]
        public string WarehouseName { get; set; }
        [DataMember]
        public int StockOnHandInWarehouse { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public DateTime? DateLastReceived { get; set; }
        [DataMember]
        public int StockRequisitionPending { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRWarrantyView> WTRWarrantyView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRWarrantyView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public double? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRInstallationsView> WTRInstallationsView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRInstallationsView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public double? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRIGenericServicesView> WTRIGenericServicesView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRIGenericServicesView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public string DepartmentCode { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public double? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRAffinityView> WTRAffinityView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRAffinityView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public double? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRLoansView> WTRLoansView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRLoansView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public decimal? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRServiceChargeView> WTRServiceChargeView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRServiceChargeView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public decimal? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRRebatesView> WTRRebatesView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRRebatesView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public decimal? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRDiscountsView> WTRDiscountsView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRDiscountsView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string DepartmentCode { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public double? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRSalesAView> WTRSalesAView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRSalesAView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public string DepartmentCode { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string ClassCode { get; set; }
        [DataMember]
        public string Class { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public decimal? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRSalesBView> WTRSalesBView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRSalesBView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public string DepartmentCode { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string ClassCode { get; set; }
        [DataMember]
        public string Class { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public decimal? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRSalesFView> WTRSalesFView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRSalesFView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public decimal? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRPenaltyView> WTRPenaltyView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRPenaltyView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public decimal? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRCreditCashDifferenceView> WTRCreditCashDifferenceView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRCreditCashDifferenceView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public string DepartmentCode { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string ClassCode { get; set; }
        [DataMember]
        public string Class { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public decimal? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRCurrentStockItemsValueBranchView> WTRCurrentStockItemsValueBranchView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRCurrentStockItemsValueBranchView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public int? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTREndOfMonthStockItemsValueBranchView> WTREndOfMonthStockItemsValueBranchView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTREndOfMonthStockItemsValueBranchView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public int? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTRCurrentStockItemsValueView> WTRCurrentStockItemsValueView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTRCurrentStockItemsValueView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public string DepartmentCode { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string ClassCode { get; set; }
        [DataMember]
        public string Class { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public int? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<WTREndOfMonthStockItemsValueView> WTREndOfMonthStockItemsValueView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class WTREndOfMonthStockItemsValueView
    {
        [DataMember]
        public long? Id { get; set; }
        [DataMember]
        public int? DateKey { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string Fascia { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string SaleType { get; set; }
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public string DepartmentCode { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string ClassCode { get; set; }
        [DataMember]
        public string Class { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public int? GrossProfit { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<StockChangeView> StockChangeView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class StockChangeView
    {
        [DataMember]
        public long? id { get; set; }
        [DataMember]
        public int PurchaseOrderId { get; set; }
        [DataMember]
        public int? GoodsRecieptId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int LocationId { get; set; }
        [DataMember]
        public int? QuantityCancelled { get; set; }
        [DataMember]
        public int QuantityReceived { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<ProductsOnOrder> ProductsOnOrder { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class ProductsOnOrder
    {
        [DataMember]
        public int PurchaseOrderId { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public int? OnOrder { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RP3CurrentWeeklyMerchandisingView> RP3CurrentWeeklyMerchandisingView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RP3CurrentWeeklyMerchandisingView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public string Country { get; set; }
        [DataMember]
        public int? ACYear { get; set; }
        [DataMember]
        public int? ACMonth { get; set; }
        [DataMember]
        public string Store { get; set; }
        [DataMember]
        public string DepartmentCode { get; set; }
        [DataMember]
        public string DepartmentName { get; set; }
        [DataMember]
        public string DivisionCode { get; set; }
        [DataMember]
        public string DivisionName { get; set; }
        [DataMember]
        public string BrandCode { get; set; }
        [DataMember]
        public string BrandName { get; set; }
        [DataMember]
        public string SupplierCode { get; set; }
        [DataMember]
        public string SupplierName { get; set; }
        [DataMember]
        public string VendorStyleLong { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public int? InitialStockUnits { get; set; }
        [DataMember]
        public decimal? InitialStockCost { get; set; }
        [DataMember]
        public decimal? InitialStockValue { get; set; }
        [DataMember]
        public int? PurchUnits { get; set; }
        [DataMember]
        public decimal? PurchValue { get; set; }
        [DataMember]
        public decimal? PurchSales { get; set; }
        [DataMember]
        public int? UnitSales { get; set; }
        [DataMember]
        public decimal? CostSales { get; set; }
        [DataMember]
        public decimal? RetailSales { get; set; }
        [DataMember]
        public int? UnitAdj { get; set; }
        [DataMember]
        public decimal? CostAdj { get; set; }
        [DataMember]
        public decimal? SalesAdj { get; set; }
        [DataMember]
        public int? UnitTrans { get; set; }
        [DataMember]
        public decimal? CostTrans { get; set; }
        [DataMember]
        public decimal? SalesTrans { get; set; }
        [DataMember]
        public int? FinalStockUnits { get; set; }
        [DataMember]
        public decimal? FinalStockCost { get; set; }
        [DataMember]
        public decimal? FinalStockValue { get; set; }
        [DataMember]
        public decimal? Discount { get; set; }
        [DataMember]
        public DateTime LastPDate { get; set; }
        [DataMember]
        public DateTime LastSDate { get; set; }
        [DataMember]
        public DateTime LastTDate { get; set; }
        [DataMember]
        public DateTime FirstRDate { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<RP3PreviousWeeklyMerchandisingView> RP3PreviousWeeklyMerchandisingView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class RP3PreviousWeeklyMerchandisingView
    {
        [DataMember]
        public int? Id { get; set; }
        [DataMember]
        public string Country { get; set; }
        [DataMember]
        public int? ACYear { get; set; }
        [DataMember]
        public int? ACMonth { get; set; }
        [DataMember]
        public string Store { get; set; }
        [DataMember]
        public string DepartmentCode { get; set; }
        [DataMember]
        public string DepartmentName { get; set; }
        [DataMember]
        public string DivisionCode { get; set; }
        [DataMember]
        public string DivisionName { get; set; }
        [DataMember]
        public string BrandCode { get; set; }
        [DataMember]
        public string BrandName { get; set; }
        [DataMember]
        public string SupplierCode { get; set; }
        [DataMember]
        public string SupplierName { get; set; }
        [DataMember]
        public string VendorStyleLong { get; set; }
        [DataMember]
        public string Sku { get; set; }
        [DataMember]
        public string LongDescription { get; set; }
        [DataMember]
        public int? InitialStockUnits { get; set; }
        [DataMember]
        public decimal? InitialStockCost { get; set; }
        [DataMember]
        public decimal? InitialStockValue { get; set; }
        [DataMember]
        public int? PurchUnits { get; set; }
        [DataMember]
        public decimal? PurchValue { get; set; }
        [DataMember]
        public decimal? PurchSales { get; set; }
        [DataMember]
        public int? UnitSales { get; set; }
        [DataMember]
        public decimal? CostSales { get; set; }
        [DataMember]
        public decimal? RetailSales { get; set; }
        [DataMember]
        public int? UnitAdj { get; set; }
        [DataMember]
        public decimal? CostAdj { get; set; }
        [DataMember]
        public decimal? SalesAdj { get; set; }
        [DataMember]
        public int? UnitTrans { get; set; }
        [DataMember]
        public decimal? CostTrans { get; set; }
        [DataMember]
        public decimal? SalesTrans { get; set; }
        [DataMember]
        public int? FinalStockUnits { get; set; }
        [DataMember]
        public decimal? FinalStockCost { get; set; }
        [DataMember]
        public decimal? FinalStockValue { get; set; }
        [DataMember]
        public decimal? Discount { get; set; }
        [DataMember]
        public DateTime LastPDate { get; set; }
        [DataMember]
        public DateTime LastSDate { get; set; }
        [DataMember]
        public DateTime LastTDate { get; set; }
        [DataMember]
        public DateTime FirstRDate { get; set; }
    }

    partial class ContextBase
    {
        public virtual DbSet<AssociatedProductsHierarchyView> AssociatedProductsHierarchyView { get; set; }
    }

    [Serializable]
    [DataContract]
    public partial class AssociatedProductsHierarchyView
    {
        [DataMember]
        public string Division { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string Class { get; set; }
    }
    /// <summary>
    /// Creating region for Ashley CR, In this region we put all the models requied for this CR
    /// </summary>
    #region Ashley CR Model

    #region AshleySetup Model

    [Serializable]
    [DataContract]

    public partial class AshleySetUp
    {
        //[Key]
        [DataMember]
        public int ID { get; set; }
        [DataMember]
        public bool AshleyProduct { get; set; }
        [DataMember]
        public bool SpecialProduct { get; set; }
        [DataMember]
        public bool AutoPO { get; set; }
        [DataMember]
        public bool OnlineAvailable { get; set; }
        [DataMember]
        public int MinVal { get; set; }
        [DataMember]
        public int MaxVal { get; set; }
        [DataMember]
        public int? ProductID { get; set; }
        //[ForeignKey(name: "FK_Ashle_Product_Link")]
        //public virtual Product product { get; set; }
    }
    #endregion

    #region ProductAttribute Model
    [Serializable]
    [DataContract]
    public partial class ProductAttribute
    {
        //[Key]
        [DataMember]
        public int ID { get; set; }
        [DataMember]
        public bool IsAshleyProduct { get; set; }
        [DataMember]
        public bool IsSpecialProduct { get; set; }
        [DataMember]
        public bool ISAutoPO { get; set; }
        [DataMember]
        public bool ISOnlineAvailable { get; set; }
        [DataMember]
        public int? ProductId { get; set; }
        [DataMember]
        public string SKU { get; set; }
    }
    #endregion

    #region ProductStockRange Model
    [Serializable]
    [DataContract]
    public partial class ProductStockRange
    {
        //[Key]
        [DataMember]
        public int ID { get; set; }
        [DataMember]
        public int MinVal { get; set; }
        [DataMember]
        public int MaxVal { get; set; }
        [DataMember]
        public int? ProductId { get; set; }
        [DataMember]
        public string SKU { get; set; }
    }
    #endregion


    #region Additional Cost Price
    [Serializable]
    [DataContract]
    public partial class AdditionalCostPrice
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string VendorId { get; set; }
        [DataMember]
        [Column("VendorCost")]
        public decimal SupplierCost { get; set; }
        [DataMember]
        public decimal LastLandedCost { get; set; }
        [DataMember]
        [Column("AvgWeightedCost")]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        [Column("VendorCurrency")]
        public string SupplierCurrency { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public DateTime DateAdded { get; set; }
        [DataMember]
        public string AddedBy { get; set; }
    }
    #endregion

    #region Additional Cost Price Audit
    [Serializable]
    [DataContract]
    public partial class AdditionalCostPriceAudit
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int AdditionalCostId { get; set; }
        [DataMember]
        public string VendorId { get; set; }
        [DataMember]
        [Column("VendorCost")]
        public decimal SupplierCost { get; set; }
        [DataMember]
        public decimal LastLandedCost { get; set; }
        [DataMember]
        [Column("AvgWeightedCost")]
        public decimal AverageWeightedCost { get; set; }
        [DataMember]
        [Column("VendorCurrency")]
        public string SupplierCurrency { get; set; }
        [DataMember]
        public int ProductId { get; set; }
        [DataMember]
        public DateTime DateAdded { get; set; }
        [DataMember]
        public string AddedBy { get; set; }
    }
    #endregion


    #region ForceIndexAutoPurchaseOrder
    [Serializable]
    [DataContract]
    public partial class ForceIndexAutoPurchaseOrder
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public int PurchaseId { get; set; }
        [DataMember]
        public char AutoManual { get; set; }
        [DataMember]
        public bool IsReIndexed { get; set; }
    }
    #endregion

    #region Ashley Error Log
    [Serializable]
    [DataContract]
    public class AshleyErrorLog
    {
        [DataMember]
        public int Id { get; set; }
        [DataMember]
        public string FunctionName { get; set; }
        [DataMember]
        public string Error { get; set; }
        [DataMember]
        public string Remark { get; set; }
        [DataMember]
        public DateTime ErrorDate { get; set; }
    }
    #endregion

    #region POCancelReasonList Model 
    [Serializable]
    [DataContract]
    public partial class POCancelReasonList
    {
        [DataMember]
        public int ID { get; set; }
        [DataMember]
        public string CancelReason { get; set; }
    }
    #endregion

    #region Renissance Customers Details  

    [Serializable]
    [DataContract]
    public class RenissanceCustomers
    {
        [Key]
        public int id { get; set; }
        public string title { get; set; }
        public string firstName { get; set; }
        public string lastName { get; set; }
        public string alias { get; set; }
        public string accountNo { get; set; }
        public string relationship { get; set; }
        public System.DateTime dob { get; set; }
        public string accountType { get; set; }
        public string maidenName { get; set; }
        // public string loyaltyCardNo { get; set; }
        public string countryCode { get; set; }
        //  public string storeType { get; set; }
        // public string otherTabs { get; set; }
        public string maritalStat { get; set; }
        public int dependants { get; set; }
        public string nationality { get; set; }
        // public bool resieveSms { get; set; }
        public int branchNo { get; set; }
        public string CreatedBy { get; set; }
        public string Err { get; set; }

        //Address Details :-
        public string AddressType { get; set; }
        public string Address1 { get; set; }
        public string Address2 { get; set; }
        public string Address3 { get; set; }
        public string PostCode { get; set; }
        public string Deliveryarea { get; set; }
        public string EMail { get; set; }
        public string DialCode { get; set; }
        public string PhoneNo { get; set; }
        public string Ext { get; set; }
        public string DELTitleC { get; set; }
        public string DELFirstname { get; set; }
        public string DELLastname { get; set; }
        public string Notes { get; set; }
        public DateTime DateIn { get; set; }
        public bool NewRecord { get; set; }
        public string Zone { get; set; }
        public int insertRecordStatus { get; set; }
        public DateTime RecordImpDate { get; set; }
    }

    #endregion

    #endregion
    public partial class Settings : Blue.Config.SettingsBase
    {
        public Settings() : base(Blue.Cosacs.Merchandising.Module.Instance) { }

        public static StructureMap.Configuration.DSL.IRegistry Register<T>(StructureMap.Configuration.DSL.IRegistry registry, T singletonObject)
            where T : Blue.Config.ISettings

        {
            registry.For<Blue.Config.ISettings>().Add(singletonObject).Named(@"Blue.Cosacs.Merchandising");
            registry.For<T>().Singleton().Use(singletonObject);
            return registry;
        }

        public override Blue.Config.SettingMetadata[] Metadata()
        {
            return metadata;
        }

        #region Setting Metadata
        private static readonly Blue.Config.SettingMetadata[] metadata = new Blue.Config.SettingMetadata[]
        {

                        new Blue.Config.SettingMetadata.@bit {
                Id = @"BackOrders",
                Name = @"Cancellation of Back Orders on Goods Received is Enabled",
                Description = @"When selected, it is possible to cancel back orders for goods received",
                Category = @"Settings",
                Default = @"true",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"ActiveNewMigrationPeriod",
                Name = @"Active New Migration Period",
                Description = @"The number of days that a product with status of 'Active New' can remain in before being automatically changed to 'Active Current'",
                Category = @"Settings",
                Default = @"30",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"DateFormat",
                Name = @"Date Format",
                Description = @"Pattern used for displaying dates",
                Category = @"Settings",
                Default = @"d MMMM yyyy",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"DaysUntilAutoCancelPurchaseOrder",
                Name = @"Days Until Auto Cancel Purchase Order",
                Description = @"The number of days that a purchase order will sit in the Expired status before it is automatically cancelled",
                Category = @"Settings",
                Default = @"30",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"DaysUntilAutoCloseStockCount",
                Name = @"Days Until Auto Close Stock Count",
                Description = @"The number of days past the stock count start date before if is automatically closed",
                Category = @"Settings",
                Default = @"30",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"Fascia",
                Name = @"Store Chains",
                Description = @"Available chains for locations",
                Category = @"Lists",
                Default = @"",
                Fixed = @"Courts",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"FinanceEmailAddress",
                Name = @"Finance Email Address",
                Description = @"Email address to send notifications (eg. verify goods receipt costing) to",
                Category = @"Settings",
                Default = @"",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"ZebraPrinterName",
                Name = @"Zebra Printer Name",
                Description = @"The windows name of the Zebra Printer (case sensitive), it must be setup to accept RAW commands without spooling",
                Category = @"Settings",
                Default = @"Cosacs ZPL",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"LocalCurrency",
                Name = @"Local Currency",
                Description = @"The local currency for use to display with costs",
                Category = @"Settings",
                Default = @"JMD",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"FileExportDirectory",
                Name = @"File Export Directory",
                Description = @"The directory that the save file exports to.  The AppDomain must have permission to write to this directory",
                Category = @"Settings",
                Default = @"C:\",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"RP3FileExportDirectory",
                Name = @"RP3 File Export Directory",
                Description = @"The directory that the RP3 exports save to.  The AppDomain must have permission to write to this directory",
                Category = @"Settings",
                Default = @"C:\",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"RP3ExportLastXDaysOfTransactions",
                Name = @"RP3 Export Last X Days of Transactions",
                Description = @"The number of days in the past that transactions will be exported for RP3 transaction exports",
                Category = @"Settings",
                Default = @"7",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@date {
                Id = @"RP3GoLiveDate",
                Name = @"RP3 Go Live Date",
                Description = @"Initial RP3 Export Date set at Go Live(N/A for Purchase Orders)",
                Category = @"Settings",
                Default = @"2016-01-01",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"RP3SendFilesInterfaceDirectory",
                Name = @"RP3 Send Files Interface Directory",
                Description = @"The directory containing the  of the ""SendFilesInterface.bat"" RP3 export batch file",
                Category = @"Settings",
                Default = @"C:\",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"PriceRounding",
                Name = @"Price Rounding",
                Description = @"Calculated prices are rounded to the nearest value from this list",
                Category = @"Settings",
                Default = @"0",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"ProductTags",
                Name = @"Product Tags",
                Description = @"Descriptive tags used to categorise products for search purposes",
                Category = @"Lists",
                Default = @"Never Out",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"ReferenceNumberType",
                Name = @"Reference Number Type",
                Description = @"The options for the purchase order reference numbers",
                Category = @"Lists",
                Default = @"
        Container Number
        Delivery Note Number
        Invoice Number
        Customer Reference
      ",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@decimal {
                Id = @"RepossessionCost",
                Name = @"Repossession Cost Markup",
                Description = @"The markup on cost price that is used to calculate the cost price for all repossessed items",
                Category = @"Settings",
                Default = @"20",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"StockCountQuestions",
                Name = @"Stock Count Questions",
                Description = @"Questions to be completed before starting a stock count",
                Category = @"Lists",
                Default = @"Have you processed all goods receipts?",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@codeList {
                Id = @"GoodsOnLoanWarehouse",
                Name = @"Goods on Loan Warehouse",
                Description = @"The location that is the Goods on Loan Warehouse",
                Category = @"Settings",
                Default = @"Goods on Loan",
                Fixed = @"",
                CodeList = @"MerchandisingLocations",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"StoreType",
                Name = @"Store Type",
                Description = @"Category of store used for linking products and stores",
                Category = @"Lists",
                Default = @"Regular",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@bit {
                Id = @"TaxInclusive",
                Name = @"Prices are Inclusive of Tax",
                Description = @"When selected, prices are considered inclusive of tax for sales purposes",
                Category = @"Settings",
                Default = @"false",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"VendorCurrencies",
                Name = @"Currencies",
                Description = @"Vendor costs can be specified in the following currencies",
                Category = @"Lists",
                Default = @"
        USD
        JMD
      ",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"VendorTags",
                Name = @"Vendor Tags",
                Description = @"Descriptive tags used to categorise vendors for search purposes",
                Category = @"Lists",
                Default = @"New Vendor",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@bit {
                Id = @"VerifyCosts",
                Name = @"Goods Received Require Verification of Costs",
                Description = @"When selected, goods receipts for imported goods will need to have costs verified",
                Category = @"Settings",
                Default = @"true",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                            new Blue.Config.SettingMetadata.@string {
                Id = @"ScheduleJobUpdateDaySetting",
                Name = @"Schedule Job Update Day Setting",
                Description = @"This is used to configure for the execution of scheduled job for getting updates only",
                Category = @"Settings",
                Default = @"",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 3,
                Scale = 3,
                            },
                         new Blue.Config.SettingMetadata.@bit {
                Id = @"AshleyEnabled",
                Name = @"Ashley settings",
                Description = @"When selected, the Ashley settings will enabled otherwise will be disabled.",
                Category = @"Settings",
                Default = @"false",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                  new Blue.Config.SettingMetadata.@int {
                Id = @"AshleyPOAuthorizationLevelFlg",
                Name = @"Authorization Level for Ashley PO",
                Description = @"Available Options '1' - For one level Authorization, '2' for two level Authorization",
                Category = @"Settings",
                Default = @"2",
                Fixed = @"",
                CodeList = @"",
                CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                    };
        #endregion

        #region Setting Enums
        #endregion

        #region Setting Properties
        public bool BackOrders
        {
            get { return ((Blue.Config.ISettingsReader)this).Bit("BackOrders"); }
        }
        public int ActiveNewMigrationPeriod
        {
            get { return ((Blue.Config.ISettingsReader)this).Int("ActiveNewMigrationPeriod"); }
        }
        public System.String DateFormat
        {
            get { return ((Blue.Config.ISettingsReader)this).String("DateFormat"); }
        }
        public int DaysUntilAutoCancelPurchaseOrder
        {
            get { return ((Blue.Config.ISettingsReader)this).Int("DaysUntilAutoCancelPurchaseOrder"); }
        }
        public int DaysUntilAutoCloseStockCount
        {
            get { return ((Blue.Config.ISettingsReader)this).Int("DaysUntilAutoCloseStockCount"); }
        }
        public System.String[] Fascia
        {
            get { return ((Blue.Config.ISettingsReader)this).List("Fascia"); }
        }
        public System.String FinanceEmailAddress
        {
            get { return ((Blue.Config.ISettingsReader)this).String("FinanceEmailAddress"); }
        }
        public System.String ZebraPrinterName
        {
            get { return ((Blue.Config.ISettingsReader)this).String("ZebraPrinterName"); }
        }
        public System.String LocalCurrency
        {
            get { return ((Blue.Config.ISettingsReader)this).String("LocalCurrency"); }
        }
        public System.String FileExportDirectory
        {
            get { return ((Blue.Config.ISettingsReader)this).String("FileExportDirectory"); }
        }
        public System.String RP3FileExportDirectory
        {
            get { return ((Blue.Config.ISettingsReader)this).String("RP3FileExportDirectory"); }
        }
        public int RP3ExportLastXDaysOfTransactions
        {
            get { return ((Blue.Config.ISettingsReader)this).Int("RP3ExportLastXDaysOfTransactions"); }
        }
        public System.DateTime RP3GoLiveDate
        {
            get { return ((Blue.Config.ISettingsReader)this).Date("RP3GoLiveDate"); }
        }
        public System.String RP3SendFilesInterfaceDirectory
        {
            get { return ((Blue.Config.ISettingsReader)this).String("RP3SendFilesInterfaceDirectory"); }
        }
        public System.String[] PriceRounding
        {
            get { return ((Blue.Config.ISettingsReader)this).List("PriceRounding"); }
        }
        public System.String[] ProductTags
        {
            get { return ((Blue.Config.ISettingsReader)this).List("ProductTags"); }
        }
        public System.String[] ReferenceNumberType
        {
            get { return ((Blue.Config.ISettingsReader)this).List("ReferenceNumberType"); }
        }
        public decimal RepossessionCost
        {
            get { return ((Blue.Config.ISettingsReader)this).Decimal("RepossessionCost"); }
        }
        public System.String[] StockCountQuestions
        {
            get { return ((Blue.Config.ISettingsReader)this).List("StockCountQuestions"); }
        }
        public System.String GoodsOnLoanWarehouse
        {
            get { return ((Blue.Config.ISettingsReader)this).Codelist("GoodsOnLoanWarehouse"); }
        }
        public System.String[] StoreType
        {
            get { return ((Blue.Config.ISettingsReader)this).List("StoreType"); }
        }
        public bool TaxInclusive
        {
            get { return ((Blue.Config.ISettingsReader)this).Bit("TaxInclusive"); }
        }
        public System.String[] VendorCurrencies
        {
            get { return ((Blue.Config.ISettingsReader)this).List("VendorCurrencies"); }
        }
        public System.String[] VendorTags
        {
            get { return ((Blue.Config.ISettingsReader)this).List("VendorTags"); }
        }
        public bool VerifyCosts
        {
            get { return ((Blue.Config.ISettingsReader)this).Bit("VerifyCosts"); }
        }
        public System.String ScheduleJobUpdateDaySetting
        {
            get { return ((Blue.Config.ISettingsReader)this).String("ScheduleJobUpdateDaySetting"); }
        }
        public bool AshleyEnabled
        {
            get { return ((Blue.Config.ISettingsReader)this).Bit("AshleyEnabled"); }
        }
        public int AshleyPOAuthorizationLevelFlg
        {
            get { return ((Blue.Config.ISettingsReader)this).Int("AshleyPOAuthorizationLevelFlg"); }
        }
        #endregion
    }



    public class Module : Blue.Config.ModuleBase
    {
        private Module() { }

        public static readonly Module Instance = new Module
        {
            Label = @"Merchandising",
            Namespace = @"Blue.Cosacs.Merchandising",
            Schema = @"Merchandising",
        };
    }

    public partial class ContextBase : DbContextBase
    {
        public void CreateStockAdjustmentFromStockCount(DataTable productTable)
        {
            //CR : closing Quarterly Stock counts with variance = 0
            var pProductTable = new SqlParameter("ProductTable", SqlDbType.Structured);
            pProductTable.Value = productTable;
            pProductTable.TypeName = "Merchandising.StockCountProducts";

            this.Database.ExecuteSqlCommand("EXEC Merchandising.CreateStockAdjustmentFromStockCount @ProductTable", pProductTable);
        }
        public List<ProductMessageView> GetProductMessagesByProductId(DataTable productIdsTable)
        {
            //CR : closing Quarterly Stock counts with variance = 0
            var pProdIds = new SqlParameter("ProductIds", SqlDbType.Structured);
            pProdIds.Value = productIdsTable;
            pProdIds.TypeName = "dbo.IntTVP";

            return this.Database.SqlQuery<ProductMessageView>("EXEC Merchandising.GetProductMessagesByProductIds @ProductIds", pProdIds).ToListAsync().Result;
        }
    }
}
