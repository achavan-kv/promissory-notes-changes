














//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Cosacs Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using Blue.Transactions;
using System.Data.SqlClient;
using System.Threading.Tasks;
using Microsoft.SqlServer.Server;

namespace Blue.Cosacs.Merchandising
{
    					public partial class CintOrderStatsTVP 
							{
									    public string PrimaryReference { get; set; }
									    public string Sku { get; set; }
									    public string ReferenceType { get; set; }
									    public string SecondaryReference { get; set; }
									    public string ParentSku { get; set; }
									    public string StockLocation { get; set; }
									    public int? OrderId { get; set; }
						}
						public partial class CintOrderTVP 
							{
									    public int? RunNo { get; set; }
									    public string Type { get; set; }
									    public string PrimaryReference { get; set; }
									    public string SaleType { get; set; }
									    public string SaleLocation { get; set; }
									    public string Sku { get; set; }
									    public int? ProductId { get; set; }
									    public string StockLocation { get; set; }
									    public string ParentSku { get; set; }
									    public int? ParentId { get; set; }
									    public DateTime? TransactionDate { get; set; }
									    public int? Quantity { get; set; }
									    public decimal? Price { get; set; }
									    public decimal? Tax { get; set; }
									    public string SecondaryReference { get; set; }
									    public string ReferenceType { get; set; }
									    public decimal? Discount { get; set; }
									    public decimal? CashPrice { get; set; }
									    public int? PromotionId { get; set; }
									    public decimal? CostPrice { get; set; }
									    public int? TempId { get; set; }
						}
						public partial class UpdateCintOrderStatsTVP 
							{
									    public string PrimaryReference { get; set; }
									    public string Sku { get; set; }
									    public string ParentSku { get; set; }
									    public string StockLocation { get; set; }
									    public int? QtyOrderedInc { get; set; }
									    public int? QtyDeliveredInc { get; set; }
									    public int? QtyReturnedInc { get; set; }
									    public int? QtyRepossessedInc { get; set; }
									    public int? QtyOrdered { get; set; }
									    public string SecondaryReference { get; set; }
									    public string ReferenceType { get; set; }
						}
						public partial class UpdateProductStockLevelTVP 
							{
									    public int? LocationId { get; set; }
									    public int? ProductId { get; set; }
									    public int? StockOnHand { get; set; }
									    public int? StockOnOrder { get; set; }
									    public int? StockAvailable { get; set; }
						}
	    
        public partial class ContextBase : DbContextBase
        {
			protected ContextBase(string connectionString = "Default") : base(connectionString) 
			{
				Database.SetInitializer<Context>(null);
			}
		 
            
                public virtual DbSet<CintError> CintError { get; set; }
            
                public virtual DbSet<CintsError> CintsError { get; set; }
            
                public virtual DbSet<SucrBase> SucrBase { get; set; }
            
            
            protected override void OnModelCreating(DbModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);
                
                        var t0 = modelBuilder.Entity< CintError >();
                        t0.ToTable("CintError", "Merchandising");
                        
                        t0.HasKey(t => t.Id);
                        
                        t0.Property(t => t.Id)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.ProductCode)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(100)
                        
                        ;
                        
                        t0.Property(t => t.PrimaryReference)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(100)
                        
                        ;
                        
                        t0.Property(t => t.Type)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(100)
                        
                        ;
                        
                        t0.Property(t => t.StockLocation)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(10)
                        
                        ;
                        
                        t0.Property(t => t.SaleLocation)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(10)
                        
                        ;
                        
                        t0.Property(t => t.ErrorMessage)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(2000)
                        
                        ;
                        
                        t0.Property(t => t.Date)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.RunNo)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.SecondaryReference)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(20)
                        
                        ;
                        
                        t0.Property(t => t.ReferenceType)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(20)
                        
                        ;
                        
                        t0.Property(t => t.MessageId)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        ;
                        
                        var t1 = modelBuilder.Entity< CintsError >();
                        t1.ToTable("CintsError", "Merchandising");
                        
                        t1.HasKey(t => t.MessageId);
                        
                        t1.Property(t => t.MessageId)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        ;
                        
                        t1.Property(t => t.Exception)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        ;
                        
                        t1.Property(t => t.CreatedOn)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        ;
                        
                        t1.Property(t => t.Runno)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        ;
                        
                        var t2 = modelBuilder.Entity< SucrBase >();
                        t2.ToTable("SucrBase", "Merchandising");
                        
                        t2.HasKey(t => t.Id);
                        
                        t2.Property(t => t.Id)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.LocationId)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.SummaryType)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(20)
                        
                        ;
                        
                        t2.Property(t => t.Units)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.Value)
						.HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        ;
                        
                        modelBuilder.Entity< SummaryUpdateControlReportView >().ToTable("SummaryUpdateControlReportView", "Merchandising");
                        
            }
        }

        
        [Serializable]
	[DataContract]
    public partial class CintError
    {
        [DataMember] 
		public int Id { get;  set;}
        [DataMember] 
		public string ProductCode { get;  set;}
        [DataMember] 
		public string PrimaryReference { get;  set;}
        [DataMember] 
		public string Type { get;  set;}
        [DataMember] 
		public string StockLocation { get;  set;}
        [DataMember] 
		public string SaleLocation { get;  set;}
        [DataMember] 
		public string ErrorMessage { get;  set;}
        [DataMember] 
		public DateTime Date { get;  set;}
        [DataMember] 
		public int RunNo { get;  set;}
        [DataMember] 
		public string SecondaryReference { get;  set;}
        [DataMember] 
		public string ReferenceType { get;  set;}
        [DataMember] 
		public int MessageId { get;  set;}
            }

    
        [Serializable]
	[DataContract]
    public partial class CintsError
    {
        [DataMember] 
		public int MessageId { get;  set;}
        [DataMember] 
		public string Exception { get;  set;}
        [DataMember] 
		public DateTime CreatedOn { get;  set;}
        [DataMember] 
		public int Runno { get;  set;}
            }

    
        [Serializable]
	[DataContract]
    public partial class SucrBase
    {
        [DataMember] 
		public int Id { get;  set;}
        [DataMember] 
		public int LocationId { get;  set;}
        [DataMember] 
		public string SummaryType { get;  set;}
        [DataMember] 
		public int Units { get;  set;}
        [DataMember] 
		public decimal Value { get;  set;}
            }

        partial class ContextBase
    {
        public virtual DbSet<SummaryUpdateControlReportView> SummaryUpdateControlReportView { get; set; }
    }
    
        [Serializable]
	[DataContract]
    public partial class SummaryUpdateControlReportView
    {
        [DataMember] 
		public long? id { get;  set;}
        [DataMember] 
		public string SKU { get;  set;}
        [DataMember] 
		public string TransactionType { get;  set;}
        [DataMember] 
		public string Reference { get;  set;}
        [DataMember] 
		public DateTime? TransactionDate { get;  set;}
        [DataMember] 
		public int? Units { get;  set;}
        [DataMember] 
		public decimal? Value { get;  set;}
        [DataMember] 
		public int LocationId { get;  set;}
        [DataMember] 
		public string SalesId { get;  set;}
        [DataMember] 
		public string Location { get;  set;}
        [DataMember] 
		public short? RunNumber { get;  set;}
        [DataMember] 
		public string ProductType { get;  set;}
        [DataMember] 
		public int ProductMessageId { get;  set;}
            }

        public partial class Settings : Blue.Config.SettingsBase
    {
        public Settings() : base(Blue.Cosacs.Merchandising.Module.Instance) {}

        public static StructureMap.Configuration.DSL.IRegistry Register<T>(StructureMap.Configuration.DSL.IRegistry registry, T singletonObject)
            where T : Blue.Config.ISettings

        {
            registry.For<Blue.Config.ISettings>().Add(singletonObject).Named(@"Blue.Cosacs.Merchandising");
            registry.For<T>().Singleton().Use(singletonObject);
            return registry;
        }

        public override Blue.Config.SettingMetadata[] Metadata()
        {
            return metadata;
        }

        #region Setting Metadata
        private static readonly Blue.Config.SettingMetadata[] metadata = new Blue.Config.SettingMetadata[] 
        {
			
                        new Blue.Config.SettingMetadata.@bit {
                Id = @"BackOrders",
                Name = @"Cancellation of Back Orders on Goods Received is Enabled",
                Description = @"When selected, it is possible to cancel back orders for goods received",
                Category = @"Settings",
                Default = @"true",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"ActiveNewMigrationPeriod",
                Name = @"Active New Migration Period",
                Description = @"The number of days that a product with status of 'Active New' can remain in before being automatically changed to 'Active Current'",
                Category = @"Settings",
                Default = @"30",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"DateFormat",
                Name = @"Date Format",
                Description = @"Pattern used for displaying dates",
                Category = @"Settings",
                Default = @"d MMMM yyyy",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"DaysUntilAutoCancelPurchaseOrder",
                Name = @"Days Until Auto Cancel Purchase Order",
                Description = @"The number of days that a purchase order will sit in the Expired status before it is automatically cancelled",
                Category = @"Settings",
                Default = @"30",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"DaysUntilAutoCloseStockCount",
                Name = @"Days Until Auto Close Stock Count",
                Description = @"The number of days past the stock count start date before if is automatically closed",
                Category = @"Settings",
                Default = @"30",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"Fascia",
                Name = @"Store Chains",
                Description = @"Available chains for locations",
                Category = @"Lists",
                Default = @"Courts",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"FinanceEmailAddress",
                Name = @"Finance Email Address",
                Description = @"Email address to send notifications (eg. verify goods receipt costing) to",
                Category = @"Settings",
                Default = @"",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"ZebraPrinterName",
                Name = @"Zebra Printer Name",
                Description = @"The windows name of the Zebra Printer (case sensitive), it must be setup to accept RAW commands without spooling",
                Category = @"Settings",
                Default = @"Cosacs ZPL",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"LocalCurrency",
                Name = @"Local Currency",
                Description = @"The local currency for use to display with costs",
                Category = @"Settings",
                Default = @"JMD",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"FileExportDirectory",
                Name = @"File Export Directory",
                Description = @"The directory that the save file exports to.  The AppDomain must have permission to write to this directory",
                Category = @"Settings",
                Default = @"C:\",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"RP3FileExportDirectory",
                Name = @"RP3 File Export Directory",
                Description = @"The directory that the RP3 exports save to.  The AppDomain must have permission to write to this directory",
                Category = @"Settings",
                Default = @"C:\",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"RP3ExportLastXDaysOfTransactions",
                Name = @"RP3 Export Last X Days of Transactions",
                Description = @"The number of days in the past that transactions will be exported for RP3 transaction exports",
                Category = @"Settings",
                Default = @"7",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@date {
                Id = @"RP3GoLiveDate",
                Name = @"RP3 Go Live Date",
                Description = @"Initial RP3 Export Date set at Go Live(N/A for Purchase Orders)",
                Category = @"Settings",
                Default = @"2016-01-01",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"RP3SendFilesInterfaceDirectory",
                Name = @"RP3 Send Files Interface Directory",
                Description = @"The directory containing the  of the ""SendFilesInterface.bat"" RP3 export batch file",
                Category = @"Settings",
                Default = @"C:\",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"PriceRounding",
                Name = @"Price Rounding",
                Description = @"Calculated prices are rounded to the nearest value from this list",
                Category = @"Settings",
                Default = @"0",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"ProductTags",
                Name = @"Product Tags",
                Description = @"Descriptive tags used to categorise products for search purposes",
                Category = @"Lists",
                Default = @"Never Out",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"ReferenceNumberType",
                Name = @"Reference Number Type",
                Description = @"The options for the purchase order reference numbers",
                Category = @"Lists",
                Default = @"
        Container Number
        Delivery Note Number
        Invoice Number
        Customer Reference
      ",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@decimal {
                Id = @"RepossessionCost",
                Name = @"Repossession Cost Markup",
                Description = @"The markup on cost price that is used to calculate the cost price for all repossessed items",
                Category = @"Settings",
                Default = @"20",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"StockCountQuestions",
                Name = @"Stock Count Questions",
                Description = @"Questions to be completed before starting a stock count",
                Category = @"Lists",
                Default = @"Have you processed all goods receipts?",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@codeList {
                Id = @"GoodsOnLoanWarehouse",
                Name = @"Goods on Loan Warehouse",
                Description = @"The location that is the Goods on Loan Warehouse",
                Category = @"Settings",
                Default = @"Goods on Loan",
				Fixed = @"",
                CodeList = @"MerchandisingLocations",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"StoreType",
                Name = @"Store Type",
                Description = @"Category of store used for linking products and stores",
                Category = @"Lists",
                Default = @"Regular",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@bit {
                Id = @"TaxInclusive",
                Name = @"Prices are Inclusive of Tax",
                Description = @"When selected, prices are considered inclusive of tax for sales purposes",
                Category = @"Settings",
                Default = @"false",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"VendorCurrencies",
                Name = @"Currencies",
                Description = @"Vendor costs can be specified in the following currencies",
                Category = @"Lists",
                Default = @"
        USD
        JMD
      ",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@list {
                Id = @"VendorTags",
                Name = @"Vendor Tags",
                Description = @"Descriptive tags used to categorise vendors for search purposes",
                Category = @"Lists",
                Default = @"New Vendor",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@bit {
                Id = @"VerifyCosts",
                Name = @"Goods Received Require Verification of Costs",
                Description = @"When selected, goods receipts for imported goods will need to have costs verified",
                Category = @"Settings",
                Default = @"true",
				Fixed = @"",
                CodeList = @"",
				CodeListURL = @"",
                Precision = 28,
                Scale = 12,
                            },
                    };
        #endregion

        #region Setting Enums
                #endregion

        #region Setting Properties
                public bool BackOrders 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Bit("BackOrders"); }
        }
                public int ActiveNewMigrationPeriod 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Int("ActiveNewMigrationPeriod"); }
        }
                public System.String DateFormat 
        { 
            get { return ((Blue.Config.ISettingsReader)this).String("DateFormat"); }
        }
                public int DaysUntilAutoCancelPurchaseOrder 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Int("DaysUntilAutoCancelPurchaseOrder"); }
        }
                public int DaysUntilAutoCloseStockCount 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Int("DaysUntilAutoCloseStockCount"); }
        }
                public System.String[] Fascia 
        { 
            get { return ((Blue.Config.ISettingsReader)this).List("Fascia"); }
        }
                public System.String FinanceEmailAddress 
        { 
            get { return ((Blue.Config.ISettingsReader)this).String("FinanceEmailAddress"); }
        }
                public System.String ZebraPrinterName 
        { 
            get { return ((Blue.Config.ISettingsReader)this).String("ZebraPrinterName"); }
        }
                public System.String LocalCurrency 
        { 
            get { return ((Blue.Config.ISettingsReader)this).String("LocalCurrency"); }
        }
                public System.String FileExportDirectory 
        { 
            get { return ((Blue.Config.ISettingsReader)this).String("FileExportDirectory"); }
        }
                public System.String RP3FileExportDirectory 
        { 
            get { return ((Blue.Config.ISettingsReader)this).String("RP3FileExportDirectory"); }
        }
                public int RP3ExportLastXDaysOfTransactions 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Int("RP3ExportLastXDaysOfTransactions"); }
        }
                public System.DateTime RP3GoLiveDate 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Date("RP3GoLiveDate"); }
        }
                public System.String RP3SendFilesInterfaceDirectory 
        { 
            get { return ((Blue.Config.ISettingsReader)this).String("RP3SendFilesInterfaceDirectory"); }
        }
                public System.String[] PriceRounding 
        { 
            get { return ((Blue.Config.ISettingsReader)this).List("PriceRounding"); }
        }
                public System.String[] ProductTags 
        { 
            get { return ((Blue.Config.ISettingsReader)this).List("ProductTags"); }
        }
                public System.String[] ReferenceNumberType 
        { 
            get { return ((Blue.Config.ISettingsReader)this).List("ReferenceNumberType"); }
        }
                public decimal RepossessionCost 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Decimal("RepossessionCost"); }
        }
                public System.String[] StockCountQuestions 
        { 
            get { return ((Blue.Config.ISettingsReader)this).List("StockCountQuestions"); }
        }
                public System.String GoodsOnLoanWarehouse 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Codelist("GoodsOnLoanWarehouse"); }
        }
                public System.String[] StoreType 
        { 
            get { return ((Blue.Config.ISettingsReader)this).List("StoreType"); }
        }
                public bool TaxInclusive 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Bit("TaxInclusive"); }
        }
                public System.String[] VendorCurrencies 
        { 
            get { return ((Blue.Config.ISettingsReader)this).List("VendorCurrencies"); }
        }
                public System.String[] VendorTags 
        { 
            get { return ((Blue.Config.ISettingsReader)this).List("VendorTags"); }
        }
                public bool VerifyCosts 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Bit("VerifyCosts"); }
        }
                #endregion
    }
    
    

        public class Module : Blue.Config.ModuleBase
    {
        private Module() {}

        public static readonly Module Instance = new Module
        {
            Label = @"Merchandising",
            Namespace = @"Blue.Cosacs.Merchandising",
            Schema = @"Merchandising",
        };
    }
    }
