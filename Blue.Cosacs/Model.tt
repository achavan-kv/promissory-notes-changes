<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral" #>
<#@ assembly name="Microsoft.CSharp, Version=4.0.0.0, Culture=neutral" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="Templates\ProcedureTemplate.tt" #>
<#@ include file="Templates\NonQueryTemplate.tt" #>
<#@ include file="Templates\DataSetTemplate.tt" #>
<#@ include file="Templates\ScalarTemplate.tt" #>
<#@ include file="Templates\Linq\TableTemplate.tt" #>
<#@ include file="Templates\Linq\TablesTemplate.tt" #>
<#@ include file="Templates\Linq\ViewsTemplate.tt" #>
<#@ include file="Templates\Linq\ContextTemplate.tt" #>
<#@ include file="Templates\Linq\XmlMappingTemplate.tt" #>
<#@ xsd processor="T4Toolbox.XsdProcessor" file="Templates\Model.xsd" #>
<#@ output extension="cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Cosacs Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
<#
	var modelPath = Host.ResolvePath("Cosacs.xml");
	var model = Model.Load(modelPath);
	
    var server = new Server(model.Connection.server);
    var database = server.Databases[model.Connection.database];
#>
namespace Blue.Cosacs
{
<#
	var linqXml = new LinqXmlMappingTemplate { Database = database, Tables = model.Tables, Views = model.Views };
	linqXml.Output.File = "Linq2Sql.xml";
	linqXml.Output.BuildAction = BuildAction.EmbeddedResource;
	linqXml.Render();
	
	foreach (var query in model.Queries)
	{
		if (query is NonQuery)
			new NonQueryTemplate { Database = database, Model = (NonQuery)query }.Render();
		if (query is Scalar)
			new ScalarTemplate { Database = database, Model = (Scalar)query }.Render();
		if (query is DataSet)
			new DataSetTemplate { Database = database, Model = (DataSet)query }.Render();
	}
	
	var tablesT = new LinqTablesTemplate { Database = database, Model = model };
	tablesT.Output.File = "Generated\\Tables.cs";
	tablesT.Output.Project = @"..\Blue.Cosacs.Domain\Blue.Cosacs.Shared.csproj";
	tablesT.Render();

	var viewsT = new LinqViewsTemplate { Database = database, Model = model };
	viewsT.Output.File = "Generated\\Views.cs";
	viewsT.Output.Project = @"..\Blue.Cosacs.Domain\Blue.Cosacs.Shared.csproj";
	viewsT.Render();

	foreach (var table in model.Tables)
		new LinqContextTemplate { Name = table.name }.Render();

	foreach (var view in model.Views)
			new LinqContextTemplate { Name = view.name }.Render();

	/*foreach (var view in model.Views)
	{
		var t = new LinqTableTemplate { Database = database, Tabular = database.Views[view.name, "dbo"] };
		t.Output.File = "Generated\\Views\\" + view.name + ".cs";
  		t.Output.Project = @"..\..\Blue.Cosacs.Domain\Blue.Cosacs.Shared.csproj";
		t.Render();
		new LinqContextTemplate { Name = view.name }.Render();
	}*/
#>
}
