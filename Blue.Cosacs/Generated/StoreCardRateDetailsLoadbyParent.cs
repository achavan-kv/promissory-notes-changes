

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Artemis Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------




using System;
using System.Collections.Generic;
using System.Data;

namespace Blue.Cosacs
{
    public partial class StoreCardRateDetailsLoadbyParent : Artemis.Runtime.Data.Command
    {
        private const string ConnectionStringName = "Default";
        private const string ProcedureName = "[StoreCardRateDetailsLoadbyParent]";

        public StoreCardRateDetailsLoadbyParent() : base(ConnectionStringName, ProcedureName, CommandType.StoredProcedure) { }


        public StoreCardRateDetailsLoadbyParent(System.Int32? ParentId)
            : base(ConnectionStringName, ProcedureName, CommandType.StoredProcedure)
        {
            this.ParentId = ParentId;

        }




        protected override void Initialize()
        {
            base.Initialize();


            AddInParameter("ParentId", DbType.Int32);

        }

        #region Parameters

        public System.Int32? ParentId
        {

            set { this[0] = value; }

        }

        #endregion
    }
}

namespace Blue.Cosacs
{

    public partial class StoreCardRateDetailsLoadbyParent
    {


        [Serializable]
        public abstract partial class Record
        {

            public abstract System.Int32? Id
            {
                get;
            }

            public abstract System.Int32? ParentID
            {
                get;
            }

            public abstract System.Int32? ScoreFrom
            {
                get;
            }

            public abstract System.Int32? ScoreTo
            {
                get;
            }

            public abstract System.Decimal? PurchaseInterestRate
            {
                get;
            }

        }

        class Online : Record
        {
            public IDataRecord Record;


            public override System.Int32? Id
            {
                get
                {
                    if (Record.IsDBNull(0))
                        return null;
                    else
                        return (System.Int32)Record[0];
                }
            }

            public override System.Int32? ParentID
            {
                get
                {
                    if (Record.IsDBNull(1))
                        return null;
                    else
                        return (System.Int32)Record[1];
                }
            }

            public override System.Int32? ScoreFrom
            {
                get
                {
                    if (Record.IsDBNull(2))
                        return null;
                    else
                        return (System.Int32)Record[2];
                }
            }

            public override System.Int32? ScoreTo
            {
                get
                {
                    if (Record.IsDBNull(3))
                        return null;
                    else
                        return (System.Int32)Record[3];
                }
            }

            public override System.Decimal? PurchaseInterestRate
            {
                get
                {
                    if (Record.IsDBNull(4))
                        return null;
                    else
                        return (System.Decimal)Record[4];
                }
            }

        }

        public class Reader : IDisposable, IEnumerable<Record>
        {
            public Reader(IDataReader reader)
            {
                this.reader = reader;
            }

            private IDataReader reader;

            public void Dispose()
            {
                reader.Dispose();
            }

            public IEnumerator<Record> GetEnumerator()
            {
                var ro = new Online();

                using (reader)
                    while (reader.Read())
                    {
                        ro.Record = reader;
                        yield return ro;
                    }
            }

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return GetEnumerator();
            }
        }

        public Reader Execute()
        {
            return new Reader(ExecuteReader());
        }

        public Reader Execute(System.Int32? ParentId)
        {
            this.ParentId = ParentId;

            Reader _result = Execute();

            return _result;
        }



    }
}
