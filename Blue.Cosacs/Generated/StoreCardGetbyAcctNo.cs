

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Artemis Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------




using System;
using System.Collections.Generic;
using System.Data;

namespace Blue.Cosacs
{
    public partial class StoreCardGetbyAcctNo : Artemis.Runtime.Data.Command
    {
        private const string ConnectionStringName = "Default";
        private const string ProcedureName = "[StoreCardGetbyAcctNo]";

	    public StoreCardGetbyAcctNo() : base(ConnectionStringName, ProcedureName, CommandType.StoredProcedure) {}

	    
	    public StoreCardGetbyAcctNo(System.String acctno) : base(ConnectionStringName, ProcedureName, CommandType.StoredProcedure)
	    {
		    this.acctno = acctno;

	    }
	    

	    

protected override void Initialize()
{
	base.Initialize();
	
	
	AddInParameter("acctno", DbType.String);
	
}

#region Parameters

public System.String acctno
{
	
	set { this[0] = value; }
	
}

#endregion
    }
}

namespace Blue.Cosacs
{
	
	public partial class StoreCardGetbyAcctNo
	{
		

[Serializable]
public abstract partial class Record
{
	
	public abstract System.Int32? Id
	{
		get;
	}
	
	public abstract System.Int32? Version
	{
		get;
	}
	
	public abstract System.Boolean? IsDeleted
	{
		get;
	}
	
	public abstract System.String CardName
	{
		get;
	}
	
	public abstract System.Int64? CardNumber
	{
		get;
	}
	
	public abstract System.Int16? IssueYear
	{
		get;
	}
	
	public abstract System.Byte? IssueMonth
	{
		get;
	}
	
	public abstract System.Int16? ExpirationYear
	{
		get;
	}
	
	public abstract System.Byte? ExpirationMonth
	{
		get;
	}
	
	public abstract System.String AcctNo
	{
		get;
	}
	
	public abstract System.DateTime? ActivatedOn
	{
		get;
	}
	
	public abstract System.DateTime? LostorStolenOn
	{
		get;
	}
	
	public abstract System.Decimal? MonthlyAmount
	{
		get;
	}
	
	public abstract System.String PaymentMethod
	{
		get;
	}
	
	public abstract System.String PaymentOption
	{
		get;
	}
	
	public abstract System.Int32? RateId
	{
		get;
	}
	
	public abstract System.Double? InterestRate
	{
		get;
	}
	
	public abstract System.Boolean? RateFixed
	{
		get;
	}
	
	public abstract System.String SecurityQuestion
	{
		get;
	}
    
	public abstract System.String SecurityAnswer
	{
		get;
	}
	
	public abstract System.String StatementFrequency
	{
		get;
	}

    public abstract System.String Status
    {
        get;
    }


    public abstract System.Boolean? NoStatements
    {
        get;
    }


    public abstract System.String ContactMethod
    {
        get;
    }


    public abstract System.DateTime? dateNotePrinted
    {
        get;
    }
    public abstract System.DateTime? DateLastStatementPrinted
    {
        get;
    }
    public abstract System.DateTime? DatePaymentDue
    {
        get;
    }
    public abstract System.Int32? ExportRunNo
    {
        get;
    }
	
}

class Online : Record
{
	public IDataRecord Record;
	
	
	public override System.Int32? Id
	{
		get 
		{ 
			if (Record.IsDBNull(0))
				return null;
			else
				return (System.Int32)Record[0]; 
		}
	}
	
	public override System.Int32? Version
	{
		get 
		{ 
			if (Record.IsDBNull(1))
				return null;
			else
				return (System.Int32)Record[1]; 
		}
	}
	
	public override System.Boolean? IsDeleted
	{
		get 
		{ 
			if (Record.IsDBNull(2))
				return null;
			else
				return (System.Boolean)Record[2]; 
		}
	}
	
	public override System.String CardName
	{
		get 
		{ 
			if (Record.IsDBNull(3))
				return null;
			else
				return (System.String)Record[3]; 
		}
	}
	
	public override System.Int64? CardNumber
	{
		get 
		{ 
			if (Record.IsDBNull(4))
				return null;
			else
				return (System.Int64)Record[4]; 
		}
	}
	
	public override System.Int16? IssueYear
	{
		get 
		{ 
			if (Record.IsDBNull(5))
				return null;
			else
				return (System.Int16)Record[5]; 
		}
	}
	
	public override System.Byte? IssueMonth
	{
		get 
		{ 
			if (Record.IsDBNull(6))
				return null;
			else
				return (System.Byte)Record[6]; 
		}
	}
	
	public override System.Int16? ExpirationYear
	{
		get 
		{ 
			if (Record.IsDBNull(7))
				return null;
			else
				return (System.Int16)Record[7]; 
		}
	}
	
	public override System.Byte? ExpirationMonth
	{
		get 
		{ 
			if (Record.IsDBNull(8))
				return null;
			else
				return (System.Byte)Record[8]; 
		}
	}
	
	public override System.String AcctNo
	{
		get 
		{ 
			if (Record.IsDBNull(9))
				return null;
			else
				return (System.String)Record[9]; 
		}
	}
	
	public override System.DateTime? ActivatedOn
	{
		get 
		{ 
			if (Record.IsDBNull(10))
				return null;
			else
				return (System.DateTime)Record[10]; 
		}
	}
	
	public override System.DateTime? LostorStolenOn
	{
		get 
		{ 
			if (Record.IsDBNull(11))
				return null;
			else
				return (System.DateTime)Record[11]; 
		}
	}
	
	public override System.Decimal? MonthlyAmount
	{
		get 
		{ 
			if (Record.IsDBNull(12))
				return null;
			else
				return (System.Decimal)Record[12]; 
		}
	}
	
	public override System.String PaymentMethod
	{
		get 
		{ 
			if (Record.IsDBNull(13))
				return null;
			else
				return (System.String)Record[13]; 
		}
	}
	
	public override System.String PaymentOption
	{
		get 
		{ 
			if (Record.IsDBNull(14))
				return null;
			else
				return (System.String)Record[14]; 
		}
	}
	
	public override System.Int32? RateId
	{
		get 
		{ 
			if (Record.IsDBNull(15))
				return null;
			else
				return (System.Int32)Record[15]; 
		}
	}
	
	public override System.Double? InterestRate
	{
		get 
		{ 
			if (Record.IsDBNull(16))
				return null;
			else
				return (System.Double)Record[16]; 
		}
	}
	
	public override System.Boolean? RateFixed
	{
		get 
		{ 
			if (Record.IsDBNull(17))
				return null;
			else
				return (System.Boolean)Record[17]; 
		}
	}
	
	public override System.String SecurityQuestion
	{
		get 
		{ 
			if (Record.IsDBNull(18))
				return null;
			else
				return (System.String)Record[18]; 
		}
	}
	
	public override System.String SecurityAnswer
	{
		get 
		{ 
			if (Record.IsDBNull(19))
				return null;
			else
				return (System.String)Record[19]; 
		}
	}
	
	public override System.String StatementFrequency
	{
		get 
		{ 
			if (Record.IsDBNull(20))
				return null;
			else
				return (System.String)Record[20]; 
		}
	}

    public override System.String Status
    {
        get
        {
            if (Record.IsDBNull(21))
                return null;
            else
                return (System.String)Record[21];
        }
    }

    public override System.Boolean? NoStatements
    {
        get
        {
            if (Record.IsDBNull(22))
                return false;
            else
                return (System.Boolean)Record[22];
        }
    }

    public override System.String ContactMethod
    {
        get
        {
            if (Record.IsDBNull(23))
                return null;
            else
                return (System.String)Record[23];
        }
    }

    public override System.DateTime? dateNotePrinted
    {
        get
        {
            if (Record.IsDBNull(24))
                return null;
            else
                return (System.DateTime)Record[24];
        }
    }

    public override System.DateTime? DateLastStatementPrinted
    {
        get
        {
            if (Record.IsDBNull(25))
                return null;
            else
                return (System.DateTime)Record[25];
        }
    }

    public override System.DateTime? DatePaymentDue
    {
        get
        {
            if (Record.IsDBNull(26))
                return null;
            else
                return (System.DateTime)Record[26];
        }
    }

    public override System.Int32? ExportRunNo
    {
        get
        {
            if (Record.IsDBNull(27))
                return null;
            else
                return (System.Int32)Record[27];
        }
    }
}

public class Reader : IDisposable, IEnumerable<Record>
{
	public Reader(IDataReader reader)
	{
		this.reader = reader;
	}
				
	private IDataReader reader;
	
	public void Dispose()
	{
		reader.Dispose();
	}
	
	public IEnumerator<Record> GetEnumerator()
	{
		var ro = new Online();
		
		using (reader)
			while (reader.Read())
			{
				ro.Record = reader;
				yield return ro;
			}
	}
	
	System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
	{
		return GetEnumerator();
	}
}

public Reader Execute()
{
	return new Reader(ExecuteReader());
}

public Reader Execute(System.String acctno)
{
	this.acctno = acctno;

	Reader _result = Execute();
	
	return _result;
}



	}
}
