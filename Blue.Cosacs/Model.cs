














































//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Cosacs Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace Blue.Cosacs
{

    public partial class AcctCheckIfLatest : Blue.Cosacs.Procedure
    {
        public AcctCheckIfLatest(SqlConnection connection = null, SqlTransaction transaction = null) : base("AcctCheckIfLatest", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@acctno", SqlDbType.Char, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@custid", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@latest", SqlDbType.TinyInt, 1)).Direction = ParameterDirection.Output;

        }


        public string acctno
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string custid
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public byte? latest
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (byte?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

    }


    partial class AcctCheckIfLatest
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _acctno, string _custid, out byte? _latest)
        {
            this.acctno = _acctno;
            this.custid = _custid;

            var __result = ExecuteNonQuery();
            _latest = this.latest;

            return __result;
        }

    }


    public partial class AcctCheckNewafterBadStatus : Blue.Cosacs.Procedure
    {
        public AcctCheckNewafterBadStatus(SqlConnection connection = null, SqlTransaction transaction = null) : base("AcctCheckNewafterBadStatus", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@acctno", SqlDbType.Char, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@custid", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@worstcurrent", SqlDbType.Char, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@worstsettled", SqlDbType.Char, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@hasacceptedaccountafterbad", SqlDbType.TinyInt, 1)).Direction = ParameterDirection.Output;

        }


        public string acctno
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string custid
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public string worstcurrent
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public string worstsettled
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public byte? hasacceptedaccountafterbad
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (byte?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

    }


    partial class AcctCheckNewafterBadStatus
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _acctno, string _custid, string _worstcurrent, string _worstsettled, out byte? _hasacceptedaccountafterbad)
        {
            this.acctno = _acctno;
            this.custid = _custid;
            this.worstcurrent = _worstcurrent;
            this.worstsettled = _worstsettled;

            var __result = ExecuteNonQuery();
            _hasacceptedaccountafterbad = this.hasacceptedaccountafterbad;

            return __result;
        }

    }


    public partial class CustomerUpdateStoreCardLimit : Blue.Cosacs.Procedure
    {
        public CustomerUpdateStoreCardLimit(SqlConnection connection = null, SqlTransaction transaction = null) : base("CustomerUpdateStoreCardLimit", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@custID", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@storeCardLimit", SqlDbType.Money, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

        }


        public string custID
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public decimal? storeCardLimit
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public int? Return
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

    }


    partial class CustomerUpdateStoreCardLimit
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _custID, decimal? _storeCardLimit, out int? _Return)
        {
            this.custID = _custID;
            this.storeCardLimit = _storeCardLimit;

            var __result = ExecuteNonQuery();
            _Return = this.Return;

            return __result;
        }

    }


    public partial class CustomerUpdateStoreCardAvailable : Blue.Cosacs.Procedure
    {
        public CustomerUpdateStoreCardAvailable(SqlConnection connection = null, SqlTransaction transaction = null) : base("CustomerUpdateStoreCardAvailable", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@custID", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@storeCardLimit", SqlDbType.Money, 8)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@storeCardAvailable", SqlDbType.Money, 8)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

        }


        public string custID
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public decimal? storeCardLimit
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public decimal? storeCardAvailable
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public int? Return
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

    }


    partial class CustomerUpdateStoreCardAvailable
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _custID, out decimal? _storeCardLimit, out decimal? _storeCardAvailable, out int? _Return)
        {
            this.custID = _custID;

            var __result = ExecuteNonQuery();
            _storeCardLimit = this.storeCardLimit;
            _storeCardAvailable = this.storeCardAvailable;
            _Return = this.Return;

            return __result;
        }

    }


    public partial class CountryMaintenanceSetValue : Blue.Cosacs.Procedure
    {
        public CountryMaintenanceSetValue(SqlConnection connection = null, SqlTransaction transaction = null) : base("CountryMaintenanceSetValue", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@codename", SqlDbType.VarChar, 30)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@value", SqlDbType.VarChar, 1500)).Direction = ParameterDirection.Input;

        }


        public string codename
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string value
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

    }


    partial class CountryMaintenanceSetValue
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _codename, string _value)
        {
            this.codename = _codename;
            this.value = _value;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class CalculateAvailableSpendForCustomer : Blue.Cosacs.Procedure
    {
        public CalculateAvailableSpendForCustomer(SqlConnection connection = null, SqlTransaction transaction = null) : base("CalculateAvailableSpendForCustomer", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@custid", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

        }


        public string custid
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class CalculateAvailableSpendForCustomer
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _custid)
        {
            this.custid = _custid;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class dbcustacctadd : Blue.Cosacs.Procedure
    {
        public dbcustacctadd(SqlConnection connection = null, SqlTransaction transaction = null) : base("dbcustacctadd", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@origbr", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@custid", SqlDbType.VarChar, 15)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@acctno", SqlDbType.Char, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@hldorjnt", SqlDbType.Char, 1)).Direction = ParameterDirection.Input;

        }


        public short? origbr
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string custid
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public string acctno
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public string hldorjnt
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

    }


    partial class dbcustacctadd
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(short? _origbr, string _custid, string _acctno, string _hldorjnt)
        {
            this.origbr = _origbr;
            this.custid = _custid;
            this.acctno = _acctno;
            this.hldorjnt = _hldorjnt;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class GetMaxCustArrearsLevel : Blue.Cosacs.Procedure
    {
        public GetMaxCustArrearsLevel(SqlConnection connection = null, SqlTransaction transaction = null) : base("GetMaxCustArrearsLevel", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@custid", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@maxarrearslevel", SqlDbType.Float, 8)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@maxsettledarrearslevel", SqlDbType.Float, 8)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@settledmonthstocheck", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@livemonthsHistory", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@maxhistoricarrearslevel", SqlDbType.Float, 8)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@datefrom", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

        }


        public string custid
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public double? maxarrearslevel
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (double?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public double? maxsettledarrearslevel
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (double?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public int? settledmonthstocheck
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public int? livemonthsHistory
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

        public double? maxhistoricarrearslevel
        {
            get
            {
                var v = cmd.Parameters[5].Value;
                if (v == DBNull.Value)
                    return null;
                return (double?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[5].Value = DBNull.Value;
                else
                    cmd.Parameters[5].Value = value;
            }
        }

        public DateTime? datefrom
        {
            get
            {
                var v = cmd.Parameters[6].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[6].Value = DBNull.Value;
                else
                    cmd.Parameters[6].Value = value;
            }
        }

    }


    partial class GetMaxCustArrearsLevel
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _custid, out double? _maxarrearslevel, out double? _maxsettledarrearslevel, int? _settledmonthstocheck, int? _livemonthsHistory, out double? _maxhistoricarrearslevel, DateTime? _datefrom)
        {
            this.custid = _custid;
            this.settledmonthstocheck = _settledmonthstocheck;
            this.livemonthsHistory = _livemonthsHistory;
            this.datefrom = _datefrom;

            var __result = ExecuteNonQuery();
            _maxarrearslevel = this.maxarrearslevel;
            _maxsettledarrearslevel = this.maxsettledarrearslevel;
            _maxhistoricarrearslevel = this.maxhistoricarrearslevel;

            return __result;
        }

    }


    public partial class InstalPlanUpdateInstantCredit : Blue.Cosacs.Procedure
    {
        public InstalPlanUpdateInstantCredit(SqlConnection connection = null, SqlTransaction transaction = null) : base("InstalPlanUpdateInstantCredit", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@acctno", SqlDbType.Char, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@InstantCredit", SqlDbType.VarChar, 3)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@instalmentWaived", SqlDbType.Bit, 1)).Direction = ParameterDirection.Input;

        }


        public string acctno
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string InstantCredit
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public bool? instalmentWaived
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (bool?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

    }


    partial class InstalPlanUpdateInstantCredit
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _acctno, string _InstantCredit, bool? _instalmentWaived)
        {
            this.acctno = _acctno;
            this.InstantCredit = _InstantCredit;
            this.instalmentWaived = _instalmentWaived;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class NonStockDeletionDatesSave : Blue.Cosacs.Procedure
    {
        public NonStockDeletionDatesSave(SqlConnection connection = null, SqlTransaction transaction = null) : base("NonStockDeletionDatesSave", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@itemno", SqlDbType.VarChar, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@branchno", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@DeletionDate", SqlDbType.SmallDateTime, 4)).Direction = ParameterDirection.Input;

        }


        public string itemno
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public int? branchno
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public DateTime? DeletionDate
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

    }


    partial class NonStockDeletionDatesSave
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _itemno, int? _branchno, DateTime? _DeletionDate)
        {
            this.itemno = _itemno;
            this.branchno = _branchno;
            this.DeletionDate = _DeletionDate;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class NonStockMarkDeleted : Blue.Cosacs.Procedure
    {
        public NonStockMarkDeleted(SqlConnection connection = null, SqlTransaction transaction = null) : base("NonStockMarkDeleted", connection, transaction)
        {

        }


    }


    partial class NonStockMarkDeleted
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


    }


    public partial class ProposalUpdateUpliftPercent : Blue.Cosacs.Procedure
    {
        public ProposalUpdateUpliftPercent(SqlConnection connection = null, SqlTransaction transaction = null) : base("ProposalUpdateUpliftPercent", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@acctno", SqlDbType.Char, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@custid", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@upliftpercent", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

        }


        public string acctno
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string custid
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public int? upliftpercent
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

    }


    partial class ProposalUpdateUpliftPercent
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _acctno, string _custid, int? _upliftpercent)
        {
            this.acctno = _acctno;
            this.custid = _custid;
            this.upliftpercent = _upliftpercent;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class PurchaseOrderDeleteAll : Blue.Cosacs.Procedure
    {
        public PurchaseOrderDeleteAll(SqlConnection connection = null, SqlTransaction transaction = null) : base("PurchaseOrderDeleteAll", connection, transaction)
        {

        }


    }


    partial class PurchaseOrderDeleteAll
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


    }


    public partial class PurchaseOrderSave : Blue.Cosacs.Procedure
    {
        public PurchaseOrderSave(SqlConnection connection = null, SqlTransaction transaction = null) : base("PurchaseOrderSave", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Warehouse", SqlDbType.VarChar, 3)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@suppliercode", SqlDbType.VarChar, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@OrderNumber", SqlDbType.VarChar, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@stringdatedue", SqlDbType.VarChar, 10)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@quantity", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@itemno", SqlDbType.VarChar, 18)).Direction = ParameterDirection.Input;

        }


        public string Warehouse
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string suppliercode
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public string OrderNumber
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public string stringdatedue
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public int? quantity
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

        public string itemno
        {
            get
            {
                var v = cmd.Parameters[5].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[5].Value = DBNull.Value;
                else
                    cmd.Parameters[5].Value = value;
            }
        }

    }


    partial class PurchaseOrderSave
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _Warehouse, string _suppliercode, string _OrderNumber, string _stringdatedue, int? _quantity, string _itemno)
        {
            this.Warehouse = _Warehouse;
            this.suppliercode = _suppliercode;
            this.OrderNumber = _OrderNumber;
            this.stringdatedue = _stringdatedue;
            this.quantity = _quantity;
            this.itemno = _itemno;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class SRActivateTechnician : Blue.Cosacs.Procedure
    {
        public SRActivateTechnician(SqlConnection connection = null, SqlTransaction transaction = null) : base("SRActivateTechnician", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@TechnicianId", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

        }


        public int? TechnicianId
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class SRActivateTechnician
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(int? _TechnicianId)
        {
            this.TechnicianId = _TechnicianId;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class ServiceRequestAddComments : Blue.Cosacs.Procedure
    {
        public ServiceRequestAddComments(SqlConnection connection = null, SqlTransaction transaction = null) : base("ServiceRequestAddComments", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@serviceRequestNo", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@user", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@dateAdded", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@comments", SqlDbType.VarChar, 500)).Direction = ParameterDirection.Input;

        }


        public int? serviceRequestNo
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public int? user
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public DateTime? dateAdded
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public string comments
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

    }


    partial class ServiceRequestAddComments
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(int? _serviceRequestNo, int? _user, DateTime? _dateAdded, string _comments)
        {
            this.serviceRequestNo = _serviceRequestNo;
            this.user = _user;
            this.dateAdded = _dateAdded;
            this.comments = _comments;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class StoreCardQualify : Blue.Cosacs.Procedure
    {
        public StoreCardQualify(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardQualify", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@custid", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@points", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@scorecard", SqlDbType.Char, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@StoreCardApproved", SqlDbType.Bit, 1)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@rundate", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

        }


        public string custid
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public int? points
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public string scorecard
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public bool? StoreCardApproved
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (bool?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public DateTime? rundate
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

    }


    partial class StoreCardQualify
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(string _custid, int? _points, string _scorecard, out bool? _StoreCardApproved, DateTime? _rundate)
        {
            this.custid = _custid;
            this.points = _points;
            this.scorecard = _scorecard;
            this.rundate = _rundate;

            var __result = ExecuteDataSet();
            _StoreCardApproved = this.StoreCardApproved;

            return __result;
        }

    }


    public partial class StoreCardBranchQualRulesGet : Blue.Cosacs.Procedure
    {
        public StoreCardBranchQualRulesGet(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardBranchQualRulesGet", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@branchNo", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

        }


        public short? branchNo
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class StoreCardBranchQualRulesGet
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(short? _branchNo)
        {
            this.branchNo = _branchNo;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class StoreCardBranchQualRulesSave : Blue.Cosacs.Procedure
    {
        public StoreCardBranchQualRulesSave(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardBranchQualRulesSave", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@branchNo", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@minApplicationScore", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@minBehaviouralScore", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@minMthsAcctHistX", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@minMthsAcctHistY", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@maxCurrMthsInArrs", SqlDbType.Decimal, 5)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@maxPrevMthsInArrsX", SqlDbType.Decimal, 5)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@maxPrevMthsInArrsY", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@pcentInitRFLimit", SqlDbType.Float, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@maxNoCustForApproval", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@dateChanged", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@empeenoChange", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@applyTo", SqlDbType.VarChar, 15)).Direction = ParameterDirection.Input;

        }


        public short? branchNo
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public int? minApplicationScore
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public int? minBehaviouralScore
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public int? minMthsAcctHistX
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public int? minMthsAcctHistY
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

        public decimal? maxCurrMthsInArrs
        {
            get
            {
                var v = cmd.Parameters[5].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[5].Value = DBNull.Value;
                else
                    cmd.Parameters[5].Value = value;
            }
        }

        public decimal? maxPrevMthsInArrsX
        {
            get
            {
                var v = cmd.Parameters[6].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[6].Value = DBNull.Value;
                else
                    cmd.Parameters[6].Value = value;
            }
        }

        public int? maxPrevMthsInArrsY
        {
            get
            {
                var v = cmd.Parameters[7].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[7].Value = DBNull.Value;
                else
                    cmd.Parameters[7].Value = value;
            }
        }

        public double? pcentInitRFLimit
        {
            get
            {
                var v = cmd.Parameters[8].Value;
                if (v == DBNull.Value)
                    return null;
                return (double?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[8].Value = DBNull.Value;
                else
                    cmd.Parameters[8].Value = value;
            }
        }

        public int? maxNoCustForApproval
        {
            get
            {
                var v = cmd.Parameters[9].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[9].Value = DBNull.Value;
                else
                    cmd.Parameters[9].Value = value;
            }
        }

        public DateTime? dateChanged
        {
            get
            {
                var v = cmd.Parameters[10].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[10].Value = DBNull.Value;
                else
                    cmd.Parameters[10].Value = value;
            }
        }

        public int? empeenoChange
        {
            get
            {
                var v = cmd.Parameters[11].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[11].Value = DBNull.Value;
                else
                    cmd.Parameters[11].Value = value;
            }
        }

        public string applyTo
        {
            get
            {
                var v = cmd.Parameters[12].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[12].Value = DBNull.Value;
                else
                    cmd.Parameters[12].Value = value;
            }
        }

    }


    partial class StoreCardBranchQualRulesSave
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(short? _branchNo, int? _minApplicationScore, int? _minBehaviouralScore, int? _minMthsAcctHistX, int? _minMthsAcctHistY, decimal? _maxCurrMthsInArrs, decimal? _maxPrevMthsInArrsX, int? _maxPrevMthsInArrsY, double? _pcentInitRFLimit, int? _maxNoCustForApproval, DateTime? _dateChanged, int? _empeenoChange, string _applyTo)
        {
            this.branchNo = _branchNo;
            this.minApplicationScore = _minApplicationScore;
            this.minBehaviouralScore = _minBehaviouralScore;
            this.minMthsAcctHistX = _minMthsAcctHistX;
            this.minMthsAcctHistY = _minMthsAcctHistY;
            this.maxCurrMthsInArrs = _maxCurrMthsInArrs;
            this.maxPrevMthsInArrsX = _maxPrevMthsInArrsX;
            this.maxPrevMthsInArrsY = _maxPrevMthsInArrsY;
            this.pcentInitRFLimit = _pcentInitRFLimit;
            this.maxNoCustForApproval = _maxNoCustForApproval;
            this.dateChanged = _dateChanged;
            this.empeenoChange = _empeenoChange;
            this.applyTo = _applyTo;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class StoreCardSelectCardsToExport : Blue.Cosacs.Procedure
    {
        public StoreCardSelectCardsToExport(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardSelectCardsToExport", connection, transaction)
        {

        }


    }


    partial class StoreCardSelectCardsToExport
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


    }


    public partial class StoreCardInterestRatesUpdate : Blue.Cosacs.Procedure
    {
        public StoreCardInterestRatesUpdate(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardInterestRatesUpdate", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@rundate", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

        }


        public DateTime? rundate
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class StoreCardInterestRatesUpdate
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(DateTime? _rundate)
        {
            this.rundate = _rundate;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class StoreCardExportUpdateCardIssued : Blue.Cosacs.Procedure
    {
        public StoreCardExportUpdateCardIssued(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardExportUpdateCardIssued", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@runNo", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

        }


        public int? runNo
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class StoreCardExportUpdateCardIssued
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(int? _runNo)
        {
            this.runNo = _runNo;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class StoreCardRateDelete : Blue.Cosacs.Procedure
    {
        public StoreCardRateDelete(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardRateDelete", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@user", SqlDbType.VarChar, 50)).Direction = ParameterDirection.Input;

        }


        public int? Id
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string user
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

    }


    partial class StoreCardRateDelete
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(int? _Id, string _user)
        {
            this.Id = _Id;
            this.user = _user;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class StoreCardRateDetailsSave : Blue.Cosacs.Procedure
    {
        public StoreCardRateDetailsSave(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardRateDetailsSave", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@ParentID", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@AppScoreFrom", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@AppScoreTo", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@BehaveScoreFrom", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@BehaveScoreTo", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@PurchaseInterestRate", SqlDbType.Float, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@user", SqlDbType.VarChar, 50)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@createdOn", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@RateName", SqlDbType.VarChar, 50)).Direction = ParameterDirection.Input;

        }


        public int? Id
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public int? ParentID
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public short? AppScoreFrom
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public short? AppScoreTo
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public short? BehaveScoreFrom
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

        public short? BehaveScoreTo
        {
            get
            {
                var v = cmd.Parameters[5].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[5].Value = DBNull.Value;
                else
                    cmd.Parameters[5].Value = value;
            }
        }

        public double? PurchaseInterestRate
        {
            get
            {
                var v = cmd.Parameters[6].Value;
                if (v == DBNull.Value)
                    return null;
                return (double?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[6].Value = DBNull.Value;
                else
                    cmd.Parameters[6].Value = value;
            }
        }

        public string user
        {
            get
            {
                var v = cmd.Parameters[7].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[7].Value = DBNull.Value;
                else
                    cmd.Parameters[7].Value = value;
            }
        }

        public DateTime? createdOn
        {
            get
            {
                var v = cmd.Parameters[8].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[8].Value = DBNull.Value;
                else
                    cmd.Parameters[8].Value = value;
            }
        }

        public string RateName
        {
            get
            {
                var v = cmd.Parameters[9].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[9].Value = DBNull.Value;
                else
                    cmd.Parameters[9].Value = value;
            }
        }

    }


    partial class StoreCardRateDetailsSave
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(int? _Id, int? _ParentID, short? _AppScoreFrom, short? _AppScoreTo, short? _BehaveScoreFrom, short? _BehaveScoreTo, double? _PurchaseInterestRate, string _user, DateTime? _createdOn, string _RateName)
        {
            this.Id = _Id;
            this.ParentID = _ParentID;
            this.AppScoreFrom = _AppScoreFrom;
            this.AppScoreTo = _AppScoreTo;
            this.BehaveScoreFrom = _BehaveScoreFrom;
            this.BehaveScoreTo = _BehaveScoreTo;
            this.PurchaseInterestRate = _PurchaseInterestRate;
            this.user = _user;
            this.createdOn = _createdOn;
            this.RateName = _RateName;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class StoreCardRateDetailsGetforPoints : Blue.Cosacs.Procedure
    {
        public StoreCardRateDetailsGetforPoints(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardRateDetailsGetforPoints", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@points", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@scorecard", SqlDbType.Char, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@PurchaseInterestRate", SqlDbType.Decimal, 5)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@rateFixed", SqlDbType.Bit, 1)).Direction = ParameterDirection.Output;

        }


        public int? id
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public int? points
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public string scorecard
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public decimal? PurchaseInterestRate
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public bool? rateFixed
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (bool?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

    }


    partial class StoreCardRateDetailsGetforPoints
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(out int? _id, int? _points, string _scorecard, out decimal? _PurchaseInterestRate, out bool? _rateFixed)
        {
            this.points = _points;
            this.scorecard = _scorecard;

            var __result = ExecuteNonQuery();
            _id = this.id;
            _PurchaseInterestRate = this.PurchaseInterestRate;
            _rateFixed = this.rateFixed;

            return __result;
        }

    }


    public partial class StoreCardRateDetailsGet : Blue.Cosacs.Procedure
    {
        public StoreCardRateDetailsGet(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardRateDetailsGet", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@points", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@scorecard", SqlDbType.Char, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@PurchaseInterestRate", SqlDbType.Decimal, 5)).Direction = ParameterDirection.Output;

        }


        public int? id
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public int? points
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public string scorecard
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public decimal? PurchaseInterestRate
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

    }


    partial class StoreCardRateDetailsGet
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(int? _id, int? _points, string _scorecard, out decimal? _PurchaseInterestRate)
        {
            this.id = _id;
            this.points = _points;
            this.scorecard = _scorecard;

            var __result = ExecuteNonQuery();
            _PurchaseInterestRate = this.PurchaseInterestRate;

            return __result;
        }

    }


    public partial class StoreCardRateSave : Blue.Cosacs.Procedure
    {
        public StoreCardRateSave(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardRateSave", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@isdeleted", SqlDbType.Bit, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@name", SqlDbType.VarChar, 50)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@idout", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@ratefixed", SqlDbType.Bit, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@isDefaultRate", SqlDbType.Bit, 1)).Direction = ParameterDirection.Input;

        }


        public bool? isdeleted
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (bool?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string name
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public int? id
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public int? idout
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public bool? ratefixed
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (bool?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

        public bool? isDefaultRate
        {
            get
            {
                var v = cmd.Parameters[5].Value;
                if (v == DBNull.Value)
                    return null;
                return (bool?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[5].Value = DBNull.Value;
                else
                    cmd.Parameters[5].Value = value;
            }
        }

    }


    partial class StoreCardRateSave
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(bool? _isdeleted, string _name, int? _id, out int? _idout, bool? _ratefixed, bool? _isDefaultRate)
        {
            this.isdeleted = _isdeleted;
            this.name = _name;
            this.id = _id;
            this.ratefixed = _ratefixed;
            this.isDefaultRate = _isDefaultRate;

            var __result = ExecuteNonQuery();
            _idout = this.idout;

            return __result;
        }

    }


    public partial class StoreCardSave : Blue.Cosacs.Procedure
    {
        public StoreCardSave(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardSave", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@CardNumber", SqlDbType.BigInt, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@CardName", SqlDbType.VarChar, 26)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@IssueYear", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@IssueMonth", SqlDbType.TinyInt, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@ExpirationYear", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@ExpirationMonth", SqlDbType.TinyInt, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@InterestRate", SqlDbType.Decimal, 5)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@RateId", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@AcctNo", SqlDbType.Char, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@custid", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@MonthlyAmount", SqlDbType.Decimal, 9)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@paymentMethod", SqlDbType.VarChar, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@paymentOption", SqlDbType.VarChar, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@ratefixed", SqlDbType.Bit, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@StatementFrequency", SqlDbType.VarChar, 24)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@Nostatements", SqlDbType.Bit, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@DateLastStatementPrinted", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@DatePaymentDue", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@ContactMethod", SqlDbType.VarChar, 6)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@DateNotePrinted", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

        }


        public long? CardNumber
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (long?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string CardName
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public short? IssueYear
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public byte? IssueMonth
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (byte?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public short? ExpirationYear
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

        public byte? ExpirationMonth
        {
            get
            {
                var v = cmd.Parameters[5].Value;
                if (v == DBNull.Value)
                    return null;
                return (byte?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[5].Value = DBNull.Value;
                else
                    cmd.Parameters[5].Value = value;
            }
        }

        public decimal? InterestRate
        {
            get
            {
                var v = cmd.Parameters[6].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[6].Value = DBNull.Value;
                else
                    cmd.Parameters[6].Value = value;
            }
        }

        public int? RateId
        {
            get
            {
                var v = cmd.Parameters[7].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[7].Value = DBNull.Value;
                else
                    cmd.Parameters[7].Value = value;
            }
        }

        public string AcctNo
        {
            get
            {
                var v = cmd.Parameters[8].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[8].Value = DBNull.Value;
                else
                    cmd.Parameters[8].Value = value;
            }
        }

        public string custid
        {
            get
            {
                var v = cmd.Parameters[9].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[9].Value = DBNull.Value;
                else
                    cmd.Parameters[9].Value = value;
            }
        }

        public decimal? MonthlyAmount
        {
            get
            {
                var v = cmd.Parameters[10].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[10].Value = DBNull.Value;
                else
                    cmd.Parameters[10].Value = value;
            }
        }

        public string paymentMethod
        {
            get
            {
                var v = cmd.Parameters[11].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[11].Value = DBNull.Value;
                else
                    cmd.Parameters[11].Value = value;
            }
        }

        public string paymentOption
        {
            get
            {
                var v = cmd.Parameters[12].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[12].Value = DBNull.Value;
                else
                    cmd.Parameters[12].Value = value;
            }
        }

        public bool? ratefixed
        {
            get
            {
                var v = cmd.Parameters[13].Value;
                if (v == DBNull.Value)
                    return null;
                return (bool?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[13].Value = DBNull.Value;
                else
                    cmd.Parameters[13].Value = value;
            }
        }

        public string StatementFrequency
        {
            get
            {
                var v = cmd.Parameters[14].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[14].Value = DBNull.Value;
                else
                    cmd.Parameters[14].Value = value;
            }
        }

        public bool? Nostatements
        {
            get
            {
                var v = cmd.Parameters[15].Value;
                if (v == DBNull.Value)
                    return null;
                return (bool?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[15].Value = DBNull.Value;
                else
                    cmd.Parameters[15].Value = value;
            }
        }

        public DateTime? DateLastStatementPrinted
        {
            get
            {
                var v = cmd.Parameters[16].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[16].Value = DBNull.Value;
                else
                    cmd.Parameters[16].Value = value;
            }
        }

        public DateTime? DatePaymentDue
        {
            get
            {
                var v = cmd.Parameters[17].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[17].Value = DBNull.Value;
                else
                    cmd.Parameters[17].Value = value;
            }
        }

        public string ContactMethod
        {
            get
            {
                var v = cmd.Parameters[18].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[18].Value = DBNull.Value;
                else
                    cmd.Parameters[18].Value = value;
            }
        }

        public DateTime? DateNotePrinted
        {
            get
            {
                var v = cmd.Parameters[19].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[19].Value = DBNull.Value;
                else
                    cmd.Parameters[19].Value = value;
            }
        }

    }


    partial class StoreCardSave
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(long? _CardNumber, string _CardName, short? _IssueYear, byte? _IssueMonth, short? _ExpirationYear, byte? _ExpirationMonth, decimal? _InterestRate, int? _RateId, string _AcctNo, string _custid, decimal? _MonthlyAmount, string _paymentMethod, string _paymentOption, bool? _ratefixed, string _StatementFrequency, bool? _Nostatements, DateTime? _DateLastStatementPrinted, DateTime? _DatePaymentDue, string _ContactMethod, DateTime? _DateNotePrinted)
        {
            this.CardNumber = _CardNumber;
            this.CardName = _CardName;
            this.IssueYear = _IssueYear;
            this.IssueMonth = _IssueMonth;
            this.ExpirationYear = _ExpirationYear;
            this.ExpirationMonth = _ExpirationMonth;
            this.InterestRate = _InterestRate;
            this.RateId = _RateId;
            this.AcctNo = _AcctNo;
            this.custid = _custid;
            this.MonthlyAmount = _MonthlyAmount;
            this.paymentMethod = _paymentMethod;
            this.paymentOption = _paymentOption;
            this.ratefixed = _ratefixed;
            this.StatementFrequency = _StatementFrequency;
            this.Nostatements = _Nostatements;
            this.DateLastStatementPrinted = _DateLastStatementPrinted;
            this.DatePaymentDue = _DatePaymentDue;
            this.ContactMethod = _ContactMethod;
            this.DateNotePrinted = _DateNotePrinted;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class StoreCardGet : Blue.Cosacs.Procedure
    {
        public StoreCardGet(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardGet", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@cardnumber", SqlDbType.BigInt, 8)).Direction = ParameterDirection.Input;

        }


        public long? cardnumber
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (long?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class StoreCardGet
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(long? _cardnumber)
        {
            this.cardnumber = _cardnumber;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class DN_CustomerSearchSP : Blue.Cosacs.Procedure
    {
        public DN_CustomerSearchSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("DN_CustomerSearchSP", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@custid", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@first", SqlDbType.VarChar, 30)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@last", SqlDbType.VarChar, 60)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@limit", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@settled", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@exact", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@storetype", SqlDbType.VarChar, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@address", SqlDbType.VarChar, 60)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@phone", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

        }


        public string custid
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string first
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public string last
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public int? limit
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public short? settled
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

        public int? exact
        {
            get
            {
                var v = cmd.Parameters[5].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[5].Value = DBNull.Value;
                else
                    cmd.Parameters[5].Value = value;
            }
        }

        public string storetype
        {
            get
            {
                var v = cmd.Parameters[6].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[6].Value = DBNull.Value;
                else
                    cmd.Parameters[6].Value = value;
            }
        }

        public string address
        {
            get
            {
                var v = cmd.Parameters[7].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[7].Value = DBNull.Value;
                else
                    cmd.Parameters[7].Value = value;
            }
        }

        public string phone
        {
            get
            {
                var v = cmd.Parameters[8].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[8].Value = DBNull.Value;
                else
                    cmd.Parameters[8].Value = value;
            }
        }

        public int? Return
        {
            get
            {
                var v = cmd.Parameters[9].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[9].Value = DBNull.Value;
                else
                    cmd.Parameters[9].Value = value;
            }
        }

    }


    partial class DN_CustomerSearchSP
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(string _custid, string _first, string _last, int? _limit, short? _settled, int? _exact, string _storetype, string _address, string _phone, out int? _Return)
        {
            this.custid = _custid;
            this.first = _first;
            this.last = _last;
            this.limit = _limit;
            this.settled = _settled;
            this.exact = _exact;
            this.storetype = _storetype;
            this.address = _address;
            this.phone = _phone;

            var __result = ExecuteDataSet();
            _Return = this.Return;

            return __result;
        }

    }


    public partial class StoreCardGetRecentlyQualified : Blue.Cosacs.Procedure
    {
        public StoreCardGetRecentlyQualified(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardGetRecentlyQualified", connection, transaction)
        {

        }


    }


    partial class StoreCardGetRecentlyQualified
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


    }


    public partial class InsertCustAddress : Blue.Cosacs.Procedure
    {
        public InsertCustAddress(SqlConnection connection = null, SqlTransaction transaction = null) : base("InsertCustAddress", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@origbr", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@custid", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@addtype", SqlDbType.Char, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@datein", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@cusaddr1", SqlDbType.VarChar, 50)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@cusaddr2", SqlDbType.VarChar, 50)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@cusaddr3", SqlDbType.VarChar, 50)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@cuspocode", SqlDbType.VarChar, 10)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@custlocn", SqlDbType.VarChar, 76)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@resstatus", SqlDbType.Char, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@mthlyrent", SqlDbType.Float, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@datemoved", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@hasstring", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@Email", SqlDbType.Char, 60)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@PropType", SqlDbType.Char, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@empeenochange", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@datechange", SqlDbType.SmallDateTime, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar, 1000)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@deliveryarea", SqlDbType.NVarChar, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@zone", SqlDbType.VarChar, 4)).Direction = ParameterDirection.Input;

        }


        public short? origbr
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string custid
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public string addtype
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public DateTime? datein
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public string cusaddr1
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

        public string cusaddr2
        {
            get
            {
                var v = cmd.Parameters[5].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[5].Value = DBNull.Value;
                else
                    cmd.Parameters[5].Value = value;
            }
        }

        public string cusaddr3
        {
            get
            {
                var v = cmd.Parameters[6].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[6].Value = DBNull.Value;
                else
                    cmd.Parameters[6].Value = value;
            }
        }

        public string cuspocode
        {
            get
            {
                var v = cmd.Parameters[7].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[7].Value = DBNull.Value;
                else
                    cmd.Parameters[7].Value = value;
            }
        }

        public string custlocn
        {
            get
            {
                var v = cmd.Parameters[8].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[8].Value = DBNull.Value;
                else
                    cmd.Parameters[8].Value = value;
            }
        }

        public string resstatus
        {
            get
            {
                var v = cmd.Parameters[9].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[9].Value = DBNull.Value;
                else
                    cmd.Parameters[9].Value = value;
            }
        }

        public double? mthlyrent
        {
            get
            {
                var v = cmd.Parameters[10].Value;
                if (v == DBNull.Value)
                    return null;
                return (double?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[10].Value = DBNull.Value;
                else
                    cmd.Parameters[10].Value = value;
            }
        }

        public DateTime? datemoved
        {
            get
            {
                var v = cmd.Parameters[11].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[11].Value = DBNull.Value;
                else
                    cmd.Parameters[11].Value = value;
            }
        }

        public short? hasstring
        {
            get
            {
                var v = cmd.Parameters[12].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[12].Value = DBNull.Value;
                else
                    cmd.Parameters[12].Value = value;
            }
        }

        public string Email
        {
            get
            {
                var v = cmd.Parameters[13].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[13].Value = DBNull.Value;
                else
                    cmd.Parameters[13].Value = value;
            }
        }

        public string PropType
        {
            get
            {
                var v = cmd.Parameters[14].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[14].Value = DBNull.Value;
                else
                    cmd.Parameters[14].Value = value;
            }
        }

        public int? empeenochange
        {
            get
            {
                var v = cmd.Parameters[15].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[15].Value = DBNull.Value;
                else
                    cmd.Parameters[15].Value = value;
            }
        }

        public DateTime? datechange
        {
            get
            {
                var v = cmd.Parameters[16].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[16].Value = DBNull.Value;
                else
                    cmd.Parameters[16].Value = value;
            }
        }

        public string Notes
        {
            get
            {
                var v = cmd.Parameters[17].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[17].Value = DBNull.Value;
                else
                    cmd.Parameters[17].Value = value;
            }
        }

        public string deliveryarea
        {
            get
            {
                var v = cmd.Parameters[18].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[18].Value = DBNull.Value;
                else
                    cmd.Parameters[18].Value = value;
            }
        }

        public string zone
        {
            get
            {
                var v = cmd.Parameters[19].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[19].Value = DBNull.Value;
                else
                    cmd.Parameters[19].Value = value;
            }
        }

    }


    partial class InsertCustAddress
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(short? _origbr, string _custid, string _addtype, DateTime? _datein, string _cusaddr1, string _cusaddr2, string _cusaddr3, string _cuspocode, string _custlocn, string _resstatus, double? _mthlyrent, DateTime? _datemoved, short? _hasstring, string _Email, string _PropType, int? _empeenochange, DateTime? _datechange, string _Notes, string _deliveryarea, string _zone)
        {
            this.origbr = _origbr;
            this.custid = _custid;
            this.addtype = _addtype;
            this.datein = _datein;
            this.cusaddr1 = _cusaddr1;
            this.cusaddr2 = _cusaddr2;
            this.cusaddr3 = _cusaddr3;
            this.cuspocode = _cuspocode;
            this.custlocn = _custlocn;
            this.resstatus = _resstatus;
            this.mthlyrent = _mthlyrent;
            this.datemoved = _datemoved;
            this.hasstring = _hasstring;
            this.Email = _Email;
            this.PropType = _PropType;
            this.empeenochange = _empeenochange;
            this.datechange = _datechange;
            this.Notes = _Notes;
            this.deliveryarea = _deliveryarea;
            this.zone = _zone;

            var __result = ExecuteNonQuery();

            return __result;
        }

    }


    public partial class PendingInstallationsGetSP : Blue.Cosacs.Procedure
    {
        public PendingInstallationsGetSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("PendingInstallationsGetSP", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@acctno", SqlDbType.Char, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@DAdatefrom", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@DAdateto", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@stocklocation", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@status", SqlDbType.Char, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@top", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

        }


        public string acctno
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public DateTime? DAdatefrom
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public DateTime? DAdateto
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public int? stocklocation
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public string status
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

        public int? top
        {
            get
            {
                var v = cmd.Parameters[5].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[5].Value = DBNull.Value;
                else
                    cmd.Parameters[5].Value = value;
            }
        }

    }


    partial class PendingInstallationsGetSP
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(string _acctno, DateTime? _DAdatefrom, DateTime? _DAdateto, int? _stocklocation, string _status, int? _top)
        {
            this.acctno = _acctno;
            this.DAdatefrom = _DAdatefrom;
            this.DAdateto = _DAdateto;
            this.stocklocation = _stocklocation;
            this.status = _status;
            this.top = _top;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class SCardEodLoadforStatements : Blue.Cosacs.Procedure
    {
        public SCardEodLoadforStatements(SqlConnection connection = null, SqlTransaction transaction = null) : base("SCardEodLoadforStatements", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@rundate", SqlDbType.SmallDateTime, 4)).Direction = ParameterDirection.Input;

        }


        public DateTime? rundate
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class SCardEodLoadforStatements
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(DateTime? _rundate)
        {
            this.rundate = _rundate;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class DN_CustomerGetRFLimitSP : Blue.Cosacs.Procedure
    {
        public DN_CustomerGetRFLimitSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("DN_CustomerGetRFLimitSP", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@custid", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@AcctList", SqlDbType.VarChar, 400)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@limit", SqlDbType.Money, 8)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@available", SqlDbType.Money, 8)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

        }


        public string custid
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string AcctList
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public decimal? limit
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public decimal? available
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public int? Return
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

    }


    partial class DN_CustomerGetRFLimitSP
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _custid, string _AcctList, out decimal? _limit, out decimal? _available, out int? _Return)
        {
            this.custid = _custid;
            this.AcctList = _AcctList;

            var __result = ExecuteNonQuery();
            _limit = this.limit;
            _available = this.available;
            _Return = this.Return;

            return __result;
        }

    }


    public partial class DN_CustomerGetRFLimitSPbyAcctno : Blue.Cosacs.Procedure
    {
        public DN_CustomerGetRFLimitSPbyAcctno(SqlConnection connection = null, SqlTransaction transaction = null) : base("DN_CustomerGetRFLimitSPbyAcctno", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@acctno", SqlDbType.VarChar, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@AcctList", SqlDbType.VarChar, 400)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@limit", SqlDbType.Money, 8)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@available", SqlDbType.Money, 8)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

        }


        public string acctno
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string AcctList
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public decimal? limit
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public decimal? available
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public int? Return
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

    }


    partial class DN_CustomerGetRFLimitSPbyAcctno
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _acctno, string _AcctList, out decimal? _limit, out decimal? _available, out int? _Return)
        {
            this.acctno = _acctno;
            this.AcctList = _AcctList;

            var __result = ExecuteNonQuery();
            _limit = this.limit;
            _available = this.available;
            _Return = this.Return;

            return __result;
        }

    }


    public partial class WTRDatesGetSP : Blue.Cosacs.Procedure
    {
        public WTRDatesGetSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("WTRDatesGetSP", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@dtStartCY1", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@dtEndCY1", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@dtStartLY1", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@dtEndLY1", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@dtActive1", SqlDbType.Bit, 1)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@dtFilename1", SqlDbType.VarChar, 30)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

        }


        public DateTime? dtStartCY1
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public DateTime? dtEndCY1
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public DateTime? dtStartLY1
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public DateTime? dtEndLY1
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public bool? dtActive1
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (bool?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

        public string dtFilename1
        {
            get
            {
                var v = cmd.Parameters[5].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[5].Value = DBNull.Value;
                else
                    cmd.Parameters[5].Value = value;
            }
        }

        public int? Return
        {
            get
            {
                var v = cmd.Parameters[6].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[6].Value = DBNull.Value;
                else
                    cmd.Parameters[6].Value = value;
            }
        }

    }


    partial class WTRDatesGetSP
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(out DateTime? _dtStartCY1, out DateTime? _dtEndCY1, out DateTime? _dtStartLY1, out DateTime? _dtEndLY1, out bool? _dtActive1, out string _dtFilename1, out int? _Return)
        {

            var __result = ExecuteNonQuery();
            _dtStartCY1 = this.dtStartCY1;
            _dtEndCY1 = this.dtEndCY1;
            _dtStartLY1 = this.dtStartLY1;
            _dtEndLY1 = this.dtEndLY1;
            _dtActive1 = this.dtActive1;
            _dtFilename1 = this.dtFilename1;
            _Return = this.Return;

            return __result;
        }

    }


    public partial class InstantCreditApprovalsCheckGen : Blue.Cosacs.Procedure
    {
        public InstantCreditApprovalsCheckGen(SqlConnection connection = null, SqlTransaction transaction = null) : base("InstantCreditApprovalsCheckGen", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@piCustomerID", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@piAccountNo", SqlDbType.VarChar, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@piProcess", SqlDbType.Char, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@poInstantCredit", SqlDbType.Char, 1)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@poLoanQualified", SqlDbType.Char, 1)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

        }


        public string piCustomerID
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string piAccountNo
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public string piProcess
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public string poInstantCredit
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public string poLoanQualified
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

        public int? Return
        {
            get
            {
                var v = cmd.Parameters[5].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[5].Value = DBNull.Value;
                else
                    cmd.Parameters[5].Value = value;
            }
        }

    }
    partial class InstantCreditApprovalsCheckGen
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(string _piCustomerID, string _piAccountNo, string _piProcess, out string _poInstantCredit, out string _poLoanQualified, out int? _Return)
        {
            this.piCustomerID = _piCustomerID;
            this.piAccountNo = _piAccountNo;
            this.piProcess = _piProcess;

            var __result = ExecuteDataSet();
            _poInstantCredit = this.poInstantCredit;
            _poLoanQualified = this.poLoanQualified;
            _Return = this.Return;

            return __result;
        }

    }

    //Added by RahulSonawane
    public partial class ExistCashLoanForNonEligibleCustomer : Blue.Cosacs.Procedure
    {
        public ExistCashLoanForNonEligibleCustomer(SqlConnection connection = null, SqlTransaction transaction = null) : base("DN_AvailableCashLoanForNonEligibleCustomer", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@CustomerId", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@ExistCashLoanAmt", SqlDbType.Decimal, 4)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Decimal, 4)).Direction = ParameterDirection.Output;

        }


        public string CustomerId
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public decimal? ExistCashLoanAmt
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }
        public int? Return
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

    }


    partial class ExistCashLoanForNonEligibleCustomer
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }

        public object ExecuteNonQuery(string _custid, out decimal? _limit, out int? _Return)
        {
            this.CustomerId = _custid;

            var __result = ExecuteNonQuery();
            _limit = this.ExistCashLoanAmt;
            _Return = this.Return;

            return __result;
        }
    }


    public partial class CashLoanSaveSP : Blue.Cosacs.Procedure
    {
        public CashLoanSaveSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("CashLoanSaveSP", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Custid", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@AcctNo", SqlDbType.Char, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@LoanAmount", SqlDbType.Money, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@Term", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@LoanStatus", SqlDbType.Char, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@TermsType", SqlDbType.VarChar, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@EmpeenoAccept", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@EmpeenoDisburse", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@DatePrinted", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@ReferralReasons", SqlDbType.VarChar, 4000)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@CashLoanPurpose", SqlDbType.VarChar, 25)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@AdminChargeWaived", SqlDbType.Bit, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@AdminCharge", SqlDbType.Money, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@EmpeenoAdminChargeWaived", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@EmpeenoLoanAmountChanged", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@Bank", SqlDbType.VarChar, 6)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@BankAccountType", SqlDbType.Char, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@BankBranch", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@BankAcctNo", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@Notes", SqlDbType.VarChar, 200)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@BankReferenceNo", SqlDbType.VarChar, 10)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@BankAccountName", SqlDbType.VarChar, 30)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

        }


        public string Custid
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public string AcctNo
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public decimal? LoanAmount
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public int? Term
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public string LoanStatus
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

        public string TermsType
        {
            get
            {
                var v = cmd.Parameters[5].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[5].Value = DBNull.Value;
                else
                    cmd.Parameters[5].Value = value;
            }
        }

        public int? EmpeenoAccept
        {
            get
            {
                var v = cmd.Parameters[6].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[6].Value = DBNull.Value;
                else
                    cmd.Parameters[6].Value = value;
            }
        }

        public int? EmpeenoDisburse
        {
            get
            {
                var v = cmd.Parameters[7].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[7].Value = DBNull.Value;
                else
                    cmd.Parameters[7].Value = value;
            }
        }

        public DateTime? DatePrinted
        {
            get
            {
                var v = cmd.Parameters[8].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[8].Value = DBNull.Value;
                else
                    cmd.Parameters[8].Value = value;
            }
        }

        public string ReferralReasons
        {
            get
            {
                var v = cmd.Parameters[9].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[9].Value = DBNull.Value;
                else
                    cmd.Parameters[9].Value = value;
            }
        }

        public string CashLoanPurpose
        {
            get
            {
                var v = cmd.Parameters[10].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[10].Value = DBNull.Value;
                else
                    cmd.Parameters[10].Value = value;
            }
        }

        public bool? AdminChargeWaived
        {
            get
            {
                var v = cmd.Parameters[11].Value;
                if (v == DBNull.Value)
                    return null;
                return (bool?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[11].Value = DBNull.Value;
                else
                    cmd.Parameters[11].Value = value;
            }
        }

        public decimal? AdminCharge
        {
            get
            {
                var v = cmd.Parameters[12].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[12].Value = DBNull.Value;
                else
                    cmd.Parameters[12].Value = value;
            }
        }

        public int? EmpeenoAdminChargeWaived
        {
            get
            {
                var v = cmd.Parameters[13].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[13].Value = DBNull.Value;
                else
                    cmd.Parameters[13].Value = value;
            }
        }

        public int? EmpeenoLoanAmountChanged
        {
            get
            {
                var v = cmd.Parameters[14].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[14].Value = DBNull.Value;
                else
                    cmd.Parameters[14].Value = value;
            }
        }

        public string Bank
        {
            get
            {
                var v = cmd.Parameters[15].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[15].Value = DBNull.Value;
                else
                    cmd.Parameters[15].Value = value;
            }
        }

        public string BankAccountType
        {
            get
            {
                var v = cmd.Parameters[16].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[16].Value = DBNull.Value;
                else
                    cmd.Parameters[16].Value = value;
            }
        }

        public string BankBranch
        {
            get
            {
                var v = cmd.Parameters[17].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[17].Value = DBNull.Value;
                else
                    cmd.Parameters[17].Value = value;
            }
        }

        public string BankAcctNo
        {
            get
            {
                var v = cmd.Parameters[18].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[18].Value = DBNull.Value;
                else
                    cmd.Parameters[18].Value = value;
            }
        }

        public string Notes
        {
            get
            {
                var v = cmd.Parameters[19].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[19].Value = DBNull.Value;
                else
                    cmd.Parameters[19].Value = value;
            }
        }

        public string BankReferenceNo
        {
            get
            {
                var v = cmd.Parameters[20].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[20].Value = DBNull.Value;
                else
                    cmd.Parameters[20].Value = value;
            }
        }

        public string BankAccountName
        {
            get
            {
                var v = cmd.Parameters[21].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[21].Value = DBNull.Value;
                else
                    cmd.Parameters[21].Value = value;
            }
        }

        public int? Return
        {
            get
            {
                var v = cmd.Parameters[22].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[22].Value = DBNull.Value;
                else
                    cmd.Parameters[22].Value = value;
            }
        }

    }


    partial class CashLoanSaveSP
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _Custid, string _AcctNo, decimal? _LoanAmount, int? _Term, string _LoanStatus, string _TermsType, int? _EmpeenoAccept, int? _EmpeenoDisburse, DateTime? _DatePrinted, string _ReferralReasons, string _CashLoanPurpose, bool? _AdminChargeWaived, decimal? _AdminCharge, int? _EmpeenoAdminChargeWaived, int? _EmpeenoLoanAmountChanged, string _Bank, string _BankAccountType, string _BankBranch, string _BankAcctNo, string _Notes, string _BankReferenceNo, string _BankAccountName, out int? _Return)
        {
            this.Custid = _Custid;
            this.AcctNo = _AcctNo;
            this.LoanAmount = _LoanAmount;
            this.Term = _Term;
            this.LoanStatus = _LoanStatus;
            this.TermsType = _TermsType;
            this.EmpeenoAccept = _EmpeenoAccept;
            this.EmpeenoDisburse = _EmpeenoDisburse;
            this.DatePrinted = _DatePrinted;
            this.ReferralReasons = _ReferralReasons;
            this.CashLoanPurpose = _CashLoanPurpose;
            this.AdminChargeWaived = _AdminChargeWaived;
            this.AdminCharge = _AdminCharge;
            this.EmpeenoAdminChargeWaived = _EmpeenoAdminChargeWaived;
            this.EmpeenoLoanAmountChanged = _EmpeenoLoanAmountChanged;
            this.Bank = _Bank;
            this.BankAccountType = _BankAccountType;
            this.BankBranch = _BankBranch;
            this.BankAcctNo = _BankAcctNo;
            this.Notes = _Notes;
            this.BankReferenceNo = _BankReferenceNo;
            this.BankAccountName = _BankAccountName;

            var __result = ExecuteNonQuery();
            _Return = this.Return;

            return __result;
        }

    }


    public partial class HiLoAllocate : Blue.Cosacs.Procedure
    {
        public HiLoAllocate(SqlConnection connection = null, SqlTransaction transaction = null) : base("HiLoAllocate", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Sequence", SqlDbType.VarChar, 128)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@CurrentHi", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@MaxLo", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

        }


        public string Sequence
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public int? CurrentHi
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public int? MaxLo
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

    }


    partial class HiLoAllocate
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _Sequence, out int? _CurrentHi, out int? _MaxLo)
        {
            this.Sequence = _Sequence;

            var __result = ExecuteNonQuery();
            _CurrentHi = this.CurrentHi;
            _MaxLo = this.MaxLo;

            return __result;
        }

    }


    public partial class BranchIncrementHiRefNo : Blue.Cosacs.Procedure
    {
        public BranchIncrementHiRefNo(SqlConnection connection = null, SqlTransaction transaction = null) : base("BranchIncrementHiRefNo", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@branchno", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@IncrementBranchNo", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

        }


        public int? branchno
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public int? IncrementBranchNo
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

    }


    partial class BranchIncrementHiRefNo
    {
        public object ExecuteScalar()
        {
            var v = (cmd.Connection != null ? cmd.ExecuteScalar() : Context.Database().ExecuteScalar(cmd));
            if (v == DBNull.Value)
                return null;
            return v;
        }


        public object ExecuteScalar(int? _branchno, int? _IncrementBranchNo)
        {
            this.branchno = _branchno;
            this.IncrementBranchNo = _IncrementBranchNo;

            var __result = ExecuteScalar();

            return __result;
        }

    }


    public partial class LineItemBookingGetSP : Blue.Cosacs.Procedure
    {
        public LineItemBookingGetSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("LineItemBookingGetSP", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@acctno", SqlDbType.VarChar, 12)).Direction = ParameterDirection.Input;

        }


        public string acctno
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class LineItemBookingGetSP
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(string _acctno)
        {
            this.acctno = _acctno;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class ServiceRequestGetSP : Blue.Cosacs.Procedure
    {
        public ServiceRequestGetSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("ServiceRequestGetSP", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@acctno", SqlDbType.VarChar, 12)).Direction = ParameterDirection.Input;
            cmd.Parameters.Add(new SqlParameter("@itemId ", SqlDbType.VarChar, 12)).Direction = ParameterDirection.Input;
            cmd.Parameters.Add(new SqlParameter("@stocklocn ", SqlDbType.VarChar, 12)).Direction = ParameterDirection.Input;

        }


        public string acctno
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }
        public string itemId
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }
        public string stocklocn
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

    }

    // new code add for Invoice CR by Tosif ali
    partial class ServiceRequestGetSP
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(string _acctno, string _Itemid, string _stocklocn)
        {
            this.acctno = _acctno;
            this.itemId = _Itemid;
            this.stocklocn = _stocklocn;

            var __result = ExecuteDataSet();

            return __result;
        }

    }

    /// ENd here .....

    public partial class StoreCardGetStatementRuns : Blue.Cosacs.Procedure
    {
        public StoreCardGetStatementRuns(SqlConnection connection = null, SqlTransaction transaction = null) : base("StoreCardGetStatementRuns", connection, transaction)
        {

        }


    }


    partial class StoreCardGetStatementRuns
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


    }


    public partial class OnlineProductExportSP : Blue.Cosacs.Procedure
    {
        public OnlineProductExportSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("OnlineProductExportSP", connection, transaction)
        {

        }


    }


    partial class OnlineProductExportSP
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


    }


    public partial class OnlineProductIneligibleSP : Blue.Cosacs.Procedure
    {
        public OnlineProductIneligibleSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("OnlineProductIneligibleSP", connection, transaction)
        {

        }


    }


    partial class OnlineProductIneligibleSP
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


    }


    public partial class ReadyAssistExportSP : Blue.Cosacs.Procedure
    {
        public ReadyAssistExportSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("ReadyAssistExportSP", connection, transaction)
        {

        }


    }


    partial class ReadyAssistExportSP
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


    }


    public partial class GetDuplicateCustomersSP : Blue.Cosacs.Procedure
    {
        public GetDuplicateCustomersSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("GetDuplicateCustomersSP", connection, transaction)
        {

        }


    }


    partial class GetDuplicateCustomersSP
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


    }


    public partial class SalesCommissionEnquiryGetDetails : Blue.Cosacs.Procedure
    {
        public SalesCommissionEnquiryGetDetails(SqlConnection connection = null, SqlTransaction transaction = null) : base("SalesCommissionEnquiryGetDetails", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@branchNo", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@empeeNo", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@dateFrom", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@dateTo", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

        }


        public int? branchNo
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public int? empeeNo
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public DateTime? dateFrom
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public DateTime? dateTo
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

    }


    partial class SalesCommissionEnquiryGetDetails
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(int? _branchNo, int? _empeeNo, DateTime? _dateFrom, DateTime? _dateTo)
        {
            this.branchNo = _branchNo;
            this.empeeNo = _empeeNo;
            this.dateFrom = _dateFrom;
            this.dateTo = _dateTo;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class SalesCommissionBranchEnquiryGetDetails : Blue.Cosacs.Procedure
    {
        public SalesCommissionBranchEnquiryGetDetails(SqlConnection connection = null, SqlTransaction transaction = null) : base("SalesCommissionBranchEnquiryGetDetails", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@branchNo", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@dateFrom", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@dateTo", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

        }


        public int? branchNo
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public DateTime? dateFrom
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public DateTime? dateTo
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

    }


    partial class SalesCommissionBranchEnquiryGetDetails
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(int? _branchNo, DateTime? _dateFrom, DateTime? _dateTo)
        {
            this.branchNo = _branchNo;
            this.dateFrom = _dateFrom;
            this.dateTo = _dateTo;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class DBDateFirst : Blue.Cosacs.Procedure
    {
        public DBDateFirst(SqlConnection connection = null, SqlTransaction transaction = null) : base("DBDateFirst", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@acctno", SqlDbType.Char, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@datedel", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@datefirst", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Output;

        }


        public string acctno
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public DateTime? datedel
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public DateTime? datefirst
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

    }


    partial class DBDateFirst
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _acctno, DateTime? _datedel, out DateTime? _datefirst)
        {
            this.acctno = _acctno;
            this.datedel = _datedel;

            var __result = ExecuteNonQuery();
            _datefirst = this.datefirst;

            return __result;
        }

    }


    public partial class GetCustomersLastPurchase : Blue.Cosacs.Procedure
    {
        public GetCustomersLastPurchase(SqlConnection connection = null, SqlTransaction transaction = null) : base("GetCustomersLastPurchase", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@howOldCash", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@beginningOfRangeCash", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@howOldCredit", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@beginningOfRangeCredit", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@numberOfRecordsToReturn", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

        }


        public DateTime? howOldCash
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public DateTime? beginningOfRangeCash
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public DateTime? howOldCredit
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public DateTime? beginningOfRangeCredit
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public int? numberOfRecordsToReturn
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

    }


    partial class GetCustomersLastPurchase
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(DateTime? _howOldCash, DateTime? _beginningOfRangeCash, DateTime? _howOldCredit, DateTime? _beginningOfRangeCredit, int? _numberOfRecordsToReturn)
        {
            this.howOldCash = _howOldCash;
            this.beginningOfRangeCash = _beginningOfRangeCash;
            this.howOldCredit = _howOldCredit;
            this.beginningOfRangeCredit = _beginningOfRangeCredit;
            this.numberOfRecordsToReturn = _numberOfRecordsToReturn;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class DN_BranchWarrantyGetContractNoSP : Blue.Cosacs.Procedure
    {
        public DN_BranchWarrantyGetContractNoSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("DN_BranchWarrantyGetContractNoSP", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@branchno", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@contractno", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

        }


        public short? branchno
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public int? contractno
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public int? Return
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

    }


    partial class DN_BranchWarrantyGetContractNoSP
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(short? _branchno, out int? _contractno, out int? _Return)
        {
            this.branchno = _branchno;

            var __result = ExecuteNonQuery();
            _contractno = this.contractno;
            _Return = this.Return;

            return __result;
        }

    }


    public partial class IsCustomerInArrearsAndHasUndeliveredAccount : Blue.Cosacs.Procedure
    {
        public IsCustomerInArrearsAndHasUndeliveredAccount(SqlConnection connection = null, SqlTransaction transaction = null) : base("IsCustomerInArrearsAndHasUndeliveredAccount", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@customerId", SqlDbType.VarChar, 10)).Direction = ParameterDirection.Input;

        }


        public string customerId
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class IsCustomerInArrearsAndHasUndeliveredAccount
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(string _customerId)
        {
            this.customerId = _customerId;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class UndeliveredCashCreditPerBranch : Blue.Cosacs.Procedure
    {
        public UndeliveredCashCreditPerBranch(SqlConnection connection = null, SqlTransaction transaction = null) : base("UndeliveredCashCreditPerBranch", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@BranchNo", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

        }


        public short? BranchNo
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class UndeliveredCashCreditPerBranch
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(short? _BranchNo)
        {
            this.BranchNo = _BranchNo;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class SalesManagemntSummaryTableAverageTransactionValue : Blue.Cosacs.Procedure
    {
        public SalesManagemntSummaryTableAverageTransactionValue(SqlConnection connection = null, SqlTransaction transaction = null) : base("SalesManagemntSummaryTableAverageTransactionValue", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Today", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

        }


        public DateTime? Today
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class SalesManagemntSummaryTableAverageTransactionValue
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(DateTime? _Today)
        {
            this.Today = _Today;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class SalesManagemntSummaryTableAverageTermLength : Blue.Cosacs.Procedure
    {
        public SalesManagemntSummaryTableAverageTermLength(SqlConnection connection = null, SqlTransaction transaction = null) : base("SalesManagemntSummaryTableAverageTermLength", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Today", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

        }


        public DateTime? Today
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class SalesManagemntSummaryTableAverageTermLength
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(DateTime? _Today)
        {
            this.Today = _Today;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class SalesManagemntSummaryTableActualDelivered : Blue.Cosacs.Procedure
    {
        public SalesManagemntSummaryTableActualDelivered(SqlConnection connection = null, SqlTransaction transaction = null) : base("SalesManagemntSummaryTableActualDelivered", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Today", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

        }


        public DateTime? Today
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class SalesManagemntSummaryTableActualDelivered
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(DateTime? _Today)
        {
            this.Today = _Today;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class SalesManagemntSummaryTableUndelivered : Blue.Cosacs.Procedure
    {
        public SalesManagemntSummaryTableUndelivered(SqlConnection connection = null, SqlTransaction transaction = null) : base("SalesManagemntSummaryTableUndelivered", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Today", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

        }


        public DateTime? Today
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class SalesManagemntSummaryTableUndelivered
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(DateTime? _Today)
        {
            this.Today = _Today;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class NewCustomerAquisition : Blue.Cosacs.Procedure
    {
        public NewCustomerAquisition(SqlConnection connection = null, SqlTransaction transaction = null) : base("NewCustomerAquisition", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Today", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

        }


        public DateTime? Today
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class NewCustomerAquisition
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(DateTime? _Today)
        {
            this.Today = _Today;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class GetCancellations : Blue.Cosacs.Procedure
    {
        public GetCancellations(SqlConnection connection = null, SqlTransaction transaction = null) : base("GetCancellations", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Today", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

        }


        public DateTime? Today
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class GetCancellations
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(DateTime? _Today)
        {
            this.Today = _Today;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class GetRewrites : Blue.Cosacs.Procedure
    {
        public GetRewrites(SqlConnection connection = null, SqlTransaction transaction = null) : base("GetRewrites", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Today", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

        }


        public DateTime? Today
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class GetRewrites
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(DateTime? _Today)
        {
            this.Today = _Today;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class DiscountMonthsPassedSinceDelivery : Blue.Cosacs.Procedure
    {
        public DiscountMonthsPassedSinceDelivery(SqlConnection connection = null, SqlTransaction transaction = null) : base("DiscountMonthsPassedSinceDelivery", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@custid", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@itemId", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@currentDate", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@monthsSinceDelivery", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

        }


        public string custid
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public int? itemId
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public DateTime? currentDate
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public int? monthsSinceDelivery
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

    }


    partial class DiscountMonthsPassedSinceDelivery
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _custid, int? _itemId, DateTime? _currentDate, out int? _monthsSinceDelivery)
        {
            this.custid = _custid;
            this.itemId = _itemId;
            this.currentDate = _currentDate;

            var __result = ExecuteNonQuery();
            _monthsSinceDelivery = this.monthsSinceDelivery;

            return __result;
        }

    }


    public partial class CsrWarrantyHitRate : Blue.Cosacs.Procedure
    {
        public CsrWarrantyHitRate(SqlConnection connection = null, SqlTransaction transaction = null) : base("CsrWarrantyHitRate", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Today", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@CalculatePerCsr", SqlDbType.Bit, 1)).Direction = ParameterDirection.Input;

        }


        public DateTime? Today
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public bool? CalculatePerCsr
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (bool?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

    }


    partial class CsrWarrantyHitRate
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(DateTime? _Today, bool? _CalculatePerCsr)
        {
            this.Today = _Today;
            this.CalculatePerCsr = _CalculatePerCsr;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class CsrInstallationHitRate : Blue.Cosacs.Procedure
    {
        public CsrInstallationHitRate(SqlConnection connection = null, SqlTransaction transaction = null) : base("CsrInstallationHitRate", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Today", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@CalculatePerCsr", SqlDbType.Bit, 1)).Direction = ParameterDirection.Input;

        }


        public DateTime? Today
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public bool? CalculatePerCsr
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (bool?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

    }


    partial class CsrInstallationHitRate
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(DateTime? _Today, bool? _CalculatePerCsr)
        {
            this.Today = _Today;
            this.CalculatePerCsr = _CalculatePerCsr;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class CsrCreditMix : Blue.Cosacs.Procedure
    {
        public CsrCreditMix(SqlConnection connection = null, SqlTransaction transaction = null) : base("CsrCreditMix", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@Today", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

        }


        public DateTime? Today
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class CsrCreditMix
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(DateTime? _Today)
        {
            this.Today = _Today;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class DN_FinTransWriteSP : Blue.Cosacs.Procedure
    {
        public DN_FinTransWriteSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("DN_FinTransWriteSP", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@origbr", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@branchno", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@acctno", SqlDbType.VarChar, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@transrefno", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@datetrans", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@transtypecode", SqlDbType.VarChar, 3)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@empeeno", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@transupdated", SqlDbType.Char, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@transprinted", SqlDbType.Char, 1)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@transvalue", SqlDbType.Money, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@bankcode", SqlDbType.VarChar, 6)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@bankacctno", SqlDbType.VarChar, 20)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@chequeno", SqlDbType.VarChar, 16)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@ftnotes", SqlDbType.VarChar, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@paymethod", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@runno", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@source", SqlDbType.VarChar, 10)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@agrmtno", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@cashierTotID", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

        }


        public short? origbr
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public short? branchno
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public string acctno
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public int? transrefno
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public DateTime? datetrans
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

        public string transtypecode
        {
            get
            {
                var v = cmd.Parameters[5].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[5].Value = DBNull.Value;
                else
                    cmd.Parameters[5].Value = value;
            }
        }

        public int? empeeno
        {
            get
            {
                var v = cmd.Parameters[6].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[6].Value = DBNull.Value;
                else
                    cmd.Parameters[6].Value = value;
            }
        }

        public string transupdated
        {
            get
            {
                var v = cmd.Parameters[7].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[7].Value = DBNull.Value;
                else
                    cmd.Parameters[7].Value = value;
            }
        }

        public string transprinted
        {
            get
            {
                var v = cmd.Parameters[8].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[8].Value = DBNull.Value;
                else
                    cmd.Parameters[8].Value = value;
            }
        }

        public decimal? transvalue
        {
            get
            {
                var v = cmd.Parameters[9].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[9].Value = DBNull.Value;
                else
                    cmd.Parameters[9].Value = value;
            }
        }

        public string bankcode
        {
            get
            {
                var v = cmd.Parameters[10].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[10].Value = DBNull.Value;
                else
                    cmd.Parameters[10].Value = value;
            }
        }

        public string bankacctno
        {
            get
            {
                var v = cmd.Parameters[11].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[11].Value = DBNull.Value;
                else
                    cmd.Parameters[11].Value = value;
            }
        }

        public string chequeno
        {
            get
            {
                var v = cmd.Parameters[12].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[12].Value = DBNull.Value;
                else
                    cmd.Parameters[12].Value = value;
            }
        }

        public string ftnotes
        {
            get
            {
                var v = cmd.Parameters[13].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[13].Value = DBNull.Value;
                else
                    cmd.Parameters[13].Value = value;
            }
        }

        public short? paymethod
        {
            get
            {
                var v = cmd.Parameters[14].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[14].Value = DBNull.Value;
                else
                    cmd.Parameters[14].Value = value;
            }
        }

        public int? runno
        {
            get
            {
                var v = cmd.Parameters[15].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[15].Value = DBNull.Value;
                else
                    cmd.Parameters[15].Value = value;
            }
        }

        public string source
        {
            get
            {
                var v = cmd.Parameters[16].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[16].Value = DBNull.Value;
                else
                    cmd.Parameters[16].Value = value;
            }
        }

        public int? agrmtno
        {
            get
            {
                var v = cmd.Parameters[17].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[17].Value = DBNull.Value;
                else
                    cmd.Parameters[17].Value = value;
            }
        }

        public int? cashierTotID
        {
            get
            {
                var v = cmd.Parameters[18].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[18].Value = DBNull.Value;
                else
                    cmd.Parameters[18].Value = value;
            }
        }

        public int? Return
        {
            get
            {
                var v = cmd.Parameters[19].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[19].Value = DBNull.Value;
                else
                    cmd.Parameters[19].Value = value;
            }
        }

    }


    partial class DN_FinTransWriteSP
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(short? _origbr, short? _branchno, string _acctno, int? _transrefno, DateTime? _datetrans, string _transtypecode, int? _empeeno, string _transupdated, string _transprinted, decimal? _transvalue, string _bankcode, string _bankacctno, string _chequeno, string _ftnotes, short? _paymethod, int? _runno, string _source, int? _agrmtno, int? _cashierTotID, out int? _Return)
        {
            this.origbr = _origbr;
            this.branchno = _branchno;
            this.acctno = _acctno;
            this.transrefno = _transrefno;
            this.datetrans = _datetrans;
            this.transtypecode = _transtypecode;
            this.empeeno = _empeeno;
            this.transupdated = _transupdated;
            this.transprinted = _transprinted;
            this.transvalue = _transvalue;
            this.bankcode = _bankcode;
            this.bankacctno = _bankacctno;
            this.chequeno = _chequeno;
            this.ftnotes = _ftnotes;
            this.paymethod = _paymethod;
            this.runno = _runno;
            this.source = _source;
            this.agrmtno = _agrmtno;
            this.cashierTotID = _cashierTotID;

            var __result = ExecuteNonQuery();
            _Return = this.Return;

            return __result;
        }

    }


    public partial class DN_CashierMustDepositSP : Blue.Cosacs.Procedure
    {
        public DN_CashierMustDepositSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("DN_CashierMustDepositSP", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@empeeno", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@mustdeposit", SqlDbType.Bit, 1)).Direction = ParameterDirection.Output;

            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

        }


        public int? empeeno
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public bool? mustdeposit
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (bool?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public int? Return
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

    }


    partial class DN_CashierMustDepositSP
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(int? _empeeno, out bool? _mustdeposit, out int? _Return)
        {
            this.empeeno = _empeeno;

            var __result = ExecuteNonQuery();
            _mustdeposit = this.mustdeposit;
            _Return = this.Return;

            return __result;
        }

    }


    public partial class CustomersInstalments : Blue.Cosacs.Procedure
    {
        public CustomersInstalments(SqlConnection connection = null, SqlTransaction transaction = null) : base("CustomersInstalments", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@From", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@To", SqlDbType.Date, 3)).Direction = ParameterDirection.Input;

        }


        public DateTime? From
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public DateTime? To
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

    }


    partial class CustomersInstalments
    {
        public override DataSet ExecuteDataSet()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? base.ExecuteDataSet() : Context.Database().ExecuteDataSet(cmd));
        }


        public DataSet ExecuteDataSet(DateTime? _From, DateTime? _To)
        {
            this.From = _From;
            this.To = _To;

            var __result = ExecuteDataSet();

            return __result;
        }

    }


    public partial class DN_ExchangeTransSaveSP : Blue.Cosacs.Procedure
    {
        public DN_ExchangeTransSaveSP(SqlConnection connection = null, SqlTransaction transaction = null) : base("DN_ExchangeTransSaveSP", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@piAcctNo", SqlDbType.Char, 12)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@piTransRefNo", SqlDbType.Int, 4)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@piDateTrans", SqlDbType.DateTime, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@piPayMethod", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@piForeignTender", SqlDbType.Money, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@piLocalChange", SqlDbType.Money, 8)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@piBranchNo", SqlDbType.SmallInt, 2)).Direction = ParameterDirection.Input;

            cmd.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int, 4)).Direction = ParameterDirection.Output;

        }


        public string piAcctNo
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

        public int? piTransRefNo
        {
            get
            {
                var v = cmd.Parameters[1].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[1].Value = DBNull.Value;
                else
                    cmd.Parameters[1].Value = value;
            }
        }

        public DateTime? piDateTrans
        {
            get
            {
                var v = cmd.Parameters[2].Value;
                if (v == DBNull.Value)
                    return null;
                return (DateTime?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[2].Value = DBNull.Value;
                else
                    cmd.Parameters[2].Value = value;
            }
        }

        public short? piPayMethod
        {
            get
            {
                var v = cmd.Parameters[3].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[3].Value = DBNull.Value;
                else
                    cmd.Parameters[3].Value = value;
            }
        }

        public decimal? piForeignTender
        {
            get
            {
                var v = cmd.Parameters[4].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[4].Value = DBNull.Value;
                else
                    cmd.Parameters[4].Value = value;
            }
        }

        public decimal? piLocalChange
        {
            get
            {
                var v = cmd.Parameters[5].Value;
                if (v == DBNull.Value)
                    return null;
                return (decimal?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[5].Value = DBNull.Value;
                else
                    cmd.Parameters[5].Value = value;
            }
        }

        public short? piBranchNo
        {
            get
            {
                var v = cmd.Parameters[6].Value;
                if (v == DBNull.Value)
                    return null;
                return (short?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[6].Value = DBNull.Value;
                else
                    cmd.Parameters[6].Value = value;
            }
        }

        public int? Return
        {
            get
            {
                var v = cmd.Parameters[7].Value;
                if (v == DBNull.Value)
                    return null;
                return (int?)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[7].Value = DBNull.Value;
                else
                    cmd.Parameters[7].Value = value;
            }
        }

    }


    partial class DN_ExchangeTransSaveSP
    {
        public int ExecuteNonQuery()
        {
            return ((cmd.Connection != null && cmd.Connection.State != ConnectionState.Closed) ? cmd.ExecuteNonQuery() : Context.Database().ExecuteNonQuery(cmd));
        }


        public object ExecuteNonQuery(string _piAcctNo, int? _piTransRefNo, DateTime? _piDateTrans, short? _piPayMethod, decimal? _piForeignTender, decimal? _piLocalChange, short? _piBranchNo, out int? _Return)
        {
            this.piAcctNo = _piAcctNo;
            this.piTransRefNo = _piTransRefNo;
            this.piDateTrans = _piDateTrans;
            this.piPayMethod = _piPayMethod;
            this.piForeignTender = _piForeignTender;
            this.piLocalChange = _piLocalChange;
            this.piBranchNo = _piBranchNo;

            var __result = ExecuteNonQuery();
            _Return = this.Return;

            return __result;
        }

    }


    public partial class CacheGetChange : Blue.Cosacs.Procedure
    {
        public CacheGetChange(SqlConnection connection = null, SqlTransaction transaction = null) : base("CacheGetChange", connection, transaction)
        {

            cmd.Parameters.Add(new SqlParameter("@TableName", SqlDbType.VarChar, 50)).Direction = ParameterDirection.Input;

        }


        public string TableName
        {
            get
            {
                var v = cmd.Parameters[0].Value;
                if (v == DBNull.Value)
                    return null;
                return (string)v;
            }
            set
            {
                if (value == null)
                    cmd.Parameters[0].Value = DBNull.Value;
                else
                    cmd.Parameters[0].Value = value;
            }
        }

    }


    partial class CacheGetChange
    {
        public object ExecuteScalar()
        {
            var v = (cmd.Connection != null ? cmd.ExecuteScalar() : Context.Database().ExecuteScalar(cmd));
            if (v == DBNull.Value)
                return null;
            return v;
        }


        public object ExecuteScalar(string _TableName)
        {
            this.TableName = _TableName;

            var __result = ExecuteScalar();

            return __result;
        }

    }


    partial class Context
    {
        public System.Data.Linq.Table<Shared.Code> Code
        {
            get { return this.GetTable<Shared.Code>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CodeCat> CodeCat
        {
            get { return this.GetTable<Shared.CodeCat>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.AccountLocking> AccountLocking
        {
            get { return this.GetTable<Shared.AccountLocking>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Acct> Acct
        {
            get { return this.GetTable<Shared.Acct>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.acctnoctrl> acctnoctrl
        {
            get { return this.GetTable<Shared.acctnoctrl>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Branch> Branch
        {
            get { return this.GetTable<Shared.Branch>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Agreement> Agreement
        {
            get { return this.GetTable<Shared.Agreement>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Bailaction> Bailaction
        {
            get { return this.GetTable<Shared.Bailaction>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.BarCodeItem> BarCodeItem
        {
            get { return this.GetTable<Shared.BarCodeItem>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CourtsPersonTable> CourtsPersonTable
        {
            get { return this.GetTable<Shared.CourtsPersonTable>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Customer> Customer
        {
            get { return this.GetTable<Shared.Customer>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CustomerLocking> CustomerLocking
        {
            get { return this.GetTable<Shared.CustomerLocking>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CustAcct> CustAcct
        {
            get { return this.GetTable<Shared.CustAcct>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CustAddress> CustAddress
        {
            get { return this.GetTable<Shared.CustAddress>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CustTel> CustTel
        {
            get { return this.GetTable<Shared.CustTel>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CashierTotals> CashierTotals
        {
            get { return this.GetTable<Shared.CashierTotals>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CashierTotalsBreakdown> CashierTotalsBreakdown
        {
            get { return this.GetTable<Shared.CashierTotalsBreakdown>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CashierTotalWriteOff> CashierTotalWriteOff
        {
            get { return this.GetTable<Shared.CashierTotalWriteOff>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Delivery> Delivery
        {
            get { return this.GetTable<Shared.Delivery>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Instalplan> Instalplan
        {
            get { return this.GetTable<Shared.Instalplan>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.InstantCreditFlag> InstantCreditFlag
        {
            get { return this.GetTable<Shared.InstantCreditFlag>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.FinTrans> FinTrans
        {
            get { return this.GetTable<Shared.FinTrans>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.FactTrans> FactTrans
        {
            get { return this.GetTable<Shared.FactTrans>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.NonStockDeletionDates> NonStockDeletionDates
        {
            get { return this.GetTable<Shared.NonStockDeletionDates>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Proposal> Proposal
        {
            get { return this.GetTable<Shared.Proposal>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.ProposalFlag> ProposalFlag
        {
            get { return this.GetTable<Shared.ProposalFlag>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.LineItem> LineItem
        {
            get { return this.GetTable<Shared.LineItem>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.ReadyAssistDetails> ReadyAssistDetails
        {
            get { return this.GetTable<Shared.ReadyAssistDetails>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Schedule> Schedule
        {
            get { return this.GetTable<Shared.Schedule>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Sets> Sets
        {
            get { return this.GetTable<Shared.Sets>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Status> Status
        {
            get { return this.GetTable<Shared.Status>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.StockInfo> StockInfo
        {
            get { return this.GetTable<Shared.StockInfo>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.StockPrice> StockPrice
        {
            get { return this.GetTable<Shared.StockPrice>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.StockQuantity> StockQuantity
        {
            get { return this.GetTable<Shared.StockQuantity>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.StoreCard> StoreCard
        {
            get { return this.GetTable<Shared.StoreCard>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.StoreCardBranchQualRules> StoreCardBranchQualRules
        {
            get { return this.GetTable<Shared.StoreCardBranchQualRules>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.StorecardPaymentDetails> StorecardPaymentDetails
        {
            get { return this.GetTable<Shared.StorecardPaymentDetails>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.StoreCardRateDetails> StoreCardRateDetails
        {
            get { return this.GetTable<Shared.StoreCardRateDetails>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.StoreCardStatement> StoreCardStatement
        {
            get { return this.GetTable<Shared.StoreCardStatement>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.StoreCardRate> StoreCardRate
        {
            get { return this.GetTable<Shared.StoreCardRate>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.StoreCardStatus> StoreCardStatus
        {
            get { return this.GetTable<Shared.StoreCardStatus>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.SR_CustomerInteraction> SR_CustomerInteraction
        {
            get { return this.GetTable<Shared.SR_CustomerInteraction>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.SR_TechnicianDiary> SR_TechnicianDiary
        {
            get { return this.GetTable<Shared.SR_TechnicianDiary>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.SR_Technician> SR_Technician
        {
            get { return this.GetTable<Shared.SR_Technician>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.SR_Zone> SR_Zone
        {
            get { return this.GetTable<Shared.SR_Zone>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.SR_ChargeAcct> SR_ChargeAcct
        {
            get { return this.GetTable<Shared.SR_ChargeAcct>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.SundChgTyp> SundChgTyp
        {
            get { return this.GetTable<Shared.SundChgTyp>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Installation> Installation
        {
            get { return this.GetTable<Shared.Installation>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.InstallationBooking> InstallationBooking
        {
            get { return this.GetTable<Shared.InstallationBooking>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.InstallationChargeAnalysis> InstallationChargeAnalysis
        {
            get { return this.GetTable<Shared.InstallationChargeAnalysis>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.InstallationResolution> InstallationResolution
        {
            get { return this.GetTable<Shared.InstallationResolution>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.InstallationSparePart> InstallationSparePart
        {
            get { return this.GetTable<Shared.InstallationSparePart>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.EodConfigurationOption> EodConfigurationOption
        {
            get { return this.GetTable<Shared.EodConfigurationOption>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.InterfaceControl> InterfaceControl
        {
            get { return this.GetTable<Shared.InterfaceControl>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CountryMaintenance> CountryMaintenance
        {
            get { return this.GetTable<Shared.CountryMaintenance>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Country> Country
        {
            get { return this.GetTable<Shared.Country>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.WTRDates> WTRDates
        {
            get { return this.GetTable<Shared.WTRDates>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CashLoan> CashLoan
        {
            get { return this.GetTable<Shared.CashLoan>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Finxfr> Finxfr
        {
            get { return this.GetTable<Shared.Finxfr>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.ExchangeRate> ExchangeRate
        {
            get { return this.GetTable<Shared.ExchangeRate>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CashAndGoReceipt> CashAndGoReceipt
        {
            get { return this.GetTable<Shared.CashAndGoReceipt>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.LineItemBooking> LineItemBooking
        {
            get { return this.GetTable<Shared.LineItemBooking>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.LineItemBookingFailures> LineItemBookingFailures
        {
            get { return this.GetTable<Shared.LineItemBookingFailures>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.LineItemBookingSchedule> LineItemBookingSchedule
        {
            get { return this.GetTable<Shared.LineItemBookingSchedule>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.SR_Summary> SR_Summary
        {
            get { return this.GetTable<Shared.SR_Summary>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.ServiceChargeAcct> ServiceChargeAcct
        {
            get { return this.GetTable<Shared.ServiceChargeAcct>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Exchange> Exchange
        {
            get { return this.GetTable<Shared.Exchange>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.DuplicateCustomers> DuplicateCustomers
        {
            get { return this.GetTable<Shared.DuplicateCustomers>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CashLoanDisbursement> CashLoanDisbursement
        {
            get { return this.GetTable<Shared.CashLoanDisbursement>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.Bank> Bank
        {
            get { return this.GetTable<Shared.Bank>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.FinancialWeeks> FinancialWeeks
        {
            get { return this.GetTable<Shared.FinancialWeeks>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.StockInfoAssociated> StockInfoAssociated
        {
            get { return this.GetTable<Shared.StockInfoAssociated>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.ProductHeirarchy> ProductHeirarchy
        {
            get { return this.GetTable<Shared.ProductHeirarchy>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.GiftVoucherCourts> GiftVoucherCourts
        {
            get { return this.GetTable<Shared.GiftVoucherCourts>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.GiftVoucherRedeemed> GiftVoucherRedeemed
        {
            get { return this.GetTable<Shared.GiftVoucherRedeemed>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.GiftVoucherOther> GiftVoucherOther
        {
            get { return this.GetTable<Shared.GiftVoucherOther>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.KitProduct> KitProduct
        {
            get { return this.GetTable<Shared.KitProduct>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.PaymentMethodLookUp> PaymentMethodLookUp
        {
            get { return this.GetTable<Shared.PaymentMethodLookUp>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CacheTableChange> CacheTableChange
        {
            get { return this.GetTable<Shared.CacheTableChange>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.UserView> UserView
        {
            get { return this.GetTable<Shared.UserView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CashierTotalsView> CashierTotalsView
        {
            get { return this.GetTable<Shared.CashierTotalsView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CashierTotalledView> CashierTotalledView
        {
            get { return this.GetTable<Shared.CashierTotalledView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.InstallationVw> InstallationVw
        {
            get { return this.GetTable<Shared.InstallationVw>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.TechnicianDiaryVw> TechnicianDiaryVw
        {
            get { return this.GetTable<Shared.TechnicianDiaryVw>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.View_StoreCard> View_StoreCard
        {
            get { return this.GetTable<Shared.View_StoreCard>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.View_StoreCardQualParams> View_StoreCardQualParams
        {
            get { return this.GetTable<Shared.View_StoreCardQualParams>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.View_StoreCardWithPayments> View_StoreCardWithPayments
        {
            get { return this.GetTable<Shared.View_StoreCardWithPayments>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.View_StoreCardAll> View_StoreCardAll
        {
            get { return this.GetTable<Shared.View_StoreCardAll>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.View_StoreCardHistory> View_StoreCardHistory
        {
            get { return this.GetTable<Shared.View_StoreCardHistory>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.view_FintranswithTransfers> view_FintranswithTransfers
        {
            get { return this.GetTable<Shared.view_FintranswithTransfers>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.view_LineDetails> view_LineDetails
        {
            get { return this.GetTable<Shared.view_LineDetails>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.View_StoreCardValidationandLimits> View_StoreCardValidationandLimits
        {
            get { return this.GetTable<Shared.View_StoreCardValidationandLimits>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.View_StoreCardRateDetailsGetforPoints> View_StoreCardRateDetailsGetforPoints
        {
            get { return this.GetTable<Shared.View_StoreCardRateDetailsGetforPoints>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.View_StoreCardTransactionsByCustid> View_StoreCardTransactionsByCustid
        {
            get { return this.GetTable<Shared.View_StoreCardTransactionsByCustid>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.VIEW_StoreCardStatusLatest> VIEW_StoreCardStatusLatest
        {
            get { return this.GetTable<Shared.VIEW_StoreCardStatusLatest>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.fintranswithBalancesVW> fintranswithBalancesVW
        {
            get { return this.GetTable<Shared.fintranswithBalancesVW>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.view_FintransStoreCardStatements> view_FintransStoreCardStatements
        {
            get { return this.GetTable<Shared.view_FintransStoreCardStatements>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.view_StoreCardGetProposal> view_StoreCardGetProposal
        {
            get { return this.GetTable<Shared.view_StoreCardGetProposal>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.View_FintransPayMethod> View_FintransPayMethod
        {
            get { return this.GetTable<Shared.View_FintransPayMethod>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.View_TermsType_All> View_TermsType_All
        {
            get { return this.GetTable<Shared.View_TermsType_All>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.StoreCardLoadforAnnualFee_View> StoreCardLoadforAnnualFee_View
        {
            get { return this.GetTable<Shared.StoreCardLoadforAnnualFee_View>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.StoreCardStatements_View> StoreCardStatements_View
        {
            get { return this.GetTable<Shared.StoreCardStatements_View>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.TermsTypeAllBands> TermsTypeAllBands
        {
            get { return this.GetTable<Shared.TermsTypeAllBands>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.View_employment> View_employment
        {
            get { return this.GetTable<Shared.View_employment>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CashierTotalWriteOffView> CashierTotalWriteOffView
        {
            get { return this.GetTable<Shared.CashierTotalWriteOffView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.BookingFailuresView> BookingFailuresView
        {
            get { return this.GetTable<Shared.BookingFailuresView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.RoleView> RoleView
        {
            get { return this.GetTable<Shared.RoleView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.UserRoleView> UserRoleView
        {
            get { return this.GetTable<Shared.UserRoleView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.LinkedContractsView> LinkedContractsView
        {
            get { return this.GetTable<Shared.LinkedContractsView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.BERItemsForReplacementView> BERItemsForReplacementView
        {
            get { return this.GetTable<Shared.BERItemsForReplacementView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.WarrantySaleGenerateView> WarrantySaleGenerateView
        {
            get { return this.GetTable<Shared.WarrantySaleGenerateView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.WarrantyDeliveredView> WarrantyDeliveredView
        {
            get { return this.GetTable<Shared.WarrantyDeliveredView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.ItemsWithoutWarrantiesView> ItemsWithoutWarrantiesView
        {
            get { return this.GetTable<Shared.ItemsWithoutWarrantiesView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.WarrantyRenewalGenerateView> WarrantyRenewalGenerateView
        {
            get { return this.GetTable<Shared.WarrantyRenewalGenerateView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.WarrantyReplacementView> WarrantyReplacementView
        {
            get { return this.GetTable<Shared.WarrantyReplacementView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.LineItemHasItemsToCollectView> LineItemHasItemsToCollectView
        {
            get { return this.GetTable<Shared.LineItemHasItemsToCollectView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CashLoanDisbursementDetailsView> CashLoanDisbursementDetailsView
        {
            get { return this.GetTable<Shared.CashLoanDisbursementDetailsView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.AllocateCustomersToCSR> AllocateCustomersToCSR
        {
            get { return this.GetTable<Shared.AllocateCustomersToCSR>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.ViewSets> ViewSets
        {
            get { return this.GetTable<Shared.ViewSets>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.StockItem> StockItem
        {
            get { return this.GetTable<Shared.StockItem>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.CustomerSalesManagementView> CustomerSalesManagementView
        {
            get { return this.GetTable<Shared.CustomerSalesManagementView>(); }
        }
    }

    partial class Context
    {
        public System.Data.Linq.Table<Shared.UsersPerBranch> UsersPerBranch
        {
            get { return this.GetTable<Shared.UsersPerBranch>(); }
        }
    }

}
