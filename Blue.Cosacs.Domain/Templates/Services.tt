<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral" #>
<#@ assembly name="Microsoft.CSharp, Version=4.0.0.0, Culture=neutral" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="ServerGenerated.tt" #>
<#@ include file="ServerPrototype.tt" #>
<#@ include file="ClientPrototype.tt" #>
<#@ xsd processor="T4Toolbox.XsdProcessor" file="Services.xsd" #>
<#@ output extension="cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Cosacs Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Windows.Forms;

<#
	var modelPath = Host.ResolvePath("Services.xml");
	var model = Services.Load(modelPath);
	
	var serversGenerated = new ServerGenerated { Model = model };
	serversGenerated.Output.File = "Services\\(DoNotChange)\\Servers.cs";
	serversGenerated.Output.Project = @"..\..\Blue.Cosacs\Blue.Cosacs.csproj";
	serversGenerated.Render();
	
	foreach (var ns in model.Namespace)
	{
		foreach (var service in ns.Service)
		{
			//if (System.IO.File.Exists(@"..\..\Blue.Cosacs\Services\" + ns.name + @"\" + service.name + ".cs"))
				//continue;
			var serverPrototype = new ServerPrototype { Ns = ns, Service = service };
			serverPrototype.Output.File = @"Services\" + ns.name + @"\" + service.name + ".cs";
			serverPrototype.Output.Project = @"..\..\Blue.Cosacs\Blue.Cosacs.csproj";
			serverPrototype.Output.PreserveExistingFile = true;
			serverPrototype.Render();

			var clientPrototype = new ClientPrototype { Ns = ns, Service = service };
			clientPrototype.Output.File = @"..\Services\" + ns.name + @"\" + service.name + ".cs";
			clientPrototype.Output.PreserveExistingFile = true;
			clientPrototype.Render();
		}
	}
#>
namespace Blue.Cosacs.Shared.Services
{
	public partial class Client 
	{
		<# 	foreach (var ns in model.Namespace) 
			{
				if (ns.Service != null)
			 		foreach (var service in ns.Service) 
					{ 
		#>
		
		public static void Call(<#= ns.name #>.<#= service.name #>Request request, 
								Action< <#= ns.name #>.<#= service.name #>Response> onSuccess, Control control = null)
		{
			Execute<<#= ns.name #>.<#= service.name #>Request,<#= ns.name #>.<#= service.name #>Response>(request, onSuccess, null, control);
		}
		
		public static void Call(<#= ns.name #>.<#= service.name #>Request request, 
								Action< <#= ns.name #>.<#= service.name #>Response> onSuccess, 
								Action< <#= ns.name #>.<#= service.name #>Response, Exception> onException, Control control = null)
		{
			Execute<<#= ns.name #>.<#= service.name #>Request,<#= ns.name #>.<#= service.name #>Response>(request, onSuccess, onException, control);
		}
		<# } } #>
		
	}


<#
	foreach (var ns in model.Namespace)
	{
		#>
		
	namespace <#= ns.name #>
	{
		<# if (ns.Service != null)
			 foreach (var service in ns.Service) { #>
			
		public partial class <#= service.name #>Request  { }
		public partial class <#= service.name #>Response { }
		<# } #>
		
	}
		<#
	}
#>

}
