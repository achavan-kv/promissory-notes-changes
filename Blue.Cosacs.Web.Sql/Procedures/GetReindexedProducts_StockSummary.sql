SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--checked the PreviousProductType because its added in 10.4B Image 
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE  Table_Name = 'Product' AND  Column_Name = 'PreviousProductType'
           AND TABLE_SCHEMA = 'Merchandising')
BEGIN
	ALTER TABLE Merchandising.Product ADD PreviousProductType NVARCHAR(50) NULL
END

IF EXISTS (
		SELECT *
		FROM dbo.sysobjects
		WHERE id = OBJECT_ID('[Merchandising].[GetReindexedProducts_StockSummary]')
			AND OBJECTPROPERTY(id, 'IsProcedure') = 1
		)
	DROP PROCEDURE [Merchandising].[GetReindexedProducts_StockSummary]
GO

CREATE PROCEDURE [Merchandising].[GetReindexedProducts_StockSummary] @INDEX_UPDATED_DATA_ONLY BIT
-- ================================================================================================
	-- Version      : 002
	-- 25/02/20 TA  : Added two cases for Promotion Price calculation 1) With Value Off 2) Discount 
-- ================================================================================================	
AS
BEGIN
	SET NOCOUNT ON

	---------1--------------------------------------------***********************************************
	---SALES DATA CAL START
	DECLARE @TYPEOFDATA NVARCHAR(50)
		,@RESULT NVARCHAR(4000) = ''
		,@YEAR INT
		,@NOW DATETIME -----9/9/2019 12:00:00 AM}  D
		,@THISMONTHSTART DATETIME --09/01/2019 D
		,@THISMONTHEND DATETIME ---9/10/2019 12:00:00 AM}  TOMMARODATE D
		,@LASTMONTH DATETIME --08/09/2019 D
		,@LASTMONTHSTART DATETIME -- 08/01/2019
		,@LASTMONTHEND DATETIME --09/01/2019
		,@THISYTDSTART DATETIME ---04/01/2019
		,@LASTYTDSTART DATETIME --- 04/01/2018
		,@LASTYTDEND DATETIME ----09/10/2018

	SET @YEAR = YEAR(GETDATE())
	SET @NOW = GETDATE()
	SET @THISMONTHSTART = DATEADD(MONTH, DATEDIFF(MONTH, 0, @NOW), 0)
	SET @THISMONTHEND = DATEADD(DAY, 1, @NOW)
	SET @LASTMONTH = DATEADD(MONTH, - 1, @NOW)
	SET @LASTMONTHSTART = DATEADD(MM, DATEDIFF(MM, 0, @NOW) - 1, 0)
	SET @LASTMONTHEND = @THISMONTHSTART
	SET @THISYTDSTART = CASE 
			WHEN MONTH(GETDATE()) BETWEEN 4
					AND 12
				THEN '04/01/' + CONVERT(VARCHAR(4), @YEAR)
			ELSE '04/01/' + CONVERT(VARCHAR(4), @YEAR - 1)
			END
	SET @LASTYTDSTART = DATEADD(YEAR, - 1, @THISYTDSTART)
	SET @LASTYTDEND = DATEADD(YEAR, - 1, @THISMONTHEND);

	CREATE TABLE #SALESDATA_TABLE (
		SKU NVARCHAR(50) NULL
		,TRANSACTIONDATE NVARCHAR(100) NULL
		,QUANTITY INT NULL
		,[TYPE] INT NULL
		);

	INSERT INTO #SALESDATA_TABLE
	SELECT EXTENT1.SKU
		,EXTENT1.TRANSACTIONDATE
		,EXTENT1.QUANTITY
		,CASE 
			WHEN EXTENT1.[TYPE] IN (
					'REGULARORDER'
					,'CANCELORDER'
					)
				THEN 0
			ELSE 1
			END AS [TYPE]
	FROM [MERCHANDISING].[CINTORDER] AS [EXTENT1]
	WHERE EXTENT1.TRANSACTIONDATE >= @LASTYTDSTART
		AND (
			EXTENT1.[TYPE] = 'REGULARORDER'
			OR EXTENT1.[TYPE] = 'CANCELORDER'
			OR EXTENT1.[TYPE] = 'DELIVERY'
			OR EXTENT1.[TYPE] = 'RETURN'
			)
		AND EXTENT1.QUANTITY != 0
	
	UNION ALL
	
	SELECT EXTENT1.SKU
		,EXTENT1.TRANSACTIONDATE
		,- EXTENT1.QUANTITY
		,0 AS [TYPE]
	FROM [MERCHANDISING].[CINTORDER] AS [EXTENT1]
	WHERE EXTENT1.TRANSACTIONDATE >= @LASTYTDSTART
		AND (EXTENT1.[TYPE] = 'DELIVERY')
		AND EXTENT1.QUANTITY != 0

	SELECT DISTINCT SKU
		,(
			SELECT ISNULL(SUM(QUANTITY), 0)
			FROM #SALESDATA_TABLE
			WHERE TRANSACTIONDATE >= @THISMONTHSTART
				AND TRANSACTIONDATE < @THISMONTHEND --SALESTHISPERIOD
				AND [TYPE] = 1
				AND SKU = SALES.SKU
			) AS SALESTHISPERIOD
		,(
			SELECT ISNULL(SUM(QUANTITY), 0) AS SALESLASTPERIOD
			FROM #SALESDATA_TABLE
			WHERE TRANSACTIONDATE > @LASTMONTHSTART
				AND TRANSACTIONDATE < @LASTMONTHEND --SALESLASTPERIOD
				AND [TYPE] = 1
				AND SKU = SALES.SKU
			) AS SALESLASTPERIOD
		,(
			SELECT ISNULL(SUM(QUANTITY), 0) AS SALESTHISYTD
			FROM #SALESDATA_TABLE
			WHERE TRANSACTIONDATE >= @THISYTDSTART
				AND TRANSACTIONDATE < @THISMONTHEND --SALESTHISYTD
				AND [TYPE] = 1
				AND SKU = SALES.SKU
			) AS SALESTHISYTD
		,(
			SELECT ISNULL(SUM(QUANTITY), 0) AS SALESLASTYTD
			FROM #SALESDATA_TABLE
			WHERE TRANSACTIONDATE >= @LASTYTDSTART
				AND TRANSACTIONDATE < @LASTYTDEND --SALESLASTYTD
				AND [TYPE] = 1
				AND SKU = SALES.SKU
			) AS SALESLASTYTD
	INTO #SALESDATA
	FROM #SALESDATA_TABLE AS SALES

	--SELECT * FROM #SALESDATA
	---SALES DATA CAL END
	---*********************************************************************************************************
	-------2---------------------------------------------------------
	--PRICE DATA  CAL START
	CREATE TABLE #PRICEDATA_TABLE (
		LOCATIONID NVARCHAR(50) NULL
		,LOCATIONNAME NVARCHAR(200) NULL
		,FASCIA NVARCHAR(100) NULL
		,REGULARPRICE NVARCHAR(50) NULL
		,CASHPRICE NVARCHAR(50) NULL
		,DUTYFREEPRICE NVARCHAR(50) NULL
		,AVERAGEWEIGHTEDCOST NVARCHAR(50) NULL
		,MARGIN NVARCHAR(100) NULL
		,EFFECTIVEDATE NVARCHAR(50) NULL
		,TAXRATE NVARCHAR(50) NULL
		,PRODUCTID INT
		);

	CREATE TABLE #PRICEDATA_FINAL (
		PRODUCTID INT
		,PRICEDATA NVARCHAR(MAX)
		);

	CREATE TABLE #PRICEDATA (
		PRODUCTID INT
		,PRICEDATA NVARCHAR(MAX)
		);

	INSERT INTO #PRICEDATA_TABLE
	SELECT B.LOCATIONID,
		case 
			when B.LOCATIONID is NULL then 'null'  --set small null due to json parse error 
		ELSE
		  (SELECT NAME FROM MERCHANDISING.LOCATION WHERE ID = B.LOCATIONID)
		  END AS NAME
		,ISNULL(B.FASCIA,'null')
		,ISNULL(B.REGULARPRICE, 0)
		,ISNULL(B.CASHPRICE, 0)
		,ISNULL(B.DUTYFREEPRICE, 0)
		,C.AVERAGEWEIGHTEDCOST
		,CASE 
			WHEN B.CASHPRICE IS NULL
				THEN NULL
			WHEN B.CASHPRICE > 0
				AND (
					C.AVERAGEWEIGHTEDCOST = 0
					OR C.AVERAGEWEIGHTEDCOST IS NULL
					)
				THEN 1
			WHEN B.CASHPRICE = 0
				THEN 0
			ELSE (CONVERT(FLOAT, B.CASHPRICE) - CONVERT(FLOAT, C.AVERAGEWEIGHTEDCOST)) / CONVERT(FLOAT, B.CASHPRICE)
			END AS MARGIN
		,B.EFFECTIVEDATE
		,B.TAXRATE
		,B.PRODUCTID
	FROM MERCHANDISING.CURRENTRETAILPRICEVIEW B
	INNER JOIN MERCHANDISING.CURRENTCOSTPRICEVIEW C ON B.PRODUCTID = C.PRODUCTID
	

	--WHERE B.PRODUCTID IN (20,18)
	DECLARE @PRICEDATAALL VARCHAR(MAX)

	INSERT INTO #PRICEDATA_FINAL
	SELECT PRODUCTID
		,CONCAT (
			'{"LocationId":'
			,ISNULL('"'+ P.LOCATIONID+'"', 'null')
			,',"LocationName":'
			,CASE WHEN P.LOCATIONNAME = 'null' then 'null' else '"'+ P.LOCATIONNAME +'"' end
			,',"Fascia":'
			,CASE WHEN P.FASCIA = 'null' then 'null' else '"'+ P.FASCIA +'"' end		
			,',"RegularPrice":'
			,ISNULL(P.REGULARPRICE, 'None')
			,',"CashPrice":'
			,ISNULL(P.CASHPRICE, 'None')
			,',"DutyFreePrice":'
			,ISNULL(P.DUTYFREEPRICE, 'None')
			,',"AverageWeightedCost":'
			,ISNULL(P.AVERAGEWEIGHTEDCOST, 'None')
			,',"Margin":'
			,ISNULL(P.MARGIN, 'None')
			,',"EffectiveDate":"'
			,ISNULL(P.EFFECTIVEDATE, 'None')
			,'","TaxRate":'
			,ISNULL(P.TAXRATE, 'None')
			,'}'
			) AS PRICEDATA
	FROM #PRICEDATA_TABLE AS P

	INSERT INTO #PRICEDATA
	SELECT DISTINCT B.PRODUCTID
		,STUFF((
				SELECT DISTINCT ']' + A.PRICEDATA
				FROM #PRICEDATA_FINAL A
				WHERE A.PRODUCTID = B.PRODUCTID
				FOR XML PATH('')
					,TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 1, '') PRICEDATA
	FROM #PRICEDATA_FINAL B;

	--PRICE DATA CAL END
	------3--------------------------------------------------------------------------------------------------------------------- 
	--PROMO DATA CAL START

	DECLARE @AgreementTaxType VARCHAR(10);

	SELECT	@AgreementTaxType = Value 
	FROM	[dbo].[CountryMaintenance] 
	WHERE	Name = 'Agreement Tax Type'

	CREATE TABLE #PROMODATA_TABLE (
		LOCATIONID NVARCHAR(50) NULL
		,LOCATIONNAME NVARCHAR(100) NULL
		,FASCIA NVARCHAR(100) NULL
		,CASHPRICE NVARCHAR(50) NULL
		,REGULARPRICE NVARCHAR(50) NULL
		,DUTYFREEPRICE NVARCHAR(50) NULL
		,STARTDATE NVARCHAR(50) NULL
		,ENDDATE NVARCHAR(50) NULL
		,EFFECTIVEDATE NVARCHAR(50) NULL
		,TAXRATE NVARCHAR(50) NULL
		,PRODUCTID INT
		);

	INSERT INTO #PROMODATA_TABLE
	SELECT LOCATIONID
		,LOCATIONNAME
		,FASCIA
		,P.CASH AS CASHPRICE
		,P.REGULAR AS REGULARPRICE
		,P.DUTYFREE AS DUTYFREEPRICE
		,STARTDATE
		,ENDDATE
		--,STARTDATE AS EFFECTIVEDATE
		,EFFECTIVEDATE
		,TAXRATE
		,PRODUCTID
	FROM (
			SELECT DISTINCT  ISNULL(B.PRICE,
											CASE	WHEN B.ValueDiscount IS NOT NULL 
													THEN 
															CASE WHEN @AgreementTaxType = 'I' 
															THEN (   (CAST(CASHPRICE AS DECIMAL(18,2)) * (1 + CAST(TAXRATE AS DECIMAL(18,2))))																		
																		- CAST ((1+CAST(TAXRATE AS DECIMAL(18,2)))*B.ValueDiscount AS DECIMAL(18,2))
																	)
																	/ (1+CAST(TAXRATE AS DECIMAL(18,2)))
															ELSE  
																CAST(CASHPRICE AS DECIMAL(18,2))-CAST(B.ValueDiscount AS DECIMAL(18,2)) 
															END  
													ELSE 
															CASE WHEN @AgreementTaxType = 'I' 
															THEN FLOOR(
																		CAST(CASHPRICE AS DECIMAL(18,2)) 
																		* (1+CAST(TAXRATE AS DECIMAL(18,2)))
																		* (1-CAST(B.PercentDiscount AS DECIMAL(18,2)))
																	  ) 
																	  / (1+CAST(TAXRATE AS DECIMAL(18,2)))

															ELSE  
																CAST(CASHPRICE as DECIMAL(18,2)) * CAST(1-B.PercentDiscount as DECIMAL(18,2)) 
															END
											END
	
									) as PRICE
			,B.PRICETYPE,
			A.LOCATIONID,
		case 
			when A.LOCATIONID is NULL then 'null'  --set small null due to json parse error 
		ELSE
		  (SELECT NAME FROM MERCHANDISING.LOCATION WHERE ID = A.LOCATIONID)
		  END AS LOCATIONNAME
			,A.FASCIA
			--,A.STARTDATE
			--,A.ENDDATE
			--,A.STARTDATE AS EFFECTIVEDATE
			,CONVERT(VARCHAR,A.STARTDATE,23) +'T'+CONVERT(VARCHAR,A.STARTDATE,108) AS STARTDATE
			,CONVERT(VARCHAR,A.ENDDATE,23) + 'T'+CONVERT(VARCHAR,A.ENDDATE,108)     AS ENDDATE
			,CONVERT(VARCHAR,A.STARTDATE,23) +'T'+CONVERT(VARCHAR,A.STARTDATE,108) AS EFFECTIVEDATE
			,(select top 1 TAXRATE from MERCHANDISING.RETAILPRICEVIEW where PRODUCTID=B.PRODUCTID order by EFFECTIVEDATE desc)as TAXRATE
			,B.PRODUCTID
		FROM MERCHANDISING.PROMOTION A
		INNER JOIN MERCHANDISING.PROMOTIONDETAIL B ON A.ID = B.PROMOTIONID and A.StartDate<=GETDATE()  and A.ENDDATE>=GETDATE()
		INNER JOIN #PRICEDATA_TABLE price ON price.productid = B.PRODUCTID and A.Fascia=price.Fascia
		) AS J
	PIVOT(SUM(PRICE) FOR PRICETYPE IN (
				CASH
				,REGULAR
				,DUTYFREE
				)) AS P;

	CREATE TABLE #PROMODATA_FINAL (
		PRODUCTID INT
		,PROMODATA NVARCHAR(MAX)
		);

	CREATE TABLE #PROMODATA (
		PRODUCTID INT
		,PROMODATA NVARCHAR(MAX)
		);

	DECLARE @PROMODATAALL VARCHAR(MAX)

	INSERT INTO #PROMODATA_FINAL
	SELECT PRODUCTID
		,CONCAT (
			'{"LocationId":'
			,ISNULL(PM.LOCATIONID, 'null')
			,',"LocationName":'
			,ISNULL(PM.LOCATIONNAME, 'null')
			,',"Fascia":"'
			,ISNULL(PM.FASCIA, 'null')
			,'","CashPrice":"'
			,ISNULL(PM.CASHPRICE, 'None')
			,'","RegularPrice":"'
			,ISNULL(PM.REGULARPRICE, 'None')
			,'","DutyFreePrice":"'
			,ISNULL(PM.DUTYFREEPRICE, 'None')
			,'","StartDate":"'
			,ISNULL(PM.STARTDATE, 'None')
			,'","EndDate":"'
			,ISNULL(PM.ENDDATE, 'None')
			,'","EffectiveDate":"'
			,ISNULL(PM.EFFECTIVEDATE, 'None')
			,'","TaxRate":'
			,ISNULL(PM.TAXRATE, 'None')
			,'}'
			) AS PROMODATA
	FROM #PROMODATA_TABLE AS PM

	SET @PROMODATAALL = (
			SELECT DISTINCT PROMODATA = STUFF((
						SELECT DISTINCT ']' + PROMODATA + ''
						FROM #PROMODATA_FINAL
						FOR XML PATH('')
							,TYPE
						).value('.[1]', 'NVARCHAR(MAX)'), 1, 1, '')
			)

	INSERT INTO #PROMODATA
	SELECT DISTINCT B.PRODUCTID
		,STUFF((
				SELECT DISTINCT ']' + A.PROMODATA 
				FROM #PROMODATA_FINAL A
				WHERE A.PRODUCTID = B.PRODUCTID
				FOR XML PATH('')
					,TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 1, '') PROMODATA
	FROM #PROMODATA_FINAL B;

	--PROMO DATA CAL END
	---------------------------------------------------------------------------------------------------------------
	--MAIN SP START
	DECLARE @STORETYPES VARCHAR(MAX)

	SET @STORETYPES = (
			SELECT DISTINCT STORETYPES = '[' + STUFF((
						SELECT DISTINCT ',' + '"' + S.STORETYPE + '"'
						FROM MERCHANDISING.LOCATION AS S
						FOR XML PATH('')
							,TYPE
						).value('.[1]', 'NVARCHAR(MAX)'), 1, 1, '') + ']'
			)

	
		SELECT
			-- PRODUCT.ID AS ID,
			PRODUCT.ID AS PRODUCTID
			,PRODUCT.SKU
			,PRODUCT.PreviousProductType
			,LONGDESCRIPTION
			,PRODUCT.POSDESCRIPTION
			,PRODUCTTYPE
			,[STATUS].NAME AS [STATUS]
			,CONDITION.CONDITION
			,PRICEDATA = PRID.PRICEDATA
			,--[DBO].[FN_GETPRICEANDPROMO]('PRICE',PRODUCT.ID),
			PROMODATA = PROD.PROMODATA
			,--[DBO].[FN_GETPRICEANDPROMO]('PROMO',PRODUCT.ID),
			CREATEDDATE
			,(
				SELECT SUM(STOCKAVAILABLE)
				FROM [MERCHANDISING].[LOCATIONSTOCKLEVELVIEW1] LS
				WHERE PRODUCT.ID = LS.PRODUCTID
					AND VIRTUALWAREHOUSE = 0
				) AS STOCKAVAILABLE
			,(
				SELECT SUM(STOCKONHAND)
				FROM [MERCHANDISING].[LOCATIONSTOCKLEVELVIEW1] LS
				WHERE PRODUCT.ID = LS.PRODUCTID
					AND VIRTUALWAREHOUSE = 0
				) AS STOCKONHAND
			,(
				SELECT SUM(STOCKONORDER)
				FROM [MERCHANDISING].[LOCATIONSTOCKLEVELVIEW1] LS
				WHERE PRODUCT.ID = LS.PRODUCTID
					AND VIRTUALWAREHOUSE = 0
				) AS STOCKONORDER
			,(
				SELECT SUM(STOCKALLOCATED)
				FROM [MERCHANDISING].[LOCATIONSTOCKLEVELVIEW1] LS
				WHERE PRODUCT.ID = LS.PRODUCTID
					AND VIRTUALWAREHOUSE = 0
				) AS STOCKALLOCATED
			,LABELREQUIRED
			,
			--BRANCHESWITHSTOCK=0,
			BranchesWithStock = (
				SELECT COUNT(*)
				FROM [Merchandising].[LocationStockLevelView1] WITH (NOLOCK)
				WHERE ProductId = product.Id
					AND StockOnHand != 0
					AND VirtualWarehouse = 0
				)
			,PRODUCT.TAGS
			,H.LEVELTAGS
			,COALESCE(STORETYPES, @STORETYPES) AS STORETYPES
			,case 
				when SUPPLIERS is NULL then '['+ '"' + PRIMARYVENDOR.NAME + '"' + ']'  
			ELSE
			  REPLACE(SUPPLIERS, ']', ',' + '"' + PRIMARYVENDOR.NAME + '"' + ']')
			  END AS VENDERS
			,SALESTHISPERIOD = SD.SALESTHISPERIOD
			,SALESLASTPERIOD = SD.SALESLASTPERIOD
			,SALESTHISYTD = SD.SALESTHISYTD
			,SALESLASTYTD = SD.SALESLASTYTD
			,CORPORATEUPC
			,VENDORUPC
			,CORPORATEUPC
			,H.HIERARCHY
			,(
				SELECT NAME
				FROM [MERCHANDISING].[PRODUCTHIERARCHY] PH
				INNER JOIN [MERCHANDISING].[HIERARCHYTAG] HT ON PH.HIERARCHYTAGID = HT.ID
				WHERE PH.PRODUCTID = PRODUCT.ID
					AND LEVELID = 1
				) AS MERCHANDISINGLEVEL_1
			,(
				SELECT NAME
				FROM [MERCHANDISING].[PRODUCTHIERARCHY] PH
				INNER JOIN [MERCHANDISING].[HIERARCHYTAG] HT ON PH.HIERARCHYTAGID = HT.ID
				WHERE PH.PRODUCTID = PRODUCT.ID
					AND LEVELID = 2
				) AS MERCHANDISINGLEVEL_2
			,(
				SELECT NAME
				FROM [MERCHANDISING].[PRODUCTHIERARCHY] PH
				INNER JOIN [MERCHANDISING].[HIERARCHYTAG] HT ON PH.HIERARCHYTAGID = HT.ID
				WHERE PH.PRODUCTID = PRODUCT.ID
					AND LEVELID = 3
				) AS MERCHANDISINGLEVEL_3
		FROM MERCHANDISING.PRODUCT PRODUCT
		INNER JOIN MERCHANDISING.PRODUCTSTATUS [STATUS] ON PRODUCT.[STATUS] = [STATUS].ID
		LEFT JOIN MERCHANDISING.[PRODUCTSUPPLIERCONCATVIEW] [VENDOR] ON [VENDOR].PRODUCTID = PRODUCT.ID
		LEFT JOIN [MERCHANDISING].[REPOSSESSEDPRODUCTCONDITIONVIEW] CONDITION ON CONDITION.PRODUCTID = PRODUCT.ID
		LEFT JOIN MERCHANDISING.PRODUCTHIERARCHYCONCATVIEW H --CALLED TABLE INTO VIEW NO IMPACT
			ON H.PRODUCTID = PRODUCT.ID
		LEFT JOIN MERCHANDISING.SUPPLIER PRIMARYVENDOR --DIRECT TABLE SO NO IMPACT
			ON PRIMARYVENDOR.ID = PRODUCT.PRIMARYVENDORID
		LEFT JOIN #PRICEDATA PRID ON PRODUCT.ID = PRID.PRODUCTID
		LEFT JOIN #PROMODATA PROD ON PRODUCT.ID = PROD.PRODUCTID
		LEFT JOIN #SALESDATA SD ON SD.SKU = PRODUCT.SKU
		WHERE PRODUCT.LASTUPDATEDDATE >= GETDATE() - (
				SELECT CAST(ValueString AS INT)
				FROM [Config].[Setting]
				WHERE ID = 'ScheduleJobUpdateDaySetting'
				)
				 OR @INDEX_UPDATED_DATA_ONLY = 0
	

	--and  PRODUCT.ID IN (13475)
	DROP TABLE #PROMODATA

	DROP TABLE #PROMODATA_FINAL

	DROP TABLE #PROMODATA_TABLE

	DROP TABLE #PRICEDATA

	DROP TABLE #PRICEDATA_FINAL

	DROP TABLE #PRICEDATA_TABLE

	DROP TABLE #SALESDATA

	DROP TABLE #SALESDATA_TABLE
END
GO

