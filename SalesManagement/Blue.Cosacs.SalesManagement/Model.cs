













//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Cosacs Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using Blue.Transactions;

namespace Blue.Cosacs.SalesManagement
{
    	public partial class SalesSummaryPerYear : Blue.Transactions.Command<Context>
	{
	    public SalesSummaryPerYear() : base("SalesManagement.SalesSummaryPerYear")
	    {
	                base.AddInParameter("@TodaysDate", DbType.Date );
	            }
	
	        public DateTime? TodaysDate
	    {
	        get { return (DateTime?)base[0]; }
	        set { base[0] = value; }
	    }
	    }
	
	partial class SalesSummaryPerYear
	{
	    public new void Fill(DataSet ds)
	    {
	        base.Fill(ds);
	    }
	
	        public void Fill(DataSet ds,  DateTime? _TodaysDate)
	    {
	        this.TodaysDate = _TodaysDate;

	        Fill(ds);
	        
	    }
	    }
	

        public partial class ContextBase : DbContextBase
        {
			protected ContextBase(string connectionString = "Default") : base(connectionString) 
			{
				Database.SetInitializer<Context>(null);
			}
		 
            
                public virtual DbSet<CustomerSalesPerson> CustomerSalesPerson { get; set; }
            
                public virtual DbSet<CallType> CallType { get; set; }
            
                public virtual DbSet<Call> Call { get; set; }
            
                public virtual DbSet<FollowUpCall> FollowUpCall { get; set; }
            
                public virtual DbSet<CsrUnavailable> CsrUnavailable { get; set; }
            
                public virtual DbSet<SalesPersonTargets> SalesPersonTargets { get; set; }
            
                public virtual DbSet<IconTypes> IconTypes { get; set; }
            
                public virtual DbSet<AdditionalCustomersInteraction> AdditionalCustomersInteraction { get; set; }
            
                public virtual DbSet<MailsToSend> MailsToSend { get; set; }
            
                public virtual DbSet<SmsToSend> SmsToSend { get; set; }
            
                public virtual DbSet<SummaryTable> SummaryTable { get; set; }
            
            
            protected override void OnModelCreating(DbModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);
                
                        var t0 = modelBuilder.Entity< CustomerSalesPerson >();
                        t0.ToTable("CustomerSalesPerson", "SalesManagement");
                        
                        t0.HasKey(t => t.CustomerId);
                        
                        t0.Property(t => t.CustomerId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(20)
                        
                        
                        ;
                        
                        t0.Property(t => t.SalesPersonId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.TempSalesPersonId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.DoNotCallAgain)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.TempSalesPersonIdBegin)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.TempSalesPersonIdEnd)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.CustomerBranch)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.ReceiveEmails)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.Email)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(60)
                        
                        
                        ;
                        
                        t0.Property(t => t.MobileNumber)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(26)
                        
                        
                        ;
                        
                        t0.Property(t => t.LandLinePhone)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(26)
                        
                        
                        ;
                        
                        var t1 = modelBuilder.Entity< CallType >();
                        t1.ToTable("CallType", "SalesManagement");
                        
                        t1.HasKey(t => t.Id);
                        
                        t1.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t1.Property(t => t.Name)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        t1.Property(t => t.Icon)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        t1.Property(t => t.IsSystemType)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        var t2 = modelBuilder.Entity< Call >();
                        t2.ToTable("Call", "SalesManagement");
                        
                        t2.HasKey(t => t.Id);
                        
                        t2.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.CustomerFirstName)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        t2.Property(t => t.CustomerLastName)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(60)
                        
                        
                        ;
                        
                        t2.Property(t => t.CustomerId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(20)
                        
                        
                        ;
                        
                        t2.Property(t => t.CallTypeId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.ReasonToCall)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(64)
                        
                        
                        ;
                        
                        t2.Property(t => t.SalesPersonId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.ToCallAt)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.CalledAt)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.SpokeToCustomer)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.CallClosedReasonId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.PreviousCallId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.Comments)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(1024)
                        
                        
                        ;
                        
                        t2.Property(t => t.CreatedOn)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.CreatedBy)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.Source)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.Branch)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.Icon)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        t2.Property(t => t.CalledBy)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.AlternativeContactMeanId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.MailchimpTemplateID)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.EmailSubject)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        t2.Property(t => t.SmsText)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(160)
                        
                        
                        ;
                        
                        t2.Property(t => t.MobileNumber)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(26)
                        
                        
                        ;
                        
                        t2.Property(t => t.LandLinePhone)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(26)
                        
                        
                        ;
                        
                        var t3 = modelBuilder.Entity< FollowUpCall >();
                        t3.ToTable("FollowUpCall", "SalesManagement");
                        
                        t3.HasKey(t => t.Id);
                        
                        t3.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t3.Property(t => t.TimePeriod)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t3.Property(t => t.Quantity)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t3.Property(t => t.ReasonToCall)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        t3.Property(t => t.Icon)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        t3.Property(t => t.MailchimpTemplateID)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t3.Property(t => t.AlternativeContactMeanId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t3.Property(t => t.SmsText)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(160)
                        
                        
                        ;
                        
                        t3.Property(t => t.ContactMeansId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t3.Property(t => t.ContactEmailSubject)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        t3.Property(t => t.FlushedEmailSubject)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        var t4 = modelBuilder.Entity< CsrUnavailable >();
                        t4.ToTable("CsrUnavailable", "SalesManagement");
                        
                        t4.HasKey(t => t.Id);
                        
                        t4.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t4.Property(t => t.SalesPersonId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t4.Property(t => t.BeggingUnavailable)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t4.Property(t => t.EndUnavailable)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t4.Property(t => t.CreatedOn)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t4.Property(t => t.CreatedBy)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        var t5 = modelBuilder.Entity< SalesPersonTargets >();
                        t5.ToTable("SalesPersonTargets", "SalesManagement");
                        
                        t5.HasKey(t => t.Id);
                        
                        t5.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t5.Property(t => t.Year)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t5.Property(t => t.TargetYear)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t5.Property(t => t.CreatedOn)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t5.Property(t => t.CreatedBy)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        var t6 = modelBuilder.Entity< IconTypes >();
                        t6.ToTable("IconTypes", "SalesManagement");
                        
                        t6.HasKey(t => t.Id);
                        
                        t6.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t6.Property(t => t.Name)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(50)
                        
                        
                        ;
                        
                        t6.Property(t => t.Icon)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(50)
                        
                        
                        ;
                        
                        var t7 = modelBuilder.Entity< AdditionalCustomersInteraction >();
                        t7.ToTable("AdditionalCustomersInteraction", "SalesManagement");
                        
                        t7.HasKey(t => t.Id);
                        
                        t7.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t7.Property(t => t.MailchimpTemplateID)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t7.Property(t => t.SmsText)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(160)
                        
                        
                        ;
                        
                        t7.Property(t => t.ContactMeansId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t7.Property(t => t.AlternativeContactMeanId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t7.Property(t => t.ContactEmailSubject)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        t7.Property(t => t.FlushedEmailSubject)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        var t8 = modelBuilder.Entity< MailsToSend >();
                        t8.ToTable("MailsToSend", "SalesManagement");
                        
                        t8.HasKey(t => t.id);
                        
                        t8.Property(t => t.id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t8.Property(t => t.CustomerId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(20)
                        
                        
                        ;
                        
                        t8.Property(t => t.TemplateId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t8.Property(t => t.DateToSend)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t8.Property(t => t.MailSudject)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(128)
                        
                        
                        ;
                        
                        t8.Property(t => t.MailAdress)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(128)
                        
                        
                        ;
                        
                        t8.Property(t => t.OverrideUnsubscribe)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t8.Property(t => t.CustomerName)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(92)
                        
                        
                        ;
                        
                        t8.Property(t => t.Body)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(2048)
                        
                        
                        ;
                        
                        var t9 = modelBuilder.Entity< SmsToSend >();
                        t9.ToTable("SmsToSend", "SalesManagement");
                        
                        t9.HasKey(t => t.Id);
                        
                        t9.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t9.Property(t => t.CustomerId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(20)
                        
                        
                        ;
                        
                        t9.Property(t => t.PhoneNumber)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(40)
                        
                        
                        ;
                        
                        t9.Property(t => t.Body)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(160)
                        
                        
                        ;
                        
                        t9.Property(t => t.DateToSend)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        var t10 = modelBuilder.Entity< SummaryTable >();
                        t10.ToTable("SummaryTable", "SalesManagement");
                        
                        t10.HasKey(t => t.Id);
                        
                        t10.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t10.Property(t => t.Date)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t10.Property(t => t.SalesPersonId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t10.Property(t => t.BranchId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t10.Property(t => t.Amount)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t10.Property(t => t.Matrix)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(64)
                        
                        
                        ;
                        
                        modelBuilder.Entity< SalesPersonUnavailableView >().ToTable("SalesPersonUnavailableView", "SalesManagement");
                        
                        modelBuilder.Entity< CallsFromUnavailableCSRView >().ToTable("CallsFromUnavailableCSRView", "SalesManagement");
                        
                        modelBuilder.Entity< CustomerDetailsView >().ToTable("CustomerDetailsView", "SalesManagement");
                        
                        modelBuilder.Entity< BranchManagerCall >().ToTable("BranchManagerCall", "SalesManagement");
                        
            }
        }

        
        [Serializable]
	[DataContract]
    public partial class CustomerSalesPerson
    {
                [DataMember] public string CustomerId { get; set; }
                [DataMember] public int SalesPersonId { get; set; }
                [DataMember] public int? TempSalesPersonId { get; set; }
                [DataMember] public bool DoNotCallAgain { get; set; }
                [DataMember] public DateTime? TempSalesPersonIdBegin { get; set; }
                [DataMember] public DateTime? TempSalesPersonIdEnd { get; set; }
                [DataMember] public short CustomerBranch { get; set; }
                [DataMember] public bool? ReceiveEmails { get; set; }
                [DataMember] public string Email { get; set; }
                [DataMember] public string MobileNumber { get; set; }
                [DataMember] public string LandLinePhone { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class CallType
    {
                [DataMember] public byte Id { get; set; }
                [DataMember] public string Name { get; set; }
                [DataMember] public string Icon { get; set; }
                [DataMember] public bool IsSystemType { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class Call
    {
                [DataMember] public int Id { get; set; }
                [DataMember] public string CustomerFirstName { get; set; }
                [DataMember] public string CustomerLastName { get; set; }
                [DataMember] public string CustomerId { get; set; }
                [DataMember] public byte CallTypeId { get; set; }
                [DataMember] public string ReasonToCall { get; set; }
                [DataMember] public int? SalesPersonId { get; set; }
                [DataMember] public DateTime ToCallAt { get; set; }
                [DataMember] public DateTime? CalledAt { get; set; }
                [DataMember] public bool SpokeToCustomer { get; set; }
                [DataMember] public byte? CallClosedReasonId { get; set; }
                [DataMember] public int? PreviousCallId { get; set; }
                [DataMember] public string Comments { get; set; }
                [DataMember] public DateTime CreatedOn { get; set; }
                [DataMember] public int? CreatedBy { get; set; }
                [DataMember] public byte Source { get; set; }
                [DataMember] public short? Branch { get; set; }
                [DataMember] public string Icon { get; set; }
                [DataMember] public int? CalledBy { get; set; }
                [DataMember] public byte? AlternativeContactMeanId { get; set; }
                [DataMember] public short? MailchimpTemplateID { get; set; }
                [DataMember] public string EmailSubject { get; set; }
                [DataMember] public string SmsText { get; set; }
                [DataMember] public string MobileNumber { get; set; }
                [DataMember] public string LandLinePhone { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class FollowUpCall
    {
                [DataMember] public short Id { get; set; }
                [DataMember] public byte TimePeriod { get; set; }
                [DataMember] public short Quantity { get; set; }
                [DataMember] public string ReasonToCall { get; set; }
                [DataMember] public string Icon { get; set; }
                [DataMember] public short? MailchimpTemplateID { get; set; }
                [DataMember] public byte? AlternativeContactMeanId { get; set; }
                [DataMember] public string SmsText { get; set; }
                [DataMember] public byte ContactMeansId { get; set; }
                [DataMember] public string ContactEmailSubject { get; set; }
                [DataMember] public string FlushedEmailSubject { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class CsrUnavailable
    {
                [DataMember] public short Id { get; set; }
                [DataMember] public int SalesPersonId { get; set; }
                [DataMember] public DateTime BeggingUnavailable { get; set; }
                [DataMember] public DateTime EndUnavailable { get; set; }
                [DataMember] public DateTime CreatedOn { get; set; }
                [DataMember] public int CreatedBy { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class SalesPersonTargets
    {
                [DataMember] public short Id { get; set; }
                [DataMember] public short Year { get; set; }
                [DataMember] public decimal TargetYear { get; set; }
                [DataMember] public DateTime CreatedOn { get; set; }
                [DataMember] public int CreatedBy { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class IconTypes
    {
                [DataMember] public byte Id { get; set; }
                [DataMember] public string Name { get; set; }
                [DataMember] public string Icon { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class AdditionalCustomersInteraction
    {
                [DataMember] public byte Id { get; set; }
                [DataMember] public short? MailchimpTemplateID { get; set; }
                [DataMember] public string SmsText { get; set; }
                [DataMember] public byte ContactMeansId { get; set; }
                [DataMember] public byte? AlternativeContactMeanId { get; set; }
                [DataMember] public string ContactEmailSubject { get; set; }
                [DataMember] public string FlushedEmailSubject { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class MailsToSend
    {
                [DataMember] public int id { get; set; }
                [DataMember] public string CustomerId { get; set; }
                [DataMember] public short TemplateId { get; set; }
                [DataMember] public DateTime DateToSend { get; set; }
                [DataMember] public string MailSudject { get; set; }
                [DataMember] public string MailAdress { get; set; }
                [DataMember] public bool OverrideUnsubscribe { get; set; }
                [DataMember] public string CustomerName { get; set; }
                [DataMember] public string Body { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class SmsToSend
    {
                [DataMember] public int Id { get; set; }
                [DataMember] public string CustomerId { get; set; }
                [DataMember] public string PhoneNumber { get; set; }
                [DataMember] public string Body { get; set; }
                [DataMember] public DateTime DateToSend { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class SummaryTable
    {
                [DataMember] public int Id { get; set; }
                [DataMember] public DateTime Date { get; set; }
                [DataMember] public int SalesPersonId { get; set; }
                [DataMember] public short BranchId { get; set; }
                [DataMember] public decimal Amount { get; set; }
                [DataMember] public string Matrix { get; set; }
            }

        partial class ContextBase
    {
        public virtual DbSet<SalesPersonUnavailableView> SalesPersonUnavailableView { get; set; }
    }
    
        [Serializable]
	[DataContract]
    public partial class SalesPersonUnavailableView
    {
                [DataMember] public DateTime BeggingUnavailable { get; set; }
                [DataMember] public DateTime EndUnavailable { get; set; }
                [DataMember] public int SalesPersonId { get; set; }
                [DataMember] public short Id { get; set; }
                [DataMember] public short SalesPersonBranch { get; set; }
            }

        partial class ContextBase
    {
        public virtual DbSet<CallsFromUnavailableCSRView> CallsFromUnavailableCSRView { get; set; }
    }
    
        [Serializable]
	[DataContract]
    public partial class CallsFromUnavailableCSRView
    {
                [DataMember] public short? BranchNo { get; set; }
                [DataMember] public int CallId { get; set; }
            }

        partial class ContextBase
    {
        public virtual DbSet<CustomerDetailsView> CustomerDetailsView { get; set; }
    }
    
        [Serializable]
	[DataContract]
    public partial class CustomerDetailsView
    {
                [DataMember] public short BranchNo { get; set; }
                [DataMember] public bool DoNotCallAgain { get; set; }
                [DataMember] public int SalesPersonId { get; set; }
                [DataMember] public int Id { get; set; }
            }

        partial class ContextBase
    {
        public virtual DbSet<BranchManagerCall> BranchManagerCall { get; set; }
    }
    
        [Serializable]
	[DataContract]
    public partial class BranchManagerCall
    {
                [DataMember] public int CallId { get; set; }
                [DataMember] public int? SalesPersonId { get; set; }
                [DataMember] public string CustomerFirstName { get; set; }
                [DataMember] public string CustomerLastName { get; set; }
                [DataMember] public string ReasonForCalling { get; set; }
                [DataMember] public DateTime ToCallAt { get; set; }
                [DataMember] public byte CallTypeId { get; set; }
                [DataMember] public string CustomerId { get; set; }
                [DataMember] public short? CustomerBranch { get; set; }
                [DataMember] public bool? DoNotCallAgain { get; set; }
            }

        public partial class Settings : Blue.Config.SettingsBase
    {
        public Settings() : base(Blue.Cosacs.SalesManagement.Module.Instance) {}

        public static StructureMap.Configuration.DSL.IRegistry Register<T>(StructureMap.Configuration.DSL.IRegistry registry, T singletonObject)
            where T : Blue.Config.ISettings

        {
            registry.For<Blue.Config.ISettings>().Add(singletonObject).Named(@"Blue.Cosacs.SalesManagement");
            registry.For<T>().Singleton().Use(singletonObject);
            return registry;
        }

        public override Blue.Config.SettingMetadata[] Metadata()
        {
            return metadata;
        }

        #region Setting Metadata
        private static readonly Blue.Config.SettingMetadata[] metadata = new Blue.Config.SettingMetadata[] 
        {
                        new Blue.Config.SettingMetadata.@int {
                Id = @"DaysToCallBeforeInstallmentEnds",
                Name = @"Schedule date for a Last instalment call ",
                Description = @"Date at which 'Last Instalment call' can be scheduled ",
                Category = @"Sales Management",
                Default = @"3",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@int,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"DaysToScheduleCallBeforeInstallmentEnds",
                Name = @" The number of days before last instalment date",
                Description = @"No of days before Last Instalment date that a customer can be considered for Last instalment call",
                Category = @"Sales Management",
                Default = @"10",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@int,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"HowManyDaysToBeAnInactiveCreditCustomer",
                Name = @"Days since the Customer made the last payment to be considered as an Inactive Credit/Cash customer",
                Description = @"The number of days since the Customer made the last payment to be considered as an inactive credit/cash customer",
                Category = @"Sales Management",
                Default = @"180",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@int,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"HowManyDaysToBeAnInactiveCashCustomer",
                Name = @"Days since the last call to a Customer to be considered as an Inactive Credit/Cash customer",
                Description = @"The number of days since the last call for a Customer to be considered as an inactive credit/cash customer",
                Category = @"Sales Management",
                Default = @"180",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@int,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"DaysToScheduleCallToInactiveCustomers",
                Name = @"Schedule the call to a date X days after today for inactive customers",
                Description = @"The number of days ahead to schedule a call to an inactive customer",
                Category = @"Sales Management",
                Default = @"3",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@int,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"DaysToFlushUnmadeCalls",
                Name = @"No of Days to get a date prior to which all unmade calls can be flushed",
                Description = @"No of days to get a date prior to which all unmade calls will be flushed ",
                Category = @"Sales Management",
                Default = @"7",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@int,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"LastXCalls",
                Name = @"Previous Calls to display",
                Description = @"Number of previous calls to display in the Call Log page when logging a call.",
                Category = @"Sales Management",
                Default = @"5",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@int,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@int {
                Id = @"SlowServiceRequests",
                Name = @"No of days since SR is open ",
                Description = @"How many days an SR must be unresolved and not closed to appear in Slow SR list",
                Category = @"Sales Management",
                Default = @"8",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@int,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@decimal {
                Id = @"SalesFollowUpThreshold",
                Name = @"Sales Follow-up Threshold",
                Description = @"Amount of the sales order (aggrement total for credit and total sale value for cash sales) for customer to be added to the sales follow-up list",
                Category = @"Sales Management",
                Default = @"1000",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@decimal,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                    };
        #endregion

        #region Setting Enums
                #endregion

        #region Setting Properties
                public int DaysToCallBeforeInstallmentEnds 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Int("DaysToCallBeforeInstallmentEnds"); }
        }
                public int DaysToScheduleCallBeforeInstallmentEnds 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Int("DaysToScheduleCallBeforeInstallmentEnds"); }
        }
                public int HowManyDaysToBeAnInactiveCreditCustomer 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Int("HowManyDaysToBeAnInactiveCreditCustomer"); }
        }
                public int HowManyDaysToBeAnInactiveCashCustomer 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Int("HowManyDaysToBeAnInactiveCashCustomer"); }
        }
                public int DaysToScheduleCallToInactiveCustomers 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Int("DaysToScheduleCallToInactiveCustomers"); }
        }
                public int DaysToFlushUnmadeCalls 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Int("DaysToFlushUnmadeCalls"); }
        }
                public int LastXCalls 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Int("LastXCalls"); }
        }
                public int SlowServiceRequests 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Int("SlowServiceRequests"); }
        }
                public decimal SalesFollowUpThreshold 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Decimal("SalesFollowUpThreshold"); }
        }
                #endregion
    }
    
    

        public class Module : Blue.Config.ModuleBase
    {
        private Module() {}

        public static readonly Module Instance = new Module
        {
            Label = @"Sales Management",
            Namespace = @"Blue.Cosacs.SalesManagement",
            Schema = @"SalesManagement",
        };
    }
    }
