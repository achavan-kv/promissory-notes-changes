













//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Cosacs Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using Blue.Transactions;

namespace Blue.Cosacs.Communication
{
    	public partial class InsertBlackEmailList : Blue.Transactions.Command<Context>
	{
	    public InsertBlackEmailList() : base("Communication.InsertBlackEmailList")
	    {
	                base.AddInParameter("@Xml", DbType.AnsiString );
	                base.AddInParameter("@Date", DbType.Date );
	            }
	
	        public string Xml
	    {
	        get { return (string)base[0]; }
	        set { base[0] = value; }
	    }
	        public DateTime? Date
	    {
	        get { return (DateTime?)base[1]; }
	        set { base[1] = value; }
	    }
	    }
	
	partial class InsertBlackEmailList
	{
	    public new int ExecuteNonQuery()
	    {
	        return base.ExecuteNonQuery();
	    }
	
	        public int ExecuteNonQuery( string _Xml, DateTime? _Date)
	    {
	        this.Xml = _Xml;
this.Date = _Date;

	        var __result = base.ExecuteNonQuery();
	        
	        return __result;
	    }
	    }
	
	public partial class GetSmsNotSent : Blue.Transactions.Command<Context>
	{
	    public GetSmsNotSent() : base("Communication.GetSmsNotSent")
	    {
	                base.AddInParameter("@ExportedOn", DbType.DateTime );
	            }
	
	        public DateTime? ExportedOn
	    {
	        get { return (DateTime?)base[0]; }
	        set { base[0] = value; }
	    }
	    }
	
	partial class GetSmsNotSent
	{
	    public new void Fill(DataSet ds)
	    {
	        base.Fill(ds);
	    }
	
	        public void Fill(DataSet ds,  DateTime? _ExportedOn)
	    {
	        this.ExportedOn = _ExportedOn;

	        Fill(ds);
	        
	    }
	    }
	

        public partial class ContextBase : DbContextBase
        {
			protected ContextBase(string connectionString = "Default") : base(connectionString) 
			{
				Database.SetInitializer<Context>(null);
			}
		 
            
                public virtual DbSet<MailchimpTemplateID> MailchimpTemplateID { get; set; }
            
                public virtual DbSet<SandBoxMails> SandBoxMails { get; set; }
            
                public virtual DbSet<BlackEmailList> BlackEmailList { get; set; }
            
                public virtual DbSet<SmsToSend> SmsToSend { get; set; }
            
                public virtual DbSet<SmsUnsubcription> SmsUnsubcription { get; set; }
            
                public virtual DbSet<CustomerInteraction> CustomerInteraction { get; set; }
            
            
            protected override void OnModelCreating(DbModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);
                
                        var t0 = modelBuilder.Entity< MailchimpTemplateID >();
                        t0.ToTable("MailchimpTemplateID", "Communication");
                        
                        t0.HasKey(t => t.Id);
                        
                        t0.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.Name)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        t0.Property(t => t.TemplateId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        t0.Property(t => t.CreatedOn)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.CreatedBy)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t0.Property(t => t.CanSetBody)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        var t1 = modelBuilder.Entity< SandBoxMails >();
                        t1.ToTable("SandBoxMails", "Communication");
                        
                        t1.HasKey(t => t.Id);
                        
                        t1.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t1.Property(t => t.CreatedOn)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t1.Property(t => t.MailMessage)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        var t2 = modelBuilder.Entity< BlackEmailList >();
                        t2.ToTable("BlackEmailList", "Communication");
                        
                        t2.HasKey(t => t.Id);
                        
                        t2.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t2.Property(t => t.Email)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(128)
                        
                        
                        ;
                        
                        t2.Property(t => t.Reason)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        t2.Property(t => t.Provider)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(32)
                        
                        
                        ;
                        
                        t2.Property(t => t.CreatedOn)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        var t3 = modelBuilder.Entity< SmsToSend >();
                        t3.ToTable("SmsToSend", "Communication");
                        
                        t3.HasKey(t => t.Id);
                        
                        t3.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t3.Property(t => t.PhoneNumber)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(26)
                        
                        
                        ;
                        
                        t3.Property(t => t.CustomerId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(20)
                        
                        
                        ;
                        
                        t3.Property(t => t.Body)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(160)
                        
                        
                        ;
                        
                        t3.Property(t => t.ExportedOn)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        var t4 = modelBuilder.Entity< SmsUnsubcription >();
                        t4.ToTable("SmsUnsubcription", "Communication");
                        
                        t4.HasKey(t => t.Id);
                        
                        t4.Property(t => t.Id)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.Identity)
                        
                        
                        
                        
                        ;
                        
                        t4.Property(t => t.CustomerId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(20)
                        
                        
                        ;
                        
                        t4.Property(t => t.PhoneNumber)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(26)
                        
                        
                        ;
                        
                        t4.Property(t => t.CreatedOn)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t4.Property(t => t.CreatedBy)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        var t5 = modelBuilder.Entity< CustomerInteraction >();
                        t5.ToTable("CustomerInteraction", "Communication");
                        
                        t5.HasKey(t => t.CustomerId);
                        
                        t5.Property(t => t.CustomerId)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        .IsUnicode(false)
                        .HasMaxLength(20)
                        
                        
                        ;
                        
                        t5.Property(t => t.LastEmailSentOn)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
                        t5.Property(t => t.LastSmsSentOn)
                        .HasDatabaseGeneratedOption(databaseGeneratedOption: DatabaseGeneratedOption.None)
                        
                        
                        
                        
                        ;
                        
            }
        }

        
        [Serializable]
	[DataContract]
    public partial class MailchimpTemplateID
    {
                [DataMember] public short Id { get; set; }
                [DataMember] public string Name { get; set; }
                [DataMember] public string TemplateId { get; set; }
                [DataMember] public DateTime CreatedOn { get; set; }
                [DataMember] public int CreatedBy { get; set; }
                [DataMember] public bool CanSetBody { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class SandBoxMails
    {
                [DataMember] public int Id { get; set; }
                [DataMember] public DateTime CreatedOn { get; set; }
                [DataMember] public string MailMessage { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class BlackEmailList
    {
                [DataMember] public int Id { get; set; }
                [DataMember] public string Email { get; set; }
                [DataMember] public string Reason { get; set; }
                [DataMember] public string Provider { get; set; }
                [DataMember] public DateTime CreatedOn { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class SmsToSend
    {
                [DataMember] public int Id { get; set; }
                [DataMember] public string PhoneNumber { get; set; }
                [DataMember] public string CustomerId { get; set; }
                [DataMember] public string Body { get; set; }
                [DataMember] public DateTime? ExportedOn { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class SmsUnsubcription
    {
                [DataMember] public int Id { get; set; }
                [DataMember] public string CustomerId { get; set; }
                [DataMember] public string PhoneNumber { get; set; }
                [DataMember] public DateTime? CreatedOn { get; set; }
                [DataMember] public int? CreatedBy { get; set; }
            }

    
        [Serializable]
	[DataContract]
    public partial class CustomerInteraction
    {
                [DataMember] public string CustomerId { get; set; }
                [DataMember] public DateTime? LastEmailSentOn { get; set; }
                [DataMember] public DateTime? LastSmsSentOn { get; set; }
            }

        public partial class Settings : Blue.Config.SettingsBase
    {
        public Settings() : base(Blue.Cosacs.Communication.Module.Instance) {}

        public static StructureMap.Configuration.DSL.IRegistry Register<T>(StructureMap.Configuration.DSL.IRegistry registry, T singletonObject)
            where T : Blue.Config.ISettings

        {
            registry.For<Blue.Config.ISettings>().Add(singletonObject).Named(@"Blue.Cosacs.Communication");
            registry.For<T>().Singleton().Use(singletonObject);
            return registry;
        }

        public override Blue.Config.SettingMetadata[] Metadata()
        {
            return metadata;
        }

        #region Setting Metadata
        private static readonly Blue.Config.SettingMetadata[] metadata = new Blue.Config.SettingMetadata[] 
        {
                        new Blue.Config.SettingMetadata.@string {
                Id = @"MandrillApiKey",
                Name = @"Api key for using Mandrill",
                Description = @"Mandrill api key for sending transactional emails",
                Category = @"Communication",
                Default = @"",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@string,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@bit {
                Id = @"SandBoxMode",
                Name = @"Don't send to Mandrill",
                Description = @"Leave as true for testing emails within CoSaCS only. When set to false, scheduled emails will be passed to Mandrill for actually sending to customers. Note that Mandrill can additionally be used in 'test mode' as an extra layer of testing",
                Category = @"Communication",
                Default = @"true",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@bit,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                        new Blue.Config.SettingMetadata.@string {
                Id = @"EmailsSender",
                Name = @"User Address",
                Description = @"The email address to which customers notification emails will be sent",
                Category = @"Communication",
                Default = @"",
				Fixed = @"",
                //Type = Blue.Config.SettingMetadata.SettingsTypeEnum.@string,
                CodeList = @"",
                Precision = 28,
                Scale = 12,
                            },
                    };
        #endregion

        #region Setting Enums
                #endregion

        #region Setting Properties
                public System.String MandrillApiKey 
        { 
            get { return ((Blue.Config.ISettingsReader)this).String("MandrillApiKey"); }
        }
                public bool SandBoxMode 
        { 
            get { return ((Blue.Config.ISettingsReader)this).Bit("SandBoxMode"); }
        }
                public System.String EmailsSender 
        { 
            get { return ((Blue.Config.ISettingsReader)this).String("EmailsSender"); }
        }
                #endregion
    }
    
    

        public class Module : Blue.Config.ModuleBase
    {
        private Module() {}

        public static readonly Module Instance = new Module
        {
            Label = @"Communication",
            Namespace = @"Blue.Cosacs.Communication",
            Schema = @"Communication",
        };
    }
    }
